# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['SourceKerberosArgs', 'SourceKerberos']

@pulumi.input_type
class SourceKerberosArgs:
    def __init__(__self__, *,
                 realm: pulumi.Input[str],
                 slug: pulumi.Input[str],
                 authentication_flow: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 enrollment_flow: Optional[pulumi.Input[str]] = None,
                 group_matching_mode: Optional[pulumi.Input[str]] = None,
                 krb5_conf: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 password_login_update_internal_password: Optional[pulumi.Input[bool]] = None,
                 policy_engine_mode: Optional[pulumi.Input[str]] = None,
                 source_kerberos_id: Optional[pulumi.Input[str]] = None,
                 spnego_ccache: Optional[pulumi.Input[str]] = None,
                 spnego_keytab: Optional[pulumi.Input[str]] = None,
                 spnego_server_name: Optional[pulumi.Input[str]] = None,
                 sync_ccache: Optional[pulumi.Input[str]] = None,
                 sync_keytab: Optional[pulumi.Input[str]] = None,
                 sync_password: Optional[pulumi.Input[str]] = None,
                 sync_principal: Optional[pulumi.Input[str]] = None,
                 sync_users: Optional[pulumi.Input[bool]] = None,
                 sync_users_password: Optional[pulumi.Input[bool]] = None,
                 user_matching_mode: Optional[pulumi.Input[str]] = None,
                 user_path_template: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a SourceKerberos resource.
        :param pulumi.Input[str] realm: Kerberos realm
        :param pulumi.Input[bool] enabled: Defaults to `true`.
        :param pulumi.Input[str] group_matching_mode: Allowed values: - `identifier` - `name_link` - `name_deny` Defaults to `identifier`.
        :param pulumi.Input[str] krb5_conf: Custom krb5.conf to use. Uses the system one by default
        :param pulumi.Input[bool] password_login_update_internal_password: If enabled, the authentik-stored password will be updated upon login with the Kerberos password backend Defaults to
               `false`.
        :param pulumi.Input[str] policy_engine_mode: Allowed values: - `all` - `any` Defaults to `any`.
        :param pulumi.Input[str] spnego_ccache: Credential cache to use for SPNEGO in form type:residual
        :param pulumi.Input[str] spnego_keytab: SPNEGO keytab base64-encoded or path to keytab in the form FILE:path
        :param pulumi.Input[str] spnego_server_name: Force the use of a specific server name for SPNEGO
        :param pulumi.Input[str] sync_ccache: Credentials cache to authenticate to kadmin for sync. Must be in the form TYPE:residual
        :param pulumi.Input[str] sync_keytab: Keytab to authenticate to kadmin for sync. Must be base64-encoded or in the form TYPE:residual
        :param pulumi.Input[str] sync_password: Password to authenticate to kadmin for sync
        :param pulumi.Input[str] sync_principal: Principal to authenticate to kadmin for sync.
        :param pulumi.Input[bool] sync_users: Sync users from Kerberos into authentik Defaults to `true`.
        :param pulumi.Input[bool] sync_users_password: When a user changes their password, sync it back to Kerberos Defaults to `true`.
        :param pulumi.Input[str] user_matching_mode: Allowed values: - `identifier` - `email_link` - `email_deny` - `username_link` - `username_deny` Defaults to
               `identifier`.
        :param pulumi.Input[str] user_path_template: Defaults to `goauthentik.io/sources/%(slug)s`.
        :param pulumi.Input[str] uuid: Generated.
        """
        pulumi.set(__self__, "realm", realm)
        pulumi.set(__self__, "slug", slug)
        if authentication_flow is not None:
            pulumi.set(__self__, "authentication_flow", authentication_flow)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if enrollment_flow is not None:
            pulumi.set(__self__, "enrollment_flow", enrollment_flow)
        if group_matching_mode is not None:
            pulumi.set(__self__, "group_matching_mode", group_matching_mode)
        if krb5_conf is not None:
            pulumi.set(__self__, "krb5_conf", krb5_conf)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if password_login_update_internal_password is not None:
            pulumi.set(__self__, "password_login_update_internal_password", password_login_update_internal_password)
        if policy_engine_mode is not None:
            pulumi.set(__self__, "policy_engine_mode", policy_engine_mode)
        if source_kerberos_id is not None:
            pulumi.set(__self__, "source_kerberos_id", source_kerberos_id)
        if spnego_ccache is not None:
            pulumi.set(__self__, "spnego_ccache", spnego_ccache)
        if spnego_keytab is not None:
            pulumi.set(__self__, "spnego_keytab", spnego_keytab)
        if spnego_server_name is not None:
            pulumi.set(__self__, "spnego_server_name", spnego_server_name)
        if sync_ccache is not None:
            pulumi.set(__self__, "sync_ccache", sync_ccache)
        if sync_keytab is not None:
            pulumi.set(__self__, "sync_keytab", sync_keytab)
        if sync_password is not None:
            pulumi.set(__self__, "sync_password", sync_password)
        if sync_principal is not None:
            pulumi.set(__self__, "sync_principal", sync_principal)
        if sync_users is not None:
            pulumi.set(__self__, "sync_users", sync_users)
        if sync_users_password is not None:
            pulumi.set(__self__, "sync_users_password", sync_users_password)
        if user_matching_mode is not None:
            pulumi.set(__self__, "user_matching_mode", user_matching_mode)
        if user_path_template is not None:
            pulumi.set(__self__, "user_path_template", user_path_template)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def realm(self) -> pulumi.Input[str]:
        """
        Kerberos realm
        """
        return pulumi.get(self, "realm")

    @realm.setter
    def realm(self, value: pulumi.Input[str]):
        pulumi.set(self, "realm", value)

    @property
    @pulumi.getter
    def slug(self) -> pulumi.Input[str]:
        return pulumi.get(self, "slug")

    @slug.setter
    def slug(self, value: pulumi.Input[str]):
        pulumi.set(self, "slug", value)

    @property
    @pulumi.getter(name="authenticationFlow")
    def authentication_flow(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "authentication_flow")

    @authentication_flow.setter
    def authentication_flow(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authentication_flow", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Defaults to `true`.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="enrollmentFlow")
    def enrollment_flow(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "enrollment_flow")

    @enrollment_flow.setter
    def enrollment_flow(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enrollment_flow", value)

    @property
    @pulumi.getter(name="groupMatchingMode")
    def group_matching_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Allowed values: - `identifier` - `name_link` - `name_deny` Defaults to `identifier`.
        """
        return pulumi.get(self, "group_matching_mode")

    @group_matching_mode.setter
    def group_matching_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_matching_mode", value)

    @property
    @pulumi.getter(name="krb5Conf")
    def krb5_conf(self) -> Optional[pulumi.Input[str]]:
        """
        Custom krb5.conf to use. Uses the system one by default
        """
        return pulumi.get(self, "krb5_conf")

    @krb5_conf.setter
    def krb5_conf(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "krb5_conf", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="passwordLoginUpdateInternalPassword")
    def password_login_update_internal_password(self) -> Optional[pulumi.Input[bool]]:
        """
        If enabled, the authentik-stored password will be updated upon login with the Kerberos password backend Defaults to
        `false`.
        """
        return pulumi.get(self, "password_login_update_internal_password")

    @password_login_update_internal_password.setter
    def password_login_update_internal_password(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "password_login_update_internal_password", value)

    @property
    @pulumi.getter(name="policyEngineMode")
    def policy_engine_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Allowed values: - `all` - `any` Defaults to `any`.
        """
        return pulumi.get(self, "policy_engine_mode")

    @policy_engine_mode.setter
    def policy_engine_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_engine_mode", value)

    @property
    @pulumi.getter(name="sourceKerberosId")
    def source_kerberos_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_kerberos_id")

    @source_kerberos_id.setter
    def source_kerberos_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_kerberos_id", value)

    @property
    @pulumi.getter(name="spnegoCcache")
    def spnego_ccache(self) -> Optional[pulumi.Input[str]]:
        """
        Credential cache to use for SPNEGO in form type:residual
        """
        return pulumi.get(self, "spnego_ccache")

    @spnego_ccache.setter
    def spnego_ccache(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spnego_ccache", value)

    @property
    @pulumi.getter(name="spnegoKeytab")
    def spnego_keytab(self) -> Optional[pulumi.Input[str]]:
        """
        SPNEGO keytab base64-encoded or path to keytab in the form FILE:path
        """
        return pulumi.get(self, "spnego_keytab")

    @spnego_keytab.setter
    def spnego_keytab(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spnego_keytab", value)

    @property
    @pulumi.getter(name="spnegoServerName")
    def spnego_server_name(self) -> Optional[pulumi.Input[str]]:
        """
        Force the use of a specific server name for SPNEGO
        """
        return pulumi.get(self, "spnego_server_name")

    @spnego_server_name.setter
    def spnego_server_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spnego_server_name", value)

    @property
    @pulumi.getter(name="syncCcache")
    def sync_ccache(self) -> Optional[pulumi.Input[str]]:
        """
        Credentials cache to authenticate to kadmin for sync. Must be in the form TYPE:residual
        """
        return pulumi.get(self, "sync_ccache")

    @sync_ccache.setter
    def sync_ccache(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sync_ccache", value)

    @property
    @pulumi.getter(name="syncKeytab")
    def sync_keytab(self) -> Optional[pulumi.Input[str]]:
        """
        Keytab to authenticate to kadmin for sync. Must be base64-encoded or in the form TYPE:residual
        """
        return pulumi.get(self, "sync_keytab")

    @sync_keytab.setter
    def sync_keytab(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sync_keytab", value)

    @property
    @pulumi.getter(name="syncPassword")
    def sync_password(self) -> Optional[pulumi.Input[str]]:
        """
        Password to authenticate to kadmin for sync
        """
        return pulumi.get(self, "sync_password")

    @sync_password.setter
    def sync_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sync_password", value)

    @property
    @pulumi.getter(name="syncPrincipal")
    def sync_principal(self) -> Optional[pulumi.Input[str]]:
        """
        Principal to authenticate to kadmin for sync.
        """
        return pulumi.get(self, "sync_principal")

    @sync_principal.setter
    def sync_principal(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sync_principal", value)

    @property
    @pulumi.getter(name="syncUsers")
    def sync_users(self) -> Optional[pulumi.Input[bool]]:
        """
        Sync users from Kerberos into authentik Defaults to `true`.
        """
        return pulumi.get(self, "sync_users")

    @sync_users.setter
    def sync_users(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "sync_users", value)

    @property
    @pulumi.getter(name="syncUsersPassword")
    def sync_users_password(self) -> Optional[pulumi.Input[bool]]:
        """
        When a user changes their password, sync it back to Kerberos Defaults to `true`.
        """
        return pulumi.get(self, "sync_users_password")

    @sync_users_password.setter
    def sync_users_password(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "sync_users_password", value)

    @property
    @pulumi.getter(name="userMatchingMode")
    def user_matching_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Allowed values: - `identifier` - `email_link` - `email_deny` - `username_link` - `username_deny` Defaults to
        `identifier`.
        """
        return pulumi.get(self, "user_matching_mode")

    @user_matching_mode.setter
    def user_matching_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_matching_mode", value)

    @property
    @pulumi.getter(name="userPathTemplate")
    def user_path_template(self) -> Optional[pulumi.Input[str]]:
        """
        Defaults to `goauthentik.io/sources/%(slug)s`.
        """
        return pulumi.get(self, "user_path_template")

    @user_path_template.setter
    def user_path_template(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_path_template", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        """
        Generated.
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class _SourceKerberosState:
    def __init__(__self__, *,
                 authentication_flow: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 enrollment_flow: Optional[pulumi.Input[str]] = None,
                 group_matching_mode: Optional[pulumi.Input[str]] = None,
                 krb5_conf: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 password_login_update_internal_password: Optional[pulumi.Input[bool]] = None,
                 policy_engine_mode: Optional[pulumi.Input[str]] = None,
                 realm: Optional[pulumi.Input[str]] = None,
                 slug: Optional[pulumi.Input[str]] = None,
                 source_kerberos_id: Optional[pulumi.Input[str]] = None,
                 spnego_ccache: Optional[pulumi.Input[str]] = None,
                 spnego_keytab: Optional[pulumi.Input[str]] = None,
                 spnego_server_name: Optional[pulumi.Input[str]] = None,
                 sync_ccache: Optional[pulumi.Input[str]] = None,
                 sync_keytab: Optional[pulumi.Input[str]] = None,
                 sync_password: Optional[pulumi.Input[str]] = None,
                 sync_principal: Optional[pulumi.Input[str]] = None,
                 sync_users: Optional[pulumi.Input[bool]] = None,
                 sync_users_password: Optional[pulumi.Input[bool]] = None,
                 user_matching_mode: Optional[pulumi.Input[str]] = None,
                 user_path_template: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering SourceKerberos resources.
        :param pulumi.Input[bool] enabled: Defaults to `true`.
        :param pulumi.Input[str] group_matching_mode: Allowed values: - `identifier` - `name_link` - `name_deny` Defaults to `identifier`.
        :param pulumi.Input[str] krb5_conf: Custom krb5.conf to use. Uses the system one by default
        :param pulumi.Input[bool] password_login_update_internal_password: If enabled, the authentik-stored password will be updated upon login with the Kerberos password backend Defaults to
               `false`.
        :param pulumi.Input[str] policy_engine_mode: Allowed values: - `all` - `any` Defaults to `any`.
        :param pulumi.Input[str] realm: Kerberos realm
        :param pulumi.Input[str] spnego_ccache: Credential cache to use for SPNEGO in form type:residual
        :param pulumi.Input[str] spnego_keytab: SPNEGO keytab base64-encoded or path to keytab in the form FILE:path
        :param pulumi.Input[str] spnego_server_name: Force the use of a specific server name for SPNEGO
        :param pulumi.Input[str] sync_ccache: Credentials cache to authenticate to kadmin for sync. Must be in the form TYPE:residual
        :param pulumi.Input[str] sync_keytab: Keytab to authenticate to kadmin for sync. Must be base64-encoded or in the form TYPE:residual
        :param pulumi.Input[str] sync_password: Password to authenticate to kadmin for sync
        :param pulumi.Input[str] sync_principal: Principal to authenticate to kadmin for sync.
        :param pulumi.Input[bool] sync_users: Sync users from Kerberos into authentik Defaults to `true`.
        :param pulumi.Input[bool] sync_users_password: When a user changes their password, sync it back to Kerberos Defaults to `true`.
        :param pulumi.Input[str] user_matching_mode: Allowed values: - `identifier` - `email_link` - `email_deny` - `username_link` - `username_deny` Defaults to
               `identifier`.
        :param pulumi.Input[str] user_path_template: Defaults to `goauthentik.io/sources/%(slug)s`.
        :param pulumi.Input[str] uuid: Generated.
        """
        if authentication_flow is not None:
            pulumi.set(__self__, "authentication_flow", authentication_flow)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if enrollment_flow is not None:
            pulumi.set(__self__, "enrollment_flow", enrollment_flow)
        if group_matching_mode is not None:
            pulumi.set(__self__, "group_matching_mode", group_matching_mode)
        if krb5_conf is not None:
            pulumi.set(__self__, "krb5_conf", krb5_conf)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if password_login_update_internal_password is not None:
            pulumi.set(__self__, "password_login_update_internal_password", password_login_update_internal_password)
        if policy_engine_mode is not None:
            pulumi.set(__self__, "policy_engine_mode", policy_engine_mode)
        if realm is not None:
            pulumi.set(__self__, "realm", realm)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)
        if source_kerberos_id is not None:
            pulumi.set(__self__, "source_kerberos_id", source_kerberos_id)
        if spnego_ccache is not None:
            pulumi.set(__self__, "spnego_ccache", spnego_ccache)
        if spnego_keytab is not None:
            pulumi.set(__self__, "spnego_keytab", spnego_keytab)
        if spnego_server_name is not None:
            pulumi.set(__self__, "spnego_server_name", spnego_server_name)
        if sync_ccache is not None:
            pulumi.set(__self__, "sync_ccache", sync_ccache)
        if sync_keytab is not None:
            pulumi.set(__self__, "sync_keytab", sync_keytab)
        if sync_password is not None:
            pulumi.set(__self__, "sync_password", sync_password)
        if sync_principal is not None:
            pulumi.set(__self__, "sync_principal", sync_principal)
        if sync_users is not None:
            pulumi.set(__self__, "sync_users", sync_users)
        if sync_users_password is not None:
            pulumi.set(__self__, "sync_users_password", sync_users_password)
        if user_matching_mode is not None:
            pulumi.set(__self__, "user_matching_mode", user_matching_mode)
        if user_path_template is not None:
            pulumi.set(__self__, "user_path_template", user_path_template)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="authenticationFlow")
    def authentication_flow(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "authentication_flow")

    @authentication_flow.setter
    def authentication_flow(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authentication_flow", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Defaults to `true`.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="enrollmentFlow")
    def enrollment_flow(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "enrollment_flow")

    @enrollment_flow.setter
    def enrollment_flow(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enrollment_flow", value)

    @property
    @pulumi.getter(name="groupMatchingMode")
    def group_matching_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Allowed values: - `identifier` - `name_link` - `name_deny` Defaults to `identifier`.
        """
        return pulumi.get(self, "group_matching_mode")

    @group_matching_mode.setter
    def group_matching_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_matching_mode", value)

    @property
    @pulumi.getter(name="krb5Conf")
    def krb5_conf(self) -> Optional[pulumi.Input[str]]:
        """
        Custom krb5.conf to use. Uses the system one by default
        """
        return pulumi.get(self, "krb5_conf")

    @krb5_conf.setter
    def krb5_conf(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "krb5_conf", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="passwordLoginUpdateInternalPassword")
    def password_login_update_internal_password(self) -> Optional[pulumi.Input[bool]]:
        """
        If enabled, the authentik-stored password will be updated upon login with the Kerberos password backend Defaults to
        `false`.
        """
        return pulumi.get(self, "password_login_update_internal_password")

    @password_login_update_internal_password.setter
    def password_login_update_internal_password(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "password_login_update_internal_password", value)

    @property
    @pulumi.getter(name="policyEngineMode")
    def policy_engine_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Allowed values: - `all` - `any` Defaults to `any`.
        """
        return pulumi.get(self, "policy_engine_mode")

    @policy_engine_mode.setter
    def policy_engine_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_engine_mode", value)

    @property
    @pulumi.getter
    def realm(self) -> Optional[pulumi.Input[str]]:
        """
        Kerberos realm
        """
        return pulumi.get(self, "realm")

    @realm.setter
    def realm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "realm", value)

    @property
    @pulumi.getter
    def slug(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "slug")

    @slug.setter
    def slug(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slug", value)

    @property
    @pulumi.getter(name="sourceKerberosId")
    def source_kerberos_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_kerberos_id")

    @source_kerberos_id.setter
    def source_kerberos_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_kerberos_id", value)

    @property
    @pulumi.getter(name="spnegoCcache")
    def spnego_ccache(self) -> Optional[pulumi.Input[str]]:
        """
        Credential cache to use for SPNEGO in form type:residual
        """
        return pulumi.get(self, "spnego_ccache")

    @spnego_ccache.setter
    def spnego_ccache(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spnego_ccache", value)

    @property
    @pulumi.getter(name="spnegoKeytab")
    def spnego_keytab(self) -> Optional[pulumi.Input[str]]:
        """
        SPNEGO keytab base64-encoded or path to keytab in the form FILE:path
        """
        return pulumi.get(self, "spnego_keytab")

    @spnego_keytab.setter
    def spnego_keytab(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spnego_keytab", value)

    @property
    @pulumi.getter(name="spnegoServerName")
    def spnego_server_name(self) -> Optional[pulumi.Input[str]]:
        """
        Force the use of a specific server name for SPNEGO
        """
        return pulumi.get(self, "spnego_server_name")

    @spnego_server_name.setter
    def spnego_server_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spnego_server_name", value)

    @property
    @pulumi.getter(name="syncCcache")
    def sync_ccache(self) -> Optional[pulumi.Input[str]]:
        """
        Credentials cache to authenticate to kadmin for sync. Must be in the form TYPE:residual
        """
        return pulumi.get(self, "sync_ccache")

    @sync_ccache.setter
    def sync_ccache(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sync_ccache", value)

    @property
    @pulumi.getter(name="syncKeytab")
    def sync_keytab(self) -> Optional[pulumi.Input[str]]:
        """
        Keytab to authenticate to kadmin for sync. Must be base64-encoded or in the form TYPE:residual
        """
        return pulumi.get(self, "sync_keytab")

    @sync_keytab.setter
    def sync_keytab(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sync_keytab", value)

    @property
    @pulumi.getter(name="syncPassword")
    def sync_password(self) -> Optional[pulumi.Input[str]]:
        """
        Password to authenticate to kadmin for sync
        """
        return pulumi.get(self, "sync_password")

    @sync_password.setter
    def sync_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sync_password", value)

    @property
    @pulumi.getter(name="syncPrincipal")
    def sync_principal(self) -> Optional[pulumi.Input[str]]:
        """
        Principal to authenticate to kadmin for sync.
        """
        return pulumi.get(self, "sync_principal")

    @sync_principal.setter
    def sync_principal(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sync_principal", value)

    @property
    @pulumi.getter(name="syncUsers")
    def sync_users(self) -> Optional[pulumi.Input[bool]]:
        """
        Sync users from Kerberos into authentik Defaults to `true`.
        """
        return pulumi.get(self, "sync_users")

    @sync_users.setter
    def sync_users(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "sync_users", value)

    @property
    @pulumi.getter(name="syncUsersPassword")
    def sync_users_password(self) -> Optional[pulumi.Input[bool]]:
        """
        When a user changes their password, sync it back to Kerberos Defaults to `true`.
        """
        return pulumi.get(self, "sync_users_password")

    @sync_users_password.setter
    def sync_users_password(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "sync_users_password", value)

    @property
    @pulumi.getter(name="userMatchingMode")
    def user_matching_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Allowed values: - `identifier` - `email_link` - `email_deny` - `username_link` - `username_deny` Defaults to
        `identifier`.
        """
        return pulumi.get(self, "user_matching_mode")

    @user_matching_mode.setter
    def user_matching_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_matching_mode", value)

    @property
    @pulumi.getter(name="userPathTemplate")
    def user_path_template(self) -> Optional[pulumi.Input[str]]:
        """
        Defaults to `goauthentik.io/sources/%(slug)s`.
        """
        return pulumi.get(self, "user_path_template")

    @user_path_template.setter
    def user_path_template(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_path_template", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        """
        Generated.
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)


class SourceKerberos(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 authentication_flow: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 enrollment_flow: Optional[pulumi.Input[str]] = None,
                 group_matching_mode: Optional[pulumi.Input[str]] = None,
                 krb5_conf: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 password_login_update_internal_password: Optional[pulumi.Input[bool]] = None,
                 policy_engine_mode: Optional[pulumi.Input[str]] = None,
                 realm: Optional[pulumi.Input[str]] = None,
                 slug: Optional[pulumi.Input[str]] = None,
                 source_kerberos_id: Optional[pulumi.Input[str]] = None,
                 spnego_ccache: Optional[pulumi.Input[str]] = None,
                 spnego_keytab: Optional[pulumi.Input[str]] = None,
                 spnego_server_name: Optional[pulumi.Input[str]] = None,
                 sync_ccache: Optional[pulumi.Input[str]] = None,
                 sync_keytab: Optional[pulumi.Input[str]] = None,
                 sync_password: Optional[pulumi.Input[str]] = None,
                 sync_principal: Optional[pulumi.Input[str]] = None,
                 sync_users: Optional[pulumi.Input[bool]] = None,
                 sync_users_password: Optional[pulumi.Input[bool]] = None,
                 user_matching_mode: Optional[pulumi.Input[str]] = None,
                 user_path_template: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a SourceKerberos resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] enabled: Defaults to `true`.
        :param pulumi.Input[str] group_matching_mode: Allowed values: - `identifier` - `name_link` - `name_deny` Defaults to `identifier`.
        :param pulumi.Input[str] krb5_conf: Custom krb5.conf to use. Uses the system one by default
        :param pulumi.Input[bool] password_login_update_internal_password: If enabled, the authentik-stored password will be updated upon login with the Kerberos password backend Defaults to
               `false`.
        :param pulumi.Input[str] policy_engine_mode: Allowed values: - `all` - `any` Defaults to `any`.
        :param pulumi.Input[str] realm: Kerberos realm
        :param pulumi.Input[str] spnego_ccache: Credential cache to use for SPNEGO in form type:residual
        :param pulumi.Input[str] spnego_keytab: SPNEGO keytab base64-encoded or path to keytab in the form FILE:path
        :param pulumi.Input[str] spnego_server_name: Force the use of a specific server name for SPNEGO
        :param pulumi.Input[str] sync_ccache: Credentials cache to authenticate to kadmin for sync. Must be in the form TYPE:residual
        :param pulumi.Input[str] sync_keytab: Keytab to authenticate to kadmin for sync. Must be base64-encoded or in the form TYPE:residual
        :param pulumi.Input[str] sync_password: Password to authenticate to kadmin for sync
        :param pulumi.Input[str] sync_principal: Principal to authenticate to kadmin for sync.
        :param pulumi.Input[bool] sync_users: Sync users from Kerberos into authentik Defaults to `true`.
        :param pulumi.Input[bool] sync_users_password: When a user changes their password, sync it back to Kerberos Defaults to `true`.
        :param pulumi.Input[str] user_matching_mode: Allowed values: - `identifier` - `email_link` - `email_deny` - `username_link` - `username_deny` Defaults to
               `identifier`.
        :param pulumi.Input[str] user_path_template: Defaults to `goauthentik.io/sources/%(slug)s`.
        :param pulumi.Input[str] uuid: Generated.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SourceKerberosArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a SourceKerberos resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param SourceKerberosArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SourceKerberosArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 authentication_flow: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 enrollment_flow: Optional[pulumi.Input[str]] = None,
                 group_matching_mode: Optional[pulumi.Input[str]] = None,
                 krb5_conf: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 password_login_update_internal_password: Optional[pulumi.Input[bool]] = None,
                 policy_engine_mode: Optional[pulumi.Input[str]] = None,
                 realm: Optional[pulumi.Input[str]] = None,
                 slug: Optional[pulumi.Input[str]] = None,
                 source_kerberos_id: Optional[pulumi.Input[str]] = None,
                 spnego_ccache: Optional[pulumi.Input[str]] = None,
                 spnego_keytab: Optional[pulumi.Input[str]] = None,
                 spnego_server_name: Optional[pulumi.Input[str]] = None,
                 sync_ccache: Optional[pulumi.Input[str]] = None,
                 sync_keytab: Optional[pulumi.Input[str]] = None,
                 sync_password: Optional[pulumi.Input[str]] = None,
                 sync_principal: Optional[pulumi.Input[str]] = None,
                 sync_users: Optional[pulumi.Input[bool]] = None,
                 sync_users_password: Optional[pulumi.Input[bool]] = None,
                 user_matching_mode: Optional[pulumi.Input[str]] = None,
                 user_path_template: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SourceKerberosArgs.__new__(SourceKerberosArgs)

            __props__.__dict__["authentication_flow"] = authentication_flow
            __props__.__dict__["enabled"] = enabled
            __props__.__dict__["enrollment_flow"] = enrollment_flow
            __props__.__dict__["group_matching_mode"] = group_matching_mode
            __props__.__dict__["krb5_conf"] = krb5_conf
            __props__.__dict__["name"] = name
            __props__.__dict__["password_login_update_internal_password"] = password_login_update_internal_password
            __props__.__dict__["policy_engine_mode"] = policy_engine_mode
            if realm is None and not opts.urn:
                raise TypeError("Missing required property 'realm'")
            __props__.__dict__["realm"] = realm
            if slug is None and not opts.urn:
                raise TypeError("Missing required property 'slug'")
            __props__.__dict__["slug"] = slug
            __props__.__dict__["source_kerberos_id"] = source_kerberos_id
            __props__.__dict__["spnego_ccache"] = spnego_ccache
            __props__.__dict__["spnego_keytab"] = None if spnego_keytab is None else pulumi.Output.secret(spnego_keytab)
            __props__.__dict__["spnego_server_name"] = spnego_server_name
            __props__.__dict__["sync_ccache"] = sync_ccache
            __props__.__dict__["sync_keytab"] = None if sync_keytab is None else pulumi.Output.secret(sync_keytab)
            __props__.__dict__["sync_password"] = None if sync_password is None else pulumi.Output.secret(sync_password)
            __props__.__dict__["sync_principal"] = sync_principal
            __props__.__dict__["sync_users"] = sync_users
            __props__.__dict__["sync_users_password"] = sync_users_password
            __props__.__dict__["user_matching_mode"] = user_matching_mode
            __props__.__dict__["user_path_template"] = user_path_template
            __props__.__dict__["uuid"] = uuid
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["spnegoKeytab", "syncKeytab", "syncPassword"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(SourceKerberos, __self__).__init__(
            'authentik:index/sourceKerberos:SourceKerberos',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            authentication_flow: Optional[pulumi.Input[str]] = None,
            enabled: Optional[pulumi.Input[bool]] = None,
            enrollment_flow: Optional[pulumi.Input[str]] = None,
            group_matching_mode: Optional[pulumi.Input[str]] = None,
            krb5_conf: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            password_login_update_internal_password: Optional[pulumi.Input[bool]] = None,
            policy_engine_mode: Optional[pulumi.Input[str]] = None,
            realm: Optional[pulumi.Input[str]] = None,
            slug: Optional[pulumi.Input[str]] = None,
            source_kerberos_id: Optional[pulumi.Input[str]] = None,
            spnego_ccache: Optional[pulumi.Input[str]] = None,
            spnego_keytab: Optional[pulumi.Input[str]] = None,
            spnego_server_name: Optional[pulumi.Input[str]] = None,
            sync_ccache: Optional[pulumi.Input[str]] = None,
            sync_keytab: Optional[pulumi.Input[str]] = None,
            sync_password: Optional[pulumi.Input[str]] = None,
            sync_principal: Optional[pulumi.Input[str]] = None,
            sync_users: Optional[pulumi.Input[bool]] = None,
            sync_users_password: Optional[pulumi.Input[bool]] = None,
            user_matching_mode: Optional[pulumi.Input[str]] = None,
            user_path_template: Optional[pulumi.Input[str]] = None,
            uuid: Optional[pulumi.Input[str]] = None) -> 'SourceKerberos':
        """
        Get an existing SourceKerberos resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] enabled: Defaults to `true`.
        :param pulumi.Input[str] group_matching_mode: Allowed values: - `identifier` - `name_link` - `name_deny` Defaults to `identifier`.
        :param pulumi.Input[str] krb5_conf: Custom krb5.conf to use. Uses the system one by default
        :param pulumi.Input[bool] password_login_update_internal_password: If enabled, the authentik-stored password will be updated upon login with the Kerberos password backend Defaults to
               `false`.
        :param pulumi.Input[str] policy_engine_mode: Allowed values: - `all` - `any` Defaults to `any`.
        :param pulumi.Input[str] realm: Kerberos realm
        :param pulumi.Input[str] spnego_ccache: Credential cache to use for SPNEGO in form type:residual
        :param pulumi.Input[str] spnego_keytab: SPNEGO keytab base64-encoded or path to keytab in the form FILE:path
        :param pulumi.Input[str] spnego_server_name: Force the use of a specific server name for SPNEGO
        :param pulumi.Input[str] sync_ccache: Credentials cache to authenticate to kadmin for sync. Must be in the form TYPE:residual
        :param pulumi.Input[str] sync_keytab: Keytab to authenticate to kadmin for sync. Must be base64-encoded or in the form TYPE:residual
        :param pulumi.Input[str] sync_password: Password to authenticate to kadmin for sync
        :param pulumi.Input[str] sync_principal: Principal to authenticate to kadmin for sync.
        :param pulumi.Input[bool] sync_users: Sync users from Kerberos into authentik Defaults to `true`.
        :param pulumi.Input[bool] sync_users_password: When a user changes their password, sync it back to Kerberos Defaults to `true`.
        :param pulumi.Input[str] user_matching_mode: Allowed values: - `identifier` - `email_link` - `email_deny` - `username_link` - `username_deny` Defaults to
               `identifier`.
        :param pulumi.Input[str] user_path_template: Defaults to `goauthentik.io/sources/%(slug)s`.
        :param pulumi.Input[str] uuid: Generated.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SourceKerberosState.__new__(_SourceKerberosState)

        __props__.__dict__["authentication_flow"] = authentication_flow
        __props__.__dict__["enabled"] = enabled
        __props__.__dict__["enrollment_flow"] = enrollment_flow
        __props__.__dict__["group_matching_mode"] = group_matching_mode
        __props__.__dict__["krb5_conf"] = krb5_conf
        __props__.__dict__["name"] = name
        __props__.__dict__["password_login_update_internal_password"] = password_login_update_internal_password
        __props__.__dict__["policy_engine_mode"] = policy_engine_mode
        __props__.__dict__["realm"] = realm
        __props__.__dict__["slug"] = slug
        __props__.__dict__["source_kerberos_id"] = source_kerberos_id
        __props__.__dict__["spnego_ccache"] = spnego_ccache
        __props__.__dict__["spnego_keytab"] = spnego_keytab
        __props__.__dict__["spnego_server_name"] = spnego_server_name
        __props__.__dict__["sync_ccache"] = sync_ccache
        __props__.__dict__["sync_keytab"] = sync_keytab
        __props__.__dict__["sync_password"] = sync_password
        __props__.__dict__["sync_principal"] = sync_principal
        __props__.__dict__["sync_users"] = sync_users
        __props__.__dict__["sync_users_password"] = sync_users_password
        __props__.__dict__["user_matching_mode"] = user_matching_mode
        __props__.__dict__["user_path_template"] = user_path_template
        __props__.__dict__["uuid"] = uuid
        return SourceKerberos(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="authenticationFlow")
    def authentication_flow(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "authentication_flow")

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        Defaults to `true`.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="enrollmentFlow")
    def enrollment_flow(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "enrollment_flow")

    @property
    @pulumi.getter(name="groupMatchingMode")
    def group_matching_mode(self) -> pulumi.Output[Optional[str]]:
        """
        Allowed values: - `identifier` - `name_link` - `name_deny` Defaults to `identifier`.
        """
        return pulumi.get(self, "group_matching_mode")

    @property
    @pulumi.getter(name="krb5Conf")
    def krb5_conf(self) -> pulumi.Output[Optional[str]]:
        """
        Custom krb5.conf to use. Uses the system one by default
        """
        return pulumi.get(self, "krb5_conf")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="passwordLoginUpdateInternalPassword")
    def password_login_update_internal_password(self) -> pulumi.Output[Optional[bool]]:
        """
        If enabled, the authentik-stored password will be updated upon login with the Kerberos password backend Defaults to
        `false`.
        """
        return pulumi.get(self, "password_login_update_internal_password")

    @property
    @pulumi.getter(name="policyEngineMode")
    def policy_engine_mode(self) -> pulumi.Output[Optional[str]]:
        """
        Allowed values: - `all` - `any` Defaults to `any`.
        """
        return pulumi.get(self, "policy_engine_mode")

    @property
    @pulumi.getter
    def realm(self) -> pulumi.Output[str]:
        """
        Kerberos realm
        """
        return pulumi.get(self, "realm")

    @property
    @pulumi.getter
    def slug(self) -> pulumi.Output[str]:
        return pulumi.get(self, "slug")

    @property
    @pulumi.getter(name="sourceKerberosId")
    def source_kerberos_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "source_kerberos_id")

    @property
    @pulumi.getter(name="spnegoCcache")
    def spnego_ccache(self) -> pulumi.Output[Optional[str]]:
        """
        Credential cache to use for SPNEGO in form type:residual
        """
        return pulumi.get(self, "spnego_ccache")

    @property
    @pulumi.getter(name="spnegoKeytab")
    def spnego_keytab(self) -> pulumi.Output[Optional[str]]:
        """
        SPNEGO keytab base64-encoded or path to keytab in the form FILE:path
        """
        return pulumi.get(self, "spnego_keytab")

    @property
    @pulumi.getter(name="spnegoServerName")
    def spnego_server_name(self) -> pulumi.Output[Optional[str]]:
        """
        Force the use of a specific server name for SPNEGO
        """
        return pulumi.get(self, "spnego_server_name")

    @property
    @pulumi.getter(name="syncCcache")
    def sync_ccache(self) -> pulumi.Output[Optional[str]]:
        """
        Credentials cache to authenticate to kadmin for sync. Must be in the form TYPE:residual
        """
        return pulumi.get(self, "sync_ccache")

    @property
    @pulumi.getter(name="syncKeytab")
    def sync_keytab(self) -> pulumi.Output[Optional[str]]:
        """
        Keytab to authenticate to kadmin for sync. Must be base64-encoded or in the form TYPE:residual
        """
        return pulumi.get(self, "sync_keytab")

    @property
    @pulumi.getter(name="syncPassword")
    def sync_password(self) -> pulumi.Output[Optional[str]]:
        """
        Password to authenticate to kadmin for sync
        """
        return pulumi.get(self, "sync_password")

    @property
    @pulumi.getter(name="syncPrincipal")
    def sync_principal(self) -> pulumi.Output[Optional[str]]:
        """
        Principal to authenticate to kadmin for sync.
        """
        return pulumi.get(self, "sync_principal")

    @property
    @pulumi.getter(name="syncUsers")
    def sync_users(self) -> pulumi.Output[Optional[bool]]:
        """
        Sync users from Kerberos into authentik Defaults to `true`.
        """
        return pulumi.get(self, "sync_users")

    @property
    @pulumi.getter(name="syncUsersPassword")
    def sync_users_password(self) -> pulumi.Output[Optional[bool]]:
        """
        When a user changes their password, sync it back to Kerberos Defaults to `true`.
        """
        return pulumi.get(self, "sync_users_password")

    @property
    @pulumi.getter(name="userMatchingMode")
    def user_matching_mode(self) -> pulumi.Output[Optional[str]]:
        """
        Allowed values: - `identifier` - `email_link` - `email_deny` - `username_link` - `username_deny` Defaults to
        `identifier`.
        """
        return pulumi.get(self, "user_matching_mode")

    @property
    @pulumi.getter(name="userPathTemplate")
    def user_path_template(self) -> pulumi.Output[Optional[str]]:
        """
        Defaults to `goauthentik.io/sources/%(slug)s`.
        """
        return pulumi.get(self, "user_path_template")

    @property
    @pulumi.getter
    def uuid(self) -> pulumi.Output[str]:
        """
        Generated.
        """
        return pulumi.get(self, "uuid")

