# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetCertificateKeyPairResult',
    'AwaitableGetCertificateKeyPairResult',
    'get_certificate_key_pair',
    'get_certificate_key_pair_output',
]

@pulumi.output_type
class GetCertificateKeyPairResult:
    """
    A collection of values returned by getCertificateKeyPair.
    """
    def __init__(__self__, certificate_data=None, expiry=None, fetch_certificate=None, fetch_key=None, fingerprint1=None, fingerprint256=None, id=None, key_data=None, name=None, subject=None):
        if certificate_data and not isinstance(certificate_data, str):
            raise TypeError("Expected argument 'certificate_data' to be a str")
        pulumi.set(__self__, "certificate_data", certificate_data)
        if expiry and not isinstance(expiry, str):
            raise TypeError("Expected argument 'expiry' to be a str")
        pulumi.set(__self__, "expiry", expiry)
        if fetch_certificate and not isinstance(fetch_certificate, bool):
            raise TypeError("Expected argument 'fetch_certificate' to be a bool")
        pulumi.set(__self__, "fetch_certificate", fetch_certificate)
        if fetch_key and not isinstance(fetch_key, bool):
            raise TypeError("Expected argument 'fetch_key' to be a bool")
        pulumi.set(__self__, "fetch_key", fetch_key)
        if fingerprint1 and not isinstance(fingerprint1, str):
            raise TypeError("Expected argument 'fingerprint1' to be a str")
        pulumi.set(__self__, "fingerprint1", fingerprint1)
        if fingerprint256 and not isinstance(fingerprint256, str):
            raise TypeError("Expected argument 'fingerprint256' to be a str")
        pulumi.set(__self__, "fingerprint256", fingerprint256)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if key_data and not isinstance(key_data, str):
            raise TypeError("Expected argument 'key_data' to be a str")
        pulumi.set(__self__, "key_data", key_data)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if subject and not isinstance(subject, str):
            raise TypeError("Expected argument 'subject' to be a str")
        pulumi.set(__self__, "subject", subject)

    @property
    @pulumi.getter(name="certificateData")
    def certificate_data(self) -> str:
        return pulumi.get(self, "certificate_data")

    @property
    @pulumi.getter
    def expiry(self) -> str:
        return pulumi.get(self, "expiry")

    @property
    @pulumi.getter(name="fetchCertificate")
    def fetch_certificate(self) -> Optional[bool]:
        return pulumi.get(self, "fetch_certificate")

    @property
    @pulumi.getter(name="fetchKey")
    def fetch_key(self) -> Optional[bool]:
        return pulumi.get(self, "fetch_key")

    @property
    @pulumi.getter
    def fingerprint1(self) -> str:
        return pulumi.get(self, "fingerprint1")

    @property
    @pulumi.getter
    def fingerprint256(self) -> str:
        return pulumi.get(self, "fingerprint256")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="keyData")
    def key_data(self) -> str:
        return pulumi.get(self, "key_data")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def subject(self) -> str:
        return pulumi.get(self, "subject")


class AwaitableGetCertificateKeyPairResult(GetCertificateKeyPairResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCertificateKeyPairResult(
            certificate_data=self.certificate_data,
            expiry=self.expiry,
            fetch_certificate=self.fetch_certificate,
            fetch_key=self.fetch_key,
            fingerprint1=self.fingerprint1,
            fingerprint256=self.fingerprint256,
            id=self.id,
            key_data=self.key_data,
            name=self.name,
            subject=self.subject)


def get_certificate_key_pair(fetch_certificate: Optional[bool] = None,
                             fetch_key: Optional[bool] = None,
                             key_data: Optional[str] = None,
                             name: Optional[str] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCertificateKeyPairResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['fetchCertificate'] = fetch_certificate
    __args__['fetchKey'] = fetch_key
    __args__['keyData'] = key_data
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('authentik:index/getCertificateKeyPair:getCertificateKeyPair', __args__, opts=opts, typ=GetCertificateKeyPairResult, package_ref=_utilities.get_package()).value

    return AwaitableGetCertificateKeyPairResult(
        certificate_data=pulumi.get(__ret__, 'certificate_data'),
        expiry=pulumi.get(__ret__, 'expiry'),
        fetch_certificate=pulumi.get(__ret__, 'fetch_certificate'),
        fetch_key=pulumi.get(__ret__, 'fetch_key'),
        fingerprint1=pulumi.get(__ret__, 'fingerprint1'),
        fingerprint256=pulumi.get(__ret__, 'fingerprint256'),
        id=pulumi.get(__ret__, 'id'),
        key_data=pulumi.get(__ret__, 'key_data'),
        name=pulumi.get(__ret__, 'name'),
        subject=pulumi.get(__ret__, 'subject'))
def get_certificate_key_pair_output(fetch_certificate: Optional[pulumi.Input[Optional[bool]]] = None,
                                    fetch_key: Optional[pulumi.Input[Optional[bool]]] = None,
                                    key_data: Optional[pulumi.Input[Optional[str]]] = None,
                                    name: Optional[pulumi.Input[str]] = None,
                                    opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetCertificateKeyPairResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['fetchCertificate'] = fetch_certificate
    __args__['fetchKey'] = fetch_key
    __args__['keyData'] = key_data
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('authentik:index/getCertificateKeyPair:getCertificateKeyPair', __args__, opts=opts, typ=GetCertificateKeyPairResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetCertificateKeyPairResult(
        certificate_data=pulumi.get(__response__, 'certificate_data'),
        expiry=pulumi.get(__response__, 'expiry'),
        fetch_certificate=pulumi.get(__response__, 'fetch_certificate'),
        fetch_key=pulumi.get(__response__, 'fetch_key'),
        fingerprint1=pulumi.get(__response__, 'fingerprint1'),
        fingerprint256=pulumi.get(__response__, 'fingerprint256'),
        id=pulumi.get(__response__, 'id'),
        key_data=pulumi.get(__response__, 'key_data'),
        name=pulumi.get(__response__, 'name'),
        subject=pulumi.get(__response__, 'subject')))
