# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetWebauthnDeviceTypeResult',
    'AwaitableGetWebauthnDeviceTypeResult',
    'get_webauthn_device_type',
    'get_webauthn_device_type_output',
]

@pulumi.output_type
class GetWebauthnDeviceTypeResult:
    """
    A collection of values returned by getWebauthnDeviceType.
    """
    def __init__(__self__, aaguid=None, description=None, id=None):
        if aaguid and not isinstance(aaguid, str):
            raise TypeError("Expected argument 'aaguid' to be a str")
        pulumi.set(__self__, "aaguid", aaguid)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def aaguid(self) -> str:
        return pulumi.get(self, "aaguid")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")


class AwaitableGetWebauthnDeviceTypeResult(GetWebauthnDeviceTypeResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetWebauthnDeviceTypeResult(
            aaguid=self.aaguid,
            description=self.description,
            id=self.id)


def get_webauthn_device_type(description: Optional[str] = None,
                             id: Optional[str] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetWebauthnDeviceTypeResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['description'] = description
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('authentik:index/getWebauthnDeviceType:getWebauthnDeviceType', __args__, opts=opts, typ=GetWebauthnDeviceTypeResult, package_ref=_utilities.get_package()).value

    return AwaitableGetWebauthnDeviceTypeResult(
        aaguid=pulumi.get(__ret__, 'aaguid'),
        description=pulumi.get(__ret__, 'description'),
        id=pulumi.get(__ret__, 'id'))
def get_webauthn_device_type_output(description: Optional[pulumi.Input[Optional[str]]] = None,
                                    id: Optional[pulumi.Input[Optional[str]]] = None,
                                    opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetWebauthnDeviceTypeResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['description'] = description
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('authentik:index/getWebauthnDeviceType:getWebauthnDeviceType', __args__, opts=opts, typ=GetWebauthnDeviceTypeResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetWebauthnDeviceTypeResult(
        aaguid=pulumi.get(__response__, 'aaguid'),
        description=pulumi.get(__response__, 'description'),
        id=pulumi.get(__response__, 'id')))
