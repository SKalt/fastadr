# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['EnterpriseLicenseArgs', 'EnterpriseLicense']

@pulumi.input_type
class EnterpriseLicenseArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 enterprise_license_id: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a EnterpriseLicense resource.
        """
        pulumi.set(__self__, "key", key)
        if enterprise_license_id is not None:
            pulumi.set(__self__, "enterprise_license_id", enterprise_license_id)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="enterpriseLicenseId")
    def enterprise_license_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "enterprise_license_id")

    @enterprise_license_id.setter
    def enterprise_license_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enterprise_license_id", value)


@pulumi.input_type
class _EnterpriseLicenseState:
    def __init__(__self__, *,
                 enterprise_license_id: Optional[pulumi.Input[str]] = None,
                 expiry: Optional[pulumi.Input[float]] = None,
                 external_users: Optional[pulumi.Input[float]] = None,
                 internal_users: Optional[pulumi.Input[float]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering EnterpriseLicense resources.
        :param pulumi.Input[float] expiry: Generated.
        :param pulumi.Input[float] external_users: Generated.
        :param pulumi.Input[float] internal_users: Generated.
        :param pulumi.Input[str] name: Generated.
        """
        if enterprise_license_id is not None:
            pulumi.set(__self__, "enterprise_license_id", enterprise_license_id)
        if expiry is not None:
            pulumi.set(__self__, "expiry", expiry)
        if external_users is not None:
            pulumi.set(__self__, "external_users", external_users)
        if internal_users is not None:
            pulumi.set(__self__, "internal_users", internal_users)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="enterpriseLicenseId")
    def enterprise_license_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "enterprise_license_id")

    @enterprise_license_id.setter
    def enterprise_license_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enterprise_license_id", value)

    @property
    @pulumi.getter
    def expiry(self) -> Optional[pulumi.Input[float]]:
        """
        Generated.
        """
        return pulumi.get(self, "expiry")

    @expiry.setter
    def expiry(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "expiry", value)

    @property
    @pulumi.getter(name="externalUsers")
    def external_users(self) -> Optional[pulumi.Input[float]]:
        """
        Generated.
        """
        return pulumi.get(self, "external_users")

    @external_users.setter
    def external_users(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "external_users", value)

    @property
    @pulumi.getter(name="internalUsers")
    def internal_users(self) -> Optional[pulumi.Input[float]]:
        """
        Generated.
        """
        return pulumi.get(self, "internal_users")

    @internal_users.setter
    def internal_users(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "internal_users", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Generated.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


class EnterpriseLicense(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enterprise_license_id: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a EnterpriseLicense resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: EnterpriseLicenseArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a EnterpriseLicense resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param EnterpriseLicenseArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(EnterpriseLicenseArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enterprise_license_id: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = EnterpriseLicenseArgs.__new__(EnterpriseLicenseArgs)

            __props__.__dict__["enterprise_license_id"] = enterprise_license_id
            if key is None and not opts.urn:
                raise TypeError("Missing required property 'key'")
            __props__.__dict__["key"] = None if key is None else pulumi.Output.secret(key)
            __props__.__dict__["expiry"] = None
            __props__.__dict__["external_users"] = None
            __props__.__dict__["internal_users"] = None
            __props__.__dict__["name"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["key"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(EnterpriseLicense, __self__).__init__(
            'authentik:index/enterpriseLicense:EnterpriseLicense',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            enterprise_license_id: Optional[pulumi.Input[str]] = None,
            expiry: Optional[pulumi.Input[float]] = None,
            external_users: Optional[pulumi.Input[float]] = None,
            internal_users: Optional[pulumi.Input[float]] = None,
            key: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None) -> 'EnterpriseLicense':
        """
        Get an existing EnterpriseLicense resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[float] expiry: Generated.
        :param pulumi.Input[float] external_users: Generated.
        :param pulumi.Input[float] internal_users: Generated.
        :param pulumi.Input[str] name: Generated.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _EnterpriseLicenseState.__new__(_EnterpriseLicenseState)

        __props__.__dict__["enterprise_license_id"] = enterprise_license_id
        __props__.__dict__["expiry"] = expiry
        __props__.__dict__["external_users"] = external_users
        __props__.__dict__["internal_users"] = internal_users
        __props__.__dict__["key"] = key
        __props__.__dict__["name"] = name
        return EnterpriseLicense(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="enterpriseLicenseId")
    def enterprise_license_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "enterprise_license_id")

    @property
    @pulumi.getter
    def expiry(self) -> pulumi.Output[float]:
        """
        Generated.
        """
        return pulumi.get(self, "expiry")

    @property
    @pulumi.getter(name="externalUsers")
    def external_users(self) -> pulumi.Output[float]:
        """
        Generated.
        """
        return pulumi.get(self, "external_users")

    @property
    @pulumi.getter(name="internalUsers")
    def internal_users(self) -> pulumi.Output[float]:
        """
        Generated.
        """
        return pulumi.get(self, "internal_users")

    @property
    @pulumi.getter
    def key(self) -> pulumi.Output[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Generated.
        """
        return pulumi.get(self, "name")

