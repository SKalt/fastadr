# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['FlowArgs', 'Flow']

@pulumi.input_type
class FlowArgs:
    def __init__(__self__, *,
                 designation: pulumi.Input[str],
                 slug: pulumi.Input[str],
                 title: pulumi.Input[str],
                 authentication: Optional[pulumi.Input[str]] = None,
                 background: Optional[pulumi.Input[str]] = None,
                 compatibility_mode: Optional[pulumi.Input[bool]] = None,
                 denied_action: Optional[pulumi.Input[str]] = None,
                 flow_id: Optional[pulumi.Input[str]] = None,
                 layout: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 policy_engine_mode: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Flow resource.
        :param pulumi.Input[str] designation: Allowed values: - `authentication` - `authorization` - `invalidation` - `enrollment` - `unenrollment` - `recovery` -
               `stage_configuration`
        :param pulumi.Input[str] authentication: Allowed values: - `none` - `require_authenticated` - `require_unauthenticated` - `require_superuser` - `require_outpost`
               Defaults to `none`.
        :param pulumi.Input[str] background: Optional URL to an image which will be used as the background during the flow.
        :param pulumi.Input[bool] compatibility_mode: Defaults to `true`.
        :param pulumi.Input[str] denied_action: Defaults to `message_continue`.
        :param pulumi.Input[str] layout: Allowed values: - `stacked` - `content_left` - `content_right` - `sidebar_left` - `sidebar_right` Defaults to `stacked`.
        :param pulumi.Input[str] policy_engine_mode: Allowed values: - `all` - `any` Defaults to `any`.
        """
        pulumi.set(__self__, "designation", designation)
        pulumi.set(__self__, "slug", slug)
        pulumi.set(__self__, "title", title)
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if background is not None:
            pulumi.set(__self__, "background", background)
        if compatibility_mode is not None:
            pulumi.set(__self__, "compatibility_mode", compatibility_mode)
        if denied_action is not None:
            pulumi.set(__self__, "denied_action", denied_action)
        if flow_id is not None:
            pulumi.set(__self__, "flow_id", flow_id)
        if layout is not None:
            pulumi.set(__self__, "layout", layout)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if policy_engine_mode is not None:
            pulumi.set(__self__, "policy_engine_mode", policy_engine_mode)

    @property
    @pulumi.getter
    def designation(self) -> pulumi.Input[str]:
        """
        Allowed values: - `authentication` - `authorization` - `invalidation` - `enrollment` - `unenrollment` - `recovery` -
        `stage_configuration`
        """
        return pulumi.get(self, "designation")

    @designation.setter
    def designation(self, value: pulumi.Input[str]):
        pulumi.set(self, "designation", value)

    @property
    @pulumi.getter
    def slug(self) -> pulumi.Input[str]:
        return pulumi.get(self, "slug")

    @slug.setter
    def slug(self, value: pulumi.Input[str]):
        pulumi.set(self, "slug", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def authentication(self) -> Optional[pulumi.Input[str]]:
        """
        Allowed values: - `none` - `require_authenticated` - `require_unauthenticated` - `require_superuser` - `require_outpost`
        Defaults to `none`.
        """
        return pulumi.get(self, "authentication")

    @authentication.setter
    def authentication(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authentication", value)

    @property
    @pulumi.getter
    def background(self) -> Optional[pulumi.Input[str]]:
        """
        Optional URL to an image which will be used as the background during the flow.
        """
        return pulumi.get(self, "background")

    @background.setter
    def background(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "background", value)

    @property
    @pulumi.getter(name="compatibilityMode")
    def compatibility_mode(self) -> Optional[pulumi.Input[bool]]:
        """
        Defaults to `true`.
        """
        return pulumi.get(self, "compatibility_mode")

    @compatibility_mode.setter
    def compatibility_mode(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "compatibility_mode", value)

    @property
    @pulumi.getter(name="deniedAction")
    def denied_action(self) -> Optional[pulumi.Input[str]]:
        """
        Defaults to `message_continue`.
        """
        return pulumi.get(self, "denied_action")

    @denied_action.setter
    def denied_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "denied_action", value)

    @property
    @pulumi.getter(name="flowId")
    def flow_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "flow_id")

    @flow_id.setter
    def flow_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "flow_id", value)

    @property
    @pulumi.getter
    def layout(self) -> Optional[pulumi.Input[str]]:
        """
        Allowed values: - `stacked` - `content_left` - `content_right` - `sidebar_left` - `sidebar_right` Defaults to `stacked`.
        """
        return pulumi.get(self, "layout")

    @layout.setter
    def layout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "layout", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="policyEngineMode")
    def policy_engine_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Allowed values: - `all` - `any` Defaults to `any`.
        """
        return pulumi.get(self, "policy_engine_mode")

    @policy_engine_mode.setter
    def policy_engine_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_engine_mode", value)


@pulumi.input_type
class _FlowState:
    def __init__(__self__, *,
                 authentication: Optional[pulumi.Input[str]] = None,
                 background: Optional[pulumi.Input[str]] = None,
                 compatibility_mode: Optional[pulumi.Input[bool]] = None,
                 denied_action: Optional[pulumi.Input[str]] = None,
                 designation: Optional[pulumi.Input[str]] = None,
                 flow_id: Optional[pulumi.Input[str]] = None,
                 layout: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 policy_engine_mode: Optional[pulumi.Input[str]] = None,
                 slug: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Flow resources.
        :param pulumi.Input[str] authentication: Allowed values: - `none` - `require_authenticated` - `require_unauthenticated` - `require_superuser` - `require_outpost`
               Defaults to `none`.
        :param pulumi.Input[str] background: Optional URL to an image which will be used as the background during the flow.
        :param pulumi.Input[bool] compatibility_mode: Defaults to `true`.
        :param pulumi.Input[str] denied_action: Defaults to `message_continue`.
        :param pulumi.Input[str] designation: Allowed values: - `authentication` - `authorization` - `invalidation` - `enrollment` - `unenrollment` - `recovery` -
               `stage_configuration`
        :param pulumi.Input[str] layout: Allowed values: - `stacked` - `content_left` - `content_right` - `sidebar_left` - `sidebar_right` Defaults to `stacked`.
        :param pulumi.Input[str] policy_engine_mode: Allowed values: - `all` - `any` Defaults to `any`.
        :param pulumi.Input[str] uuid: Generated.
        """
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if background is not None:
            pulumi.set(__self__, "background", background)
        if compatibility_mode is not None:
            pulumi.set(__self__, "compatibility_mode", compatibility_mode)
        if denied_action is not None:
            pulumi.set(__self__, "denied_action", denied_action)
        if designation is not None:
            pulumi.set(__self__, "designation", designation)
        if flow_id is not None:
            pulumi.set(__self__, "flow_id", flow_id)
        if layout is not None:
            pulumi.set(__self__, "layout", layout)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if policy_engine_mode is not None:
            pulumi.set(__self__, "policy_engine_mode", policy_engine_mode)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def authentication(self) -> Optional[pulumi.Input[str]]:
        """
        Allowed values: - `none` - `require_authenticated` - `require_unauthenticated` - `require_superuser` - `require_outpost`
        Defaults to `none`.
        """
        return pulumi.get(self, "authentication")

    @authentication.setter
    def authentication(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authentication", value)

    @property
    @pulumi.getter
    def background(self) -> Optional[pulumi.Input[str]]:
        """
        Optional URL to an image which will be used as the background during the flow.
        """
        return pulumi.get(self, "background")

    @background.setter
    def background(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "background", value)

    @property
    @pulumi.getter(name="compatibilityMode")
    def compatibility_mode(self) -> Optional[pulumi.Input[bool]]:
        """
        Defaults to `true`.
        """
        return pulumi.get(self, "compatibility_mode")

    @compatibility_mode.setter
    def compatibility_mode(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "compatibility_mode", value)

    @property
    @pulumi.getter(name="deniedAction")
    def denied_action(self) -> Optional[pulumi.Input[str]]:
        """
        Defaults to `message_continue`.
        """
        return pulumi.get(self, "denied_action")

    @denied_action.setter
    def denied_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "denied_action", value)

    @property
    @pulumi.getter
    def designation(self) -> Optional[pulumi.Input[str]]:
        """
        Allowed values: - `authentication` - `authorization` - `invalidation` - `enrollment` - `unenrollment` - `recovery` -
        `stage_configuration`
        """
        return pulumi.get(self, "designation")

    @designation.setter
    def designation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "designation", value)

    @property
    @pulumi.getter(name="flowId")
    def flow_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "flow_id")

    @flow_id.setter
    def flow_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "flow_id", value)

    @property
    @pulumi.getter
    def layout(self) -> Optional[pulumi.Input[str]]:
        """
        Allowed values: - `stacked` - `content_left` - `content_right` - `sidebar_left` - `sidebar_right` Defaults to `stacked`.
        """
        return pulumi.get(self, "layout")

    @layout.setter
    def layout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "layout", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="policyEngineMode")
    def policy_engine_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Allowed values: - `all` - `any` Defaults to `any`.
        """
        return pulumi.get(self, "policy_engine_mode")

    @policy_engine_mode.setter
    def policy_engine_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_engine_mode", value)

    @property
    @pulumi.getter
    def slug(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "slug")

    @slug.setter
    def slug(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slug", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        """
        Generated.
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)


class Flow(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 authentication: Optional[pulumi.Input[str]] = None,
                 background: Optional[pulumi.Input[str]] = None,
                 compatibility_mode: Optional[pulumi.Input[bool]] = None,
                 denied_action: Optional[pulumi.Input[str]] = None,
                 designation: Optional[pulumi.Input[str]] = None,
                 flow_id: Optional[pulumi.Input[str]] = None,
                 layout: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 policy_engine_mode: Optional[pulumi.Input[str]] = None,
                 slug: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a Flow resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] authentication: Allowed values: - `none` - `require_authenticated` - `require_unauthenticated` - `require_superuser` - `require_outpost`
               Defaults to `none`.
        :param pulumi.Input[str] background: Optional URL to an image which will be used as the background during the flow.
        :param pulumi.Input[bool] compatibility_mode: Defaults to `true`.
        :param pulumi.Input[str] denied_action: Defaults to `message_continue`.
        :param pulumi.Input[str] designation: Allowed values: - `authentication` - `authorization` - `invalidation` - `enrollment` - `unenrollment` - `recovery` -
               `stage_configuration`
        :param pulumi.Input[str] layout: Allowed values: - `stacked` - `content_left` - `content_right` - `sidebar_left` - `sidebar_right` Defaults to `stacked`.
        :param pulumi.Input[str] policy_engine_mode: Allowed values: - `all` - `any` Defaults to `any`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: FlowArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Flow resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param FlowArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(FlowArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 authentication: Optional[pulumi.Input[str]] = None,
                 background: Optional[pulumi.Input[str]] = None,
                 compatibility_mode: Optional[pulumi.Input[bool]] = None,
                 denied_action: Optional[pulumi.Input[str]] = None,
                 designation: Optional[pulumi.Input[str]] = None,
                 flow_id: Optional[pulumi.Input[str]] = None,
                 layout: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 policy_engine_mode: Optional[pulumi.Input[str]] = None,
                 slug: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = FlowArgs.__new__(FlowArgs)

            __props__.__dict__["authentication"] = authentication
            __props__.__dict__["background"] = background
            __props__.__dict__["compatibility_mode"] = compatibility_mode
            __props__.__dict__["denied_action"] = denied_action
            if designation is None and not opts.urn:
                raise TypeError("Missing required property 'designation'")
            __props__.__dict__["designation"] = designation
            __props__.__dict__["flow_id"] = flow_id
            __props__.__dict__["layout"] = layout
            __props__.__dict__["name"] = name
            __props__.__dict__["policy_engine_mode"] = policy_engine_mode
            if slug is None and not opts.urn:
                raise TypeError("Missing required property 'slug'")
            __props__.__dict__["slug"] = slug
            if title is None and not opts.urn:
                raise TypeError("Missing required property 'title'")
            __props__.__dict__["title"] = title
            __props__.__dict__["uuid"] = None
        super(Flow, __self__).__init__(
            'authentik:index/flow:Flow',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            authentication: Optional[pulumi.Input[str]] = None,
            background: Optional[pulumi.Input[str]] = None,
            compatibility_mode: Optional[pulumi.Input[bool]] = None,
            denied_action: Optional[pulumi.Input[str]] = None,
            designation: Optional[pulumi.Input[str]] = None,
            flow_id: Optional[pulumi.Input[str]] = None,
            layout: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            policy_engine_mode: Optional[pulumi.Input[str]] = None,
            slug: Optional[pulumi.Input[str]] = None,
            title: Optional[pulumi.Input[str]] = None,
            uuid: Optional[pulumi.Input[str]] = None) -> 'Flow':
        """
        Get an existing Flow resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] authentication: Allowed values: - `none` - `require_authenticated` - `require_unauthenticated` - `require_superuser` - `require_outpost`
               Defaults to `none`.
        :param pulumi.Input[str] background: Optional URL to an image which will be used as the background during the flow.
        :param pulumi.Input[bool] compatibility_mode: Defaults to `true`.
        :param pulumi.Input[str] denied_action: Defaults to `message_continue`.
        :param pulumi.Input[str] designation: Allowed values: - `authentication` - `authorization` - `invalidation` - `enrollment` - `unenrollment` - `recovery` -
               `stage_configuration`
        :param pulumi.Input[str] layout: Allowed values: - `stacked` - `content_left` - `content_right` - `sidebar_left` - `sidebar_right` Defaults to `stacked`.
        :param pulumi.Input[str] policy_engine_mode: Allowed values: - `all` - `any` Defaults to `any`.
        :param pulumi.Input[str] uuid: Generated.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _FlowState.__new__(_FlowState)

        __props__.__dict__["authentication"] = authentication
        __props__.__dict__["background"] = background
        __props__.__dict__["compatibility_mode"] = compatibility_mode
        __props__.__dict__["denied_action"] = denied_action
        __props__.__dict__["designation"] = designation
        __props__.__dict__["flow_id"] = flow_id
        __props__.__dict__["layout"] = layout
        __props__.__dict__["name"] = name
        __props__.__dict__["policy_engine_mode"] = policy_engine_mode
        __props__.__dict__["slug"] = slug
        __props__.__dict__["title"] = title
        __props__.__dict__["uuid"] = uuid
        return Flow(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def authentication(self) -> pulumi.Output[Optional[str]]:
        """
        Allowed values: - `none` - `require_authenticated` - `require_unauthenticated` - `require_superuser` - `require_outpost`
        Defaults to `none`.
        """
        return pulumi.get(self, "authentication")

    @property
    @pulumi.getter
    def background(self) -> pulumi.Output[Optional[str]]:
        """
        Optional URL to an image which will be used as the background during the flow.
        """
        return pulumi.get(self, "background")

    @property
    @pulumi.getter(name="compatibilityMode")
    def compatibility_mode(self) -> pulumi.Output[Optional[bool]]:
        """
        Defaults to `true`.
        """
        return pulumi.get(self, "compatibility_mode")

    @property
    @pulumi.getter(name="deniedAction")
    def denied_action(self) -> pulumi.Output[Optional[str]]:
        """
        Defaults to `message_continue`.
        """
        return pulumi.get(self, "denied_action")

    @property
    @pulumi.getter
    def designation(self) -> pulumi.Output[str]:
        """
        Allowed values: - `authentication` - `authorization` - `invalidation` - `enrollment` - `unenrollment` - `recovery` -
        `stage_configuration`
        """
        return pulumi.get(self, "designation")

    @property
    @pulumi.getter(name="flowId")
    def flow_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "flow_id")

    @property
    @pulumi.getter
    def layout(self) -> pulumi.Output[Optional[str]]:
        """
        Allowed values: - `stacked` - `content_left` - `content_right` - `sidebar_left` - `sidebar_right` Defaults to `stacked`.
        """
        return pulumi.get(self, "layout")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="policyEngineMode")
    def policy_engine_mode(self) -> pulumi.Output[Optional[str]]:
        """
        Allowed values: - `all` - `any` Defaults to `any`.
        """
        return pulumi.get(self, "policy_engine_mode")

    @property
    @pulumi.getter
    def slug(self) -> pulumi.Output[str]:
        return pulumi.get(self, "slug")

    @property
    @pulumi.getter
    def title(self) -> pulumi.Output[str]:
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def uuid(self) -> pulumi.Output[str]:
        """
        Generated.
        """
        return pulumi.get(self, "uuid")

