# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetPropertyMappingProviderScopeResult',
    'AwaitableGetPropertyMappingProviderScopeResult',
    'get_property_mapping_provider_scope',
    'get_property_mapping_provider_scope_output',
]

@pulumi.output_type
class GetPropertyMappingProviderScopeResult:
    """
    A collection of values returned by getPropertyMappingProviderScope.
    """
    def __init__(__self__, description=None, expression=None, id=None, ids=None, managed=None, managed_lists=None, name=None, scope_name=None):
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if expression and not isinstance(expression, str):
            raise TypeError("Expected argument 'expression' to be a str")
        pulumi.set(__self__, "expression", expression)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ids and not isinstance(ids, list):
            raise TypeError("Expected argument 'ids' to be a list")
        pulumi.set(__self__, "ids", ids)
        if managed and not isinstance(managed, str):
            raise TypeError("Expected argument 'managed' to be a str")
        pulumi.set(__self__, "managed", managed)
        if managed_lists and not isinstance(managed_lists, list):
            raise TypeError("Expected argument 'managed_lists' to be a list")
        pulumi.set(__self__, "managed_lists", managed_lists)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if scope_name and not isinstance(scope_name, str):
            raise TypeError("Expected argument 'scope_name' to be a str")
        pulumi.set(__self__, "scope_name", scope_name)

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def expression(self) -> str:
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ids(self) -> Sequence[str]:
        return pulumi.get(self, "ids")

    @property
    @pulumi.getter
    def managed(self) -> Optional[str]:
        return pulumi.get(self, "managed")

    @property
    @pulumi.getter(name="managedLists")
    def managed_lists(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "managed_lists")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="scopeName")
    def scope_name(self) -> str:
        return pulumi.get(self, "scope_name")


class AwaitableGetPropertyMappingProviderScopeResult(GetPropertyMappingProviderScopeResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPropertyMappingProviderScopeResult(
            description=self.description,
            expression=self.expression,
            id=self.id,
            ids=self.ids,
            managed=self.managed,
            managed_lists=self.managed_lists,
            name=self.name,
            scope_name=self.scope_name)


def get_property_mapping_provider_scope(id: Optional[str] = None,
                                        ids: Optional[Sequence[str]] = None,
                                        managed: Optional[str] = None,
                                        managed_lists: Optional[Sequence[str]] = None,
                                        name: Optional[str] = None,
                                        scope_name: Optional[str] = None,
                                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPropertyMappingProviderScopeResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['ids'] = ids
    __args__['managed'] = managed
    __args__['managedLists'] = managed_lists
    __args__['name'] = name
    __args__['scopeName'] = scope_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('authentik:index/getPropertyMappingProviderScope:getPropertyMappingProviderScope', __args__, opts=opts, typ=GetPropertyMappingProviderScopeResult, package_ref=_utilities.get_package()).value

    return AwaitableGetPropertyMappingProviderScopeResult(
        description=pulumi.get(__ret__, 'description'),
        expression=pulumi.get(__ret__, 'expression'),
        id=pulumi.get(__ret__, 'id'),
        ids=pulumi.get(__ret__, 'ids'),
        managed=pulumi.get(__ret__, 'managed'),
        managed_lists=pulumi.get(__ret__, 'managed_lists'),
        name=pulumi.get(__ret__, 'name'),
        scope_name=pulumi.get(__ret__, 'scope_name'))
def get_property_mapping_provider_scope_output(id: Optional[pulumi.Input[Optional[str]]] = None,
                                               ids: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                                               managed: Optional[pulumi.Input[Optional[str]]] = None,
                                               managed_lists: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                                               name: Optional[pulumi.Input[Optional[str]]] = None,
                                               scope_name: Optional[pulumi.Input[Optional[str]]] = None,
                                               opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetPropertyMappingProviderScopeResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['ids'] = ids
    __args__['managed'] = managed
    __args__['managedLists'] = managed_lists
    __args__['name'] = name
    __args__['scopeName'] = scope_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('authentik:index/getPropertyMappingProviderScope:getPropertyMappingProviderScope', __args__, opts=opts, typ=GetPropertyMappingProviderScopeResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetPropertyMappingProviderScopeResult(
        description=pulumi.get(__response__, 'description'),
        expression=pulumi.get(__response__, 'expression'),
        id=pulumi.get(__response__, 'id'),
        ids=pulumi.get(__response__, 'ids'),
        managed=pulumi.get(__response__, 'managed'),
        managed_lists=pulumi.get(__response__, 'managed_lists'),
        name=pulumi.get(__response__, 'name'),
        scope_name=pulumi.get(__response__, 'scope_name')))
