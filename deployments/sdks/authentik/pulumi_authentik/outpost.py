# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['OutpostArgs', 'Outpost']

@pulumi.input_type
class OutpostArgs:
    def __init__(__self__, *,
                 protocol_providers: pulumi.Input[Sequence[pulumi.Input[float]]],
                 config: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 outpost_id: Optional[pulumi.Input[str]] = None,
                 service_connection: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Outpost resource.
        :param pulumi.Input[str] config: JSON format expected. Use jsonencode() to pass objects. Generated.
        :param pulumi.Input[str] type: Allowed values: - `proxy` - `ldap` - `radius` - `rac` Defaults to `proxy`.
        """
        pulumi.set(__self__, "protocol_providers", protocol_providers)
        if config is not None:
            pulumi.set(__self__, "config", config)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if outpost_id is not None:
            pulumi.set(__self__, "outpost_id", outpost_id)
        if service_connection is not None:
            pulumi.set(__self__, "service_connection", service_connection)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="protocolProviders")
    def protocol_providers(self) -> pulumi.Input[Sequence[pulumi.Input[float]]]:
        return pulumi.get(self, "protocol_providers")

    @protocol_providers.setter
    def protocol_providers(self, value: pulumi.Input[Sequence[pulumi.Input[float]]]):
        pulumi.set(self, "protocol_providers", value)

    @property
    @pulumi.getter
    def config(self) -> Optional[pulumi.Input[str]]:
        """
        JSON format expected. Use jsonencode() to pass objects. Generated.
        """
        return pulumi.get(self, "config")

    @config.setter
    def config(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "config", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="outpostId")
    def outpost_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "outpost_id")

    @outpost_id.setter
    def outpost_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "outpost_id", value)

    @property
    @pulumi.getter(name="serviceConnection")
    def service_connection(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_connection")

    @service_connection.setter
    def service_connection(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_connection", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Allowed values: - `proxy` - `ldap` - `radius` - `rac` Defaults to `proxy`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class _OutpostState:
    def __init__(__self__, *,
                 config: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 outpost_id: Optional[pulumi.Input[str]] = None,
                 protocol_providers: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]] = None,
                 service_connection: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Outpost resources.
        :param pulumi.Input[str] config: JSON format expected. Use jsonencode() to pass objects. Generated.
        :param pulumi.Input[str] type: Allowed values: - `proxy` - `ldap` - `radius` - `rac` Defaults to `proxy`.
        """
        if config is not None:
            pulumi.set(__self__, "config", config)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if outpost_id is not None:
            pulumi.set(__self__, "outpost_id", outpost_id)
        if protocol_providers is not None:
            pulumi.set(__self__, "protocol_providers", protocol_providers)
        if service_connection is not None:
            pulumi.set(__self__, "service_connection", service_connection)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def config(self) -> Optional[pulumi.Input[str]]:
        """
        JSON format expected. Use jsonencode() to pass objects. Generated.
        """
        return pulumi.get(self, "config")

    @config.setter
    def config(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "config", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="outpostId")
    def outpost_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "outpost_id")

    @outpost_id.setter
    def outpost_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "outpost_id", value)

    @property
    @pulumi.getter(name="protocolProviders")
    def protocol_providers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[float]]]]:
        return pulumi.get(self, "protocol_providers")

    @protocol_providers.setter
    def protocol_providers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]]):
        pulumi.set(self, "protocol_providers", value)

    @property
    @pulumi.getter(name="serviceConnection")
    def service_connection(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_connection")

    @service_connection.setter
    def service_connection(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_connection", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Allowed values: - `proxy` - `ldap` - `radius` - `rac` Defaults to `proxy`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


class Outpost(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 config: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 outpost_id: Optional[pulumi.Input[str]] = None,
                 protocol_providers: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]] = None,
                 service_connection: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a Outpost resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] config: JSON format expected. Use jsonencode() to pass objects. Generated.
        :param pulumi.Input[str] type: Allowed values: - `proxy` - `ldap` - `radius` - `rac` Defaults to `proxy`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: OutpostArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Outpost resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param OutpostArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(OutpostArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 config: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 outpost_id: Optional[pulumi.Input[str]] = None,
                 protocol_providers: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]] = None,
                 service_connection: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = OutpostArgs.__new__(OutpostArgs)

            __props__.__dict__["config"] = config
            __props__.__dict__["name"] = name
            __props__.__dict__["outpost_id"] = outpost_id
            if protocol_providers is None and not opts.urn:
                raise TypeError("Missing required property 'protocol_providers'")
            __props__.__dict__["protocol_providers"] = protocol_providers
            __props__.__dict__["service_connection"] = service_connection
            __props__.__dict__["type"] = type
        super(Outpost, __self__).__init__(
            'authentik:index/outpost:Outpost',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            config: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            outpost_id: Optional[pulumi.Input[str]] = None,
            protocol_providers: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]] = None,
            service_connection: Optional[pulumi.Input[str]] = None,
            type: Optional[pulumi.Input[str]] = None) -> 'Outpost':
        """
        Get an existing Outpost resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] config: JSON format expected. Use jsonencode() to pass objects. Generated.
        :param pulumi.Input[str] type: Allowed values: - `proxy` - `ldap` - `radius` - `rac` Defaults to `proxy`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _OutpostState.__new__(_OutpostState)

        __props__.__dict__["config"] = config
        __props__.__dict__["name"] = name
        __props__.__dict__["outpost_id"] = outpost_id
        __props__.__dict__["protocol_providers"] = protocol_providers
        __props__.__dict__["service_connection"] = service_connection
        __props__.__dict__["type"] = type
        return Outpost(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def config(self) -> pulumi.Output[str]:
        """
        JSON format expected. Use jsonencode() to pass objects. Generated.
        """
        return pulumi.get(self, "config")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="outpostId")
    def outpost_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "outpost_id")

    @property
    @pulumi.getter(name="protocolProviders")
    def protocol_providers(self) -> pulumi.Output[Sequence[float]]:
        return pulumi.get(self, "protocol_providers")

    @property
    @pulumi.getter(name="serviceConnection")
    def service_connection(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "service_connection")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[Optional[str]]:
        """
        Allowed values: - `proxy` - `ldap` - `radius` - `rac` Defaults to `proxy`.
        """
        return pulumi.get(self, "type")

