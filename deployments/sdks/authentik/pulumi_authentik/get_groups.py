# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetGroupsResult',
    'AwaitableGetGroupsResult',
    'get_groups',
    'get_groups_output',
]

@pulumi.output_type
class GetGroupsResult:
    """
    A collection of values returned by getGroups.
    """
    def __init__(__self__, attributes=None, groups=None, id=None, include_users=None, is_superuser=None, members_by_pks=None, members_by_usernames=None, name=None, ordering=None, search=None):
        if attributes and not isinstance(attributes, str):
            raise TypeError("Expected argument 'attributes' to be a str")
        pulumi.set(__self__, "attributes", attributes)
        if groups and not isinstance(groups, list):
            raise TypeError("Expected argument 'groups' to be a list")
        pulumi.set(__self__, "groups", groups)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if include_users and not isinstance(include_users, bool):
            raise TypeError("Expected argument 'include_users' to be a bool")
        pulumi.set(__self__, "include_users", include_users)
        if is_superuser and not isinstance(is_superuser, bool):
            raise TypeError("Expected argument 'is_superuser' to be a bool")
        pulumi.set(__self__, "is_superuser", is_superuser)
        if members_by_pks and not isinstance(members_by_pks, list):
            raise TypeError("Expected argument 'members_by_pks' to be a list")
        pulumi.set(__self__, "members_by_pks", members_by_pks)
        if members_by_usernames and not isinstance(members_by_usernames, list):
            raise TypeError("Expected argument 'members_by_usernames' to be a list")
        pulumi.set(__self__, "members_by_usernames", members_by_usernames)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if ordering and not isinstance(ordering, str):
            raise TypeError("Expected argument 'ordering' to be a str")
        pulumi.set(__self__, "ordering", ordering)
        if search and not isinstance(search, str):
            raise TypeError("Expected argument 'search' to be a str")
        pulumi.set(__self__, "search", search)

    @property
    @pulumi.getter
    def attributes(self) -> Optional[str]:
        return pulumi.get(self, "attributes")

    @property
    @pulumi.getter
    def groups(self) -> Sequence['outputs.GetGroupsGroupResult']:
        return pulumi.get(self, "groups")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="includeUsers")
    def include_users(self) -> Optional[bool]:
        return pulumi.get(self, "include_users")

    @property
    @pulumi.getter(name="isSuperuser")
    def is_superuser(self) -> Optional[bool]:
        return pulumi.get(self, "is_superuser")

    @property
    @pulumi.getter(name="membersByPks")
    def members_by_pks(self) -> Optional[Sequence[float]]:
        return pulumi.get(self, "members_by_pks")

    @property
    @pulumi.getter(name="membersByUsernames")
    def members_by_usernames(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "members_by_usernames")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ordering(self) -> Optional[str]:
        return pulumi.get(self, "ordering")

    @property
    @pulumi.getter
    def search(self) -> Optional[str]:
        return pulumi.get(self, "search")


class AwaitableGetGroupsResult(GetGroupsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetGroupsResult(
            attributes=self.attributes,
            groups=self.groups,
            id=self.id,
            include_users=self.include_users,
            is_superuser=self.is_superuser,
            members_by_pks=self.members_by_pks,
            members_by_usernames=self.members_by_usernames,
            name=self.name,
            ordering=self.ordering,
            search=self.search)


def get_groups(attributes: Optional[str] = None,
               id: Optional[str] = None,
               include_users: Optional[bool] = None,
               is_superuser: Optional[bool] = None,
               members_by_pks: Optional[Sequence[float]] = None,
               members_by_usernames: Optional[Sequence[str]] = None,
               name: Optional[str] = None,
               ordering: Optional[str] = None,
               search: Optional[str] = None,
               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetGroupsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['attributes'] = attributes
    __args__['id'] = id
    __args__['includeUsers'] = include_users
    __args__['isSuperuser'] = is_superuser
    __args__['membersByPks'] = members_by_pks
    __args__['membersByUsernames'] = members_by_usernames
    __args__['name'] = name
    __args__['ordering'] = ordering
    __args__['search'] = search
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('authentik:index/getGroups:getGroups', __args__, opts=opts, typ=GetGroupsResult, package_ref=_utilities.get_package()).value

    return AwaitableGetGroupsResult(
        attributes=pulumi.get(__ret__, 'attributes'),
        groups=pulumi.get(__ret__, 'groups'),
        id=pulumi.get(__ret__, 'id'),
        include_users=pulumi.get(__ret__, 'include_users'),
        is_superuser=pulumi.get(__ret__, 'is_superuser'),
        members_by_pks=pulumi.get(__ret__, 'members_by_pks'),
        members_by_usernames=pulumi.get(__ret__, 'members_by_usernames'),
        name=pulumi.get(__ret__, 'name'),
        ordering=pulumi.get(__ret__, 'ordering'),
        search=pulumi.get(__ret__, 'search'))
def get_groups_output(attributes: Optional[pulumi.Input[Optional[str]]] = None,
                      id: Optional[pulumi.Input[Optional[str]]] = None,
                      include_users: Optional[pulumi.Input[Optional[bool]]] = None,
                      is_superuser: Optional[pulumi.Input[Optional[bool]]] = None,
                      members_by_pks: Optional[pulumi.Input[Optional[Sequence[float]]]] = None,
                      members_by_usernames: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                      name: Optional[pulumi.Input[Optional[str]]] = None,
                      ordering: Optional[pulumi.Input[Optional[str]]] = None,
                      search: Optional[pulumi.Input[Optional[str]]] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetGroupsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['attributes'] = attributes
    __args__['id'] = id
    __args__['includeUsers'] = include_users
    __args__['isSuperuser'] = is_superuser
    __args__['membersByPks'] = members_by_pks
    __args__['membersByUsernames'] = members_by_usernames
    __args__['name'] = name
    __args__['ordering'] = ordering
    __args__['search'] = search
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('authentik:index/getGroups:getGroups', __args__, opts=opts, typ=GetGroupsResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetGroupsResult(
        attributes=pulumi.get(__response__, 'attributes'),
        groups=pulumi.get(__response__, 'groups'),
        id=pulumi.get(__response__, 'id'),
        include_users=pulumi.get(__response__, 'include_users'),
        is_superuser=pulumi.get(__response__, 'is_superuser'),
        members_by_pks=pulumi.get(__response__, 'members_by_pks'),
        members_by_usernames=pulumi.get(__response__, 'members_by_usernames'),
        name=pulumi.get(__response__, 'name'),
        ordering=pulumi.get(__response__, 'ordering'),
        search=pulumi.get(__response__, 'search')))
