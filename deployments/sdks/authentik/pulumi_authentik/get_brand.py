# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetBrandResult',
    'AwaitableGetBrandResult',
    'get_brand',
    'get_brand_output',
]

@pulumi.output_type
class GetBrandResult:
    """
    A collection of values returned by getBrand.
    """
    def __init__(__self__, branding_favicon=None, branding_logo=None, branding_title=None, default=None, default_application=None, domain=None, flow_authentication=None, flow_device_code=None, flow_invalidation=None, flow_recovery=None, flow_unenrollment=None, flow_user_settings=None, id=None, web_certificate=None):
        if branding_favicon and not isinstance(branding_favicon, str):
            raise TypeError("Expected argument 'branding_favicon' to be a str")
        pulumi.set(__self__, "branding_favicon", branding_favicon)
        if branding_logo and not isinstance(branding_logo, str):
            raise TypeError("Expected argument 'branding_logo' to be a str")
        pulumi.set(__self__, "branding_logo", branding_logo)
        if branding_title and not isinstance(branding_title, str):
            raise TypeError("Expected argument 'branding_title' to be a str")
        pulumi.set(__self__, "branding_title", branding_title)
        if default and not isinstance(default, bool):
            raise TypeError("Expected argument 'default' to be a bool")
        pulumi.set(__self__, "default", default)
        if default_application and not isinstance(default_application, str):
            raise TypeError("Expected argument 'default_application' to be a str")
        pulumi.set(__self__, "default_application", default_application)
        if domain and not isinstance(domain, str):
            raise TypeError("Expected argument 'domain' to be a str")
        pulumi.set(__self__, "domain", domain)
        if flow_authentication and not isinstance(flow_authentication, str):
            raise TypeError("Expected argument 'flow_authentication' to be a str")
        pulumi.set(__self__, "flow_authentication", flow_authentication)
        if flow_device_code and not isinstance(flow_device_code, str):
            raise TypeError("Expected argument 'flow_device_code' to be a str")
        pulumi.set(__self__, "flow_device_code", flow_device_code)
        if flow_invalidation and not isinstance(flow_invalidation, str):
            raise TypeError("Expected argument 'flow_invalidation' to be a str")
        pulumi.set(__self__, "flow_invalidation", flow_invalidation)
        if flow_recovery and not isinstance(flow_recovery, str):
            raise TypeError("Expected argument 'flow_recovery' to be a str")
        pulumi.set(__self__, "flow_recovery", flow_recovery)
        if flow_unenrollment and not isinstance(flow_unenrollment, str):
            raise TypeError("Expected argument 'flow_unenrollment' to be a str")
        pulumi.set(__self__, "flow_unenrollment", flow_unenrollment)
        if flow_user_settings and not isinstance(flow_user_settings, str):
            raise TypeError("Expected argument 'flow_user_settings' to be a str")
        pulumi.set(__self__, "flow_user_settings", flow_user_settings)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if web_certificate and not isinstance(web_certificate, str):
            raise TypeError("Expected argument 'web_certificate' to be a str")
        pulumi.set(__self__, "web_certificate", web_certificate)

    @property
    @pulumi.getter(name="brandingFavicon")
    def branding_favicon(self) -> str:
        return pulumi.get(self, "branding_favicon")

    @property
    @pulumi.getter(name="brandingLogo")
    def branding_logo(self) -> str:
        return pulumi.get(self, "branding_logo")

    @property
    @pulumi.getter(name="brandingTitle")
    def branding_title(self) -> str:
        return pulumi.get(self, "branding_title")

    @property
    @pulumi.getter
    def default(self) -> bool:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter(name="defaultApplication")
    def default_application(self) -> str:
        return pulumi.get(self, "default_application")

    @property
    @pulumi.getter
    def domain(self) -> str:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="flowAuthentication")
    def flow_authentication(self) -> str:
        return pulumi.get(self, "flow_authentication")

    @property
    @pulumi.getter(name="flowDeviceCode")
    def flow_device_code(self) -> str:
        return pulumi.get(self, "flow_device_code")

    @property
    @pulumi.getter(name="flowInvalidation")
    def flow_invalidation(self) -> str:
        return pulumi.get(self, "flow_invalidation")

    @property
    @pulumi.getter(name="flowRecovery")
    def flow_recovery(self) -> str:
        return pulumi.get(self, "flow_recovery")

    @property
    @pulumi.getter(name="flowUnenrollment")
    def flow_unenrollment(self) -> str:
        return pulumi.get(self, "flow_unenrollment")

    @property
    @pulumi.getter(name="flowUserSettings")
    def flow_user_settings(self) -> str:
        return pulumi.get(self, "flow_user_settings")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="webCertificate")
    def web_certificate(self) -> str:
        return pulumi.get(self, "web_certificate")


class AwaitableGetBrandResult(GetBrandResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetBrandResult(
            branding_favicon=self.branding_favicon,
            branding_logo=self.branding_logo,
            branding_title=self.branding_title,
            default=self.default,
            default_application=self.default_application,
            domain=self.domain,
            flow_authentication=self.flow_authentication,
            flow_device_code=self.flow_device_code,
            flow_invalidation=self.flow_invalidation,
            flow_recovery=self.flow_recovery,
            flow_unenrollment=self.flow_unenrollment,
            flow_user_settings=self.flow_user_settings,
            id=self.id,
            web_certificate=self.web_certificate)


def get_brand(branding_favicon: Optional[str] = None,
              branding_logo: Optional[str] = None,
              branding_title: Optional[str] = None,
              default: Optional[bool] = None,
              default_application: Optional[str] = None,
              domain: Optional[str] = None,
              flow_authentication: Optional[str] = None,
              flow_device_code: Optional[str] = None,
              flow_invalidation: Optional[str] = None,
              flow_recovery: Optional[str] = None,
              flow_unenrollment: Optional[str] = None,
              flow_user_settings: Optional[str] = None,
              id: Optional[str] = None,
              web_certificate: Optional[str] = None,
              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetBrandResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['brandingFavicon'] = branding_favicon
    __args__['brandingLogo'] = branding_logo
    __args__['brandingTitle'] = branding_title
    __args__['default'] = default
    __args__['defaultApplication'] = default_application
    __args__['domain'] = domain
    __args__['flowAuthentication'] = flow_authentication
    __args__['flowDeviceCode'] = flow_device_code
    __args__['flowInvalidation'] = flow_invalidation
    __args__['flowRecovery'] = flow_recovery
    __args__['flowUnenrollment'] = flow_unenrollment
    __args__['flowUserSettings'] = flow_user_settings
    __args__['id'] = id
    __args__['webCertificate'] = web_certificate
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('authentik:index/getBrand:getBrand', __args__, opts=opts, typ=GetBrandResult, package_ref=_utilities.get_package()).value

    return AwaitableGetBrandResult(
        branding_favicon=pulumi.get(__ret__, 'branding_favicon'),
        branding_logo=pulumi.get(__ret__, 'branding_logo'),
        branding_title=pulumi.get(__ret__, 'branding_title'),
        default=pulumi.get(__ret__, 'default'),
        default_application=pulumi.get(__ret__, 'default_application'),
        domain=pulumi.get(__ret__, 'domain'),
        flow_authentication=pulumi.get(__ret__, 'flow_authentication'),
        flow_device_code=pulumi.get(__ret__, 'flow_device_code'),
        flow_invalidation=pulumi.get(__ret__, 'flow_invalidation'),
        flow_recovery=pulumi.get(__ret__, 'flow_recovery'),
        flow_unenrollment=pulumi.get(__ret__, 'flow_unenrollment'),
        flow_user_settings=pulumi.get(__ret__, 'flow_user_settings'),
        id=pulumi.get(__ret__, 'id'),
        web_certificate=pulumi.get(__ret__, 'web_certificate'))
def get_brand_output(branding_favicon: Optional[pulumi.Input[Optional[str]]] = None,
                     branding_logo: Optional[pulumi.Input[Optional[str]]] = None,
                     branding_title: Optional[pulumi.Input[Optional[str]]] = None,
                     default: Optional[pulumi.Input[Optional[bool]]] = None,
                     default_application: Optional[pulumi.Input[Optional[str]]] = None,
                     domain: Optional[pulumi.Input[Optional[str]]] = None,
                     flow_authentication: Optional[pulumi.Input[Optional[str]]] = None,
                     flow_device_code: Optional[pulumi.Input[Optional[str]]] = None,
                     flow_invalidation: Optional[pulumi.Input[Optional[str]]] = None,
                     flow_recovery: Optional[pulumi.Input[Optional[str]]] = None,
                     flow_unenrollment: Optional[pulumi.Input[Optional[str]]] = None,
                     flow_user_settings: Optional[pulumi.Input[Optional[str]]] = None,
                     id: Optional[pulumi.Input[Optional[str]]] = None,
                     web_certificate: Optional[pulumi.Input[Optional[str]]] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetBrandResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['brandingFavicon'] = branding_favicon
    __args__['brandingLogo'] = branding_logo
    __args__['brandingTitle'] = branding_title
    __args__['default'] = default
    __args__['defaultApplication'] = default_application
    __args__['domain'] = domain
    __args__['flowAuthentication'] = flow_authentication
    __args__['flowDeviceCode'] = flow_device_code
    __args__['flowInvalidation'] = flow_invalidation
    __args__['flowRecovery'] = flow_recovery
    __args__['flowUnenrollment'] = flow_unenrollment
    __args__['flowUserSettings'] = flow_user_settings
    __args__['id'] = id
    __args__['webCertificate'] = web_certificate
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('authentik:index/getBrand:getBrand', __args__, opts=opts, typ=GetBrandResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetBrandResult(
        branding_favicon=pulumi.get(__response__, 'branding_favicon'),
        branding_logo=pulumi.get(__response__, 'branding_logo'),
        branding_title=pulumi.get(__response__, 'branding_title'),
        default=pulumi.get(__response__, 'default'),
        default_application=pulumi.get(__response__, 'default_application'),
        domain=pulumi.get(__response__, 'domain'),
        flow_authentication=pulumi.get(__response__, 'flow_authentication'),
        flow_device_code=pulumi.get(__response__, 'flow_device_code'),
        flow_invalidation=pulumi.get(__response__, 'flow_invalidation'),
        flow_recovery=pulumi.get(__response__, 'flow_recovery'),
        flow_unenrollment=pulumi.get(__response__, 'flow_unenrollment'),
        flow_user_settings=pulumi.get(__response__, 'flow_user_settings'),
        id=pulumi.get(__response__, 'id'),
        web_certificate=pulumi.get(__response__, 'web_certificate')))
