# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['ApplicationArgs', 'Application']

@pulumi.input_type
class ApplicationArgs:
    def __init__(__self__, *,
                 slug: pulumi.Input[str],
                 application_id: Optional[pulumi.Input[str]] = None,
                 backchannel_providers: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]] = None,
                 group: Optional[pulumi.Input[str]] = None,
                 meta_description: Optional[pulumi.Input[str]] = None,
                 meta_icon: Optional[pulumi.Input[str]] = None,
                 meta_launch_url: Optional[pulumi.Input[str]] = None,
                 meta_publisher: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 open_in_new_tab: Optional[pulumi.Input[bool]] = None,
                 policy_engine_mode: Optional[pulumi.Input[str]] = None,
                 protocol_provider: Optional[pulumi.Input[float]] = None,
                 uuid: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Application resource.
        :param pulumi.Input[bool] open_in_new_tab: Defaults to `false`.
        :param pulumi.Input[str] policy_engine_mode: Allowed values: - `all` - `any` Defaults to `any`.
        :param pulumi.Input[str] uuid: Generated.
        """
        pulumi.set(__self__, "slug", slug)
        if application_id is not None:
            pulumi.set(__self__, "application_id", application_id)
        if backchannel_providers is not None:
            pulumi.set(__self__, "backchannel_providers", backchannel_providers)
        if group is not None:
            pulumi.set(__self__, "group", group)
        if meta_description is not None:
            pulumi.set(__self__, "meta_description", meta_description)
        if meta_icon is not None:
            pulumi.set(__self__, "meta_icon", meta_icon)
        if meta_launch_url is not None:
            pulumi.set(__self__, "meta_launch_url", meta_launch_url)
        if meta_publisher is not None:
            pulumi.set(__self__, "meta_publisher", meta_publisher)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if open_in_new_tab is not None:
            pulumi.set(__self__, "open_in_new_tab", open_in_new_tab)
        if policy_engine_mode is not None:
            pulumi.set(__self__, "policy_engine_mode", policy_engine_mode)
        if protocol_provider is not None:
            pulumi.set(__self__, "protocol_provider", protocol_provider)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def slug(self) -> pulumi.Input[str]:
        return pulumi.get(self, "slug")

    @slug.setter
    def slug(self, value: pulumi.Input[str]):
        pulumi.set(self, "slug", value)

    @property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "application_id")

    @application_id.setter
    def application_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application_id", value)

    @property
    @pulumi.getter(name="backchannelProviders")
    def backchannel_providers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[float]]]]:
        return pulumi.get(self, "backchannel_providers")

    @backchannel_providers.setter
    def backchannel_providers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]]):
        pulumi.set(self, "backchannel_providers", value)

    @property
    @pulumi.getter
    def group(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "group")

    @group.setter
    def group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group", value)

    @property
    @pulumi.getter(name="metaDescription")
    def meta_description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "meta_description")

    @meta_description.setter
    def meta_description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "meta_description", value)

    @property
    @pulumi.getter(name="metaIcon")
    def meta_icon(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "meta_icon")

    @meta_icon.setter
    def meta_icon(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "meta_icon", value)

    @property
    @pulumi.getter(name="metaLaunchUrl")
    def meta_launch_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "meta_launch_url")

    @meta_launch_url.setter
    def meta_launch_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "meta_launch_url", value)

    @property
    @pulumi.getter(name="metaPublisher")
    def meta_publisher(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "meta_publisher")

    @meta_publisher.setter
    def meta_publisher(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "meta_publisher", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="openInNewTab")
    def open_in_new_tab(self) -> Optional[pulumi.Input[bool]]:
        """
        Defaults to `false`.
        """
        return pulumi.get(self, "open_in_new_tab")

    @open_in_new_tab.setter
    def open_in_new_tab(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "open_in_new_tab", value)

    @property
    @pulumi.getter(name="policyEngineMode")
    def policy_engine_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Allowed values: - `all` - `any` Defaults to `any`.
        """
        return pulumi.get(self, "policy_engine_mode")

    @policy_engine_mode.setter
    def policy_engine_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_engine_mode", value)

    @property
    @pulumi.getter(name="protocolProvider")
    def protocol_provider(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "protocol_provider")

    @protocol_provider.setter
    def protocol_provider(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "protocol_provider", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        """
        Generated.
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class _ApplicationState:
    def __init__(__self__, *,
                 application_id: Optional[pulumi.Input[str]] = None,
                 backchannel_providers: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]] = None,
                 group: Optional[pulumi.Input[str]] = None,
                 meta_description: Optional[pulumi.Input[str]] = None,
                 meta_icon: Optional[pulumi.Input[str]] = None,
                 meta_launch_url: Optional[pulumi.Input[str]] = None,
                 meta_publisher: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 open_in_new_tab: Optional[pulumi.Input[bool]] = None,
                 policy_engine_mode: Optional[pulumi.Input[str]] = None,
                 protocol_provider: Optional[pulumi.Input[float]] = None,
                 slug: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Application resources.
        :param pulumi.Input[bool] open_in_new_tab: Defaults to `false`.
        :param pulumi.Input[str] policy_engine_mode: Allowed values: - `all` - `any` Defaults to `any`.
        :param pulumi.Input[str] uuid: Generated.
        """
        if application_id is not None:
            pulumi.set(__self__, "application_id", application_id)
        if backchannel_providers is not None:
            pulumi.set(__self__, "backchannel_providers", backchannel_providers)
        if group is not None:
            pulumi.set(__self__, "group", group)
        if meta_description is not None:
            pulumi.set(__self__, "meta_description", meta_description)
        if meta_icon is not None:
            pulumi.set(__self__, "meta_icon", meta_icon)
        if meta_launch_url is not None:
            pulumi.set(__self__, "meta_launch_url", meta_launch_url)
        if meta_publisher is not None:
            pulumi.set(__self__, "meta_publisher", meta_publisher)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if open_in_new_tab is not None:
            pulumi.set(__self__, "open_in_new_tab", open_in_new_tab)
        if policy_engine_mode is not None:
            pulumi.set(__self__, "policy_engine_mode", policy_engine_mode)
        if protocol_provider is not None:
            pulumi.set(__self__, "protocol_provider", protocol_provider)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "application_id")

    @application_id.setter
    def application_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application_id", value)

    @property
    @pulumi.getter(name="backchannelProviders")
    def backchannel_providers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[float]]]]:
        return pulumi.get(self, "backchannel_providers")

    @backchannel_providers.setter
    def backchannel_providers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]]):
        pulumi.set(self, "backchannel_providers", value)

    @property
    @pulumi.getter
    def group(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "group")

    @group.setter
    def group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group", value)

    @property
    @pulumi.getter(name="metaDescription")
    def meta_description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "meta_description")

    @meta_description.setter
    def meta_description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "meta_description", value)

    @property
    @pulumi.getter(name="metaIcon")
    def meta_icon(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "meta_icon")

    @meta_icon.setter
    def meta_icon(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "meta_icon", value)

    @property
    @pulumi.getter(name="metaLaunchUrl")
    def meta_launch_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "meta_launch_url")

    @meta_launch_url.setter
    def meta_launch_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "meta_launch_url", value)

    @property
    @pulumi.getter(name="metaPublisher")
    def meta_publisher(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "meta_publisher")

    @meta_publisher.setter
    def meta_publisher(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "meta_publisher", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="openInNewTab")
    def open_in_new_tab(self) -> Optional[pulumi.Input[bool]]:
        """
        Defaults to `false`.
        """
        return pulumi.get(self, "open_in_new_tab")

    @open_in_new_tab.setter
    def open_in_new_tab(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "open_in_new_tab", value)

    @property
    @pulumi.getter(name="policyEngineMode")
    def policy_engine_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Allowed values: - `all` - `any` Defaults to `any`.
        """
        return pulumi.get(self, "policy_engine_mode")

    @policy_engine_mode.setter
    def policy_engine_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_engine_mode", value)

    @property
    @pulumi.getter(name="protocolProvider")
    def protocol_provider(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "protocol_provider")

    @protocol_provider.setter
    def protocol_provider(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "protocol_provider", value)

    @property
    @pulumi.getter
    def slug(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "slug")

    @slug.setter
    def slug(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slug", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        """
        Generated.
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)


class Application(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 application_id: Optional[pulumi.Input[str]] = None,
                 backchannel_providers: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]] = None,
                 group: Optional[pulumi.Input[str]] = None,
                 meta_description: Optional[pulumi.Input[str]] = None,
                 meta_icon: Optional[pulumi.Input[str]] = None,
                 meta_launch_url: Optional[pulumi.Input[str]] = None,
                 meta_publisher: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 open_in_new_tab: Optional[pulumi.Input[bool]] = None,
                 policy_engine_mode: Optional[pulumi.Input[str]] = None,
                 protocol_provider: Optional[pulumi.Input[float]] = None,
                 slug: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a Application resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] open_in_new_tab: Defaults to `false`.
        :param pulumi.Input[str] policy_engine_mode: Allowed values: - `all` - `any` Defaults to `any`.
        :param pulumi.Input[str] uuid: Generated.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ApplicationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Application resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ApplicationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ApplicationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 application_id: Optional[pulumi.Input[str]] = None,
                 backchannel_providers: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]] = None,
                 group: Optional[pulumi.Input[str]] = None,
                 meta_description: Optional[pulumi.Input[str]] = None,
                 meta_icon: Optional[pulumi.Input[str]] = None,
                 meta_launch_url: Optional[pulumi.Input[str]] = None,
                 meta_publisher: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 open_in_new_tab: Optional[pulumi.Input[bool]] = None,
                 policy_engine_mode: Optional[pulumi.Input[str]] = None,
                 protocol_provider: Optional[pulumi.Input[float]] = None,
                 slug: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ApplicationArgs.__new__(ApplicationArgs)

            __props__.__dict__["application_id"] = application_id
            __props__.__dict__["backchannel_providers"] = backchannel_providers
            __props__.__dict__["group"] = group
            __props__.__dict__["meta_description"] = meta_description
            __props__.__dict__["meta_icon"] = meta_icon
            __props__.__dict__["meta_launch_url"] = meta_launch_url
            __props__.__dict__["meta_publisher"] = meta_publisher
            __props__.__dict__["name"] = name
            __props__.__dict__["open_in_new_tab"] = open_in_new_tab
            __props__.__dict__["policy_engine_mode"] = policy_engine_mode
            __props__.__dict__["protocol_provider"] = protocol_provider
            if slug is None and not opts.urn:
                raise TypeError("Missing required property 'slug'")
            __props__.__dict__["slug"] = slug
            __props__.__dict__["uuid"] = uuid
        super(Application, __self__).__init__(
            'authentik:index/application:Application',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            application_id: Optional[pulumi.Input[str]] = None,
            backchannel_providers: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]] = None,
            group: Optional[pulumi.Input[str]] = None,
            meta_description: Optional[pulumi.Input[str]] = None,
            meta_icon: Optional[pulumi.Input[str]] = None,
            meta_launch_url: Optional[pulumi.Input[str]] = None,
            meta_publisher: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            open_in_new_tab: Optional[pulumi.Input[bool]] = None,
            policy_engine_mode: Optional[pulumi.Input[str]] = None,
            protocol_provider: Optional[pulumi.Input[float]] = None,
            slug: Optional[pulumi.Input[str]] = None,
            uuid: Optional[pulumi.Input[str]] = None) -> 'Application':
        """
        Get an existing Application resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] open_in_new_tab: Defaults to `false`.
        :param pulumi.Input[str] policy_engine_mode: Allowed values: - `all` - `any` Defaults to `any`.
        :param pulumi.Input[str] uuid: Generated.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ApplicationState.__new__(_ApplicationState)

        __props__.__dict__["application_id"] = application_id
        __props__.__dict__["backchannel_providers"] = backchannel_providers
        __props__.__dict__["group"] = group
        __props__.__dict__["meta_description"] = meta_description
        __props__.__dict__["meta_icon"] = meta_icon
        __props__.__dict__["meta_launch_url"] = meta_launch_url
        __props__.__dict__["meta_publisher"] = meta_publisher
        __props__.__dict__["name"] = name
        __props__.__dict__["open_in_new_tab"] = open_in_new_tab
        __props__.__dict__["policy_engine_mode"] = policy_engine_mode
        __props__.__dict__["protocol_provider"] = protocol_provider
        __props__.__dict__["slug"] = slug
        __props__.__dict__["uuid"] = uuid
        return Application(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "application_id")

    @property
    @pulumi.getter(name="backchannelProviders")
    def backchannel_providers(self) -> pulumi.Output[Optional[Sequence[float]]]:
        return pulumi.get(self, "backchannel_providers")

    @property
    @pulumi.getter
    def group(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "group")

    @property
    @pulumi.getter(name="metaDescription")
    def meta_description(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "meta_description")

    @property
    @pulumi.getter(name="metaIcon")
    def meta_icon(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "meta_icon")

    @property
    @pulumi.getter(name="metaLaunchUrl")
    def meta_launch_url(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "meta_launch_url")

    @property
    @pulumi.getter(name="metaPublisher")
    def meta_publisher(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "meta_publisher")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="openInNewTab")
    def open_in_new_tab(self) -> pulumi.Output[Optional[bool]]:
        """
        Defaults to `false`.
        """
        return pulumi.get(self, "open_in_new_tab")

    @property
    @pulumi.getter(name="policyEngineMode")
    def policy_engine_mode(self) -> pulumi.Output[Optional[str]]:
        """
        Allowed values: - `all` - `any` Defaults to `any`.
        """
        return pulumi.get(self, "policy_engine_mode")

    @property
    @pulumi.getter(name="protocolProvider")
    def protocol_provider(self) -> pulumi.Output[Optional[float]]:
        return pulumi.get(self, "protocol_provider")

    @property
    @pulumi.getter
    def slug(self) -> pulumi.Output[str]:
        return pulumi.get(self, "slug")

    @property
    @pulumi.getter
    def uuid(self) -> pulumi.Output[str]:
        """
        Generated.
        """
        return pulumi.get(self, "uuid")

