# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['StageAuthenticatorDuoArgs', 'StageAuthenticatorDuo']

@pulumi.input_type
class StageAuthenticatorDuoArgs:
    def __init__(__self__, *,
                 api_hostname: pulumi.Input[str],
                 client_id: pulumi.Input[str],
                 client_secret: pulumi.Input[str],
                 admin_integration_key: Optional[pulumi.Input[str]] = None,
                 admin_secret_key: Optional[pulumi.Input[str]] = None,
                 configure_flow: Optional[pulumi.Input[str]] = None,
                 friendly_name: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 stage_authenticator_duo_id: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a StageAuthenticatorDuo resource.
        """
        pulumi.set(__self__, "api_hostname", api_hostname)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        if admin_integration_key is not None:
            pulumi.set(__self__, "admin_integration_key", admin_integration_key)
        if admin_secret_key is not None:
            pulumi.set(__self__, "admin_secret_key", admin_secret_key)
        if configure_flow is not None:
            pulumi.set(__self__, "configure_flow", configure_flow)
        if friendly_name is not None:
            pulumi.set(__self__, "friendly_name", friendly_name)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if stage_authenticator_duo_id is not None:
            pulumi.set(__self__, "stage_authenticator_duo_id", stage_authenticator_duo_id)

    @property
    @pulumi.getter(name="apiHostname")
    def api_hostname(self) -> pulumi.Input[str]:
        return pulumi.get(self, "api_hostname")

    @api_hostname.setter
    def api_hostname(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_hostname", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="adminIntegrationKey")
    def admin_integration_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "admin_integration_key")

    @admin_integration_key.setter
    def admin_integration_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admin_integration_key", value)

    @property
    @pulumi.getter(name="adminSecretKey")
    def admin_secret_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "admin_secret_key")

    @admin_secret_key.setter
    def admin_secret_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admin_secret_key", value)

    @property
    @pulumi.getter(name="configureFlow")
    def configure_flow(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "configure_flow")

    @configure_flow.setter
    def configure_flow(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "configure_flow", value)

    @property
    @pulumi.getter(name="friendlyName")
    def friendly_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "friendly_name")

    @friendly_name.setter
    def friendly_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "friendly_name", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="stageAuthenticatorDuoId")
    def stage_authenticator_duo_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "stage_authenticator_duo_id")

    @stage_authenticator_duo_id.setter
    def stage_authenticator_duo_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "stage_authenticator_duo_id", value)


@pulumi.input_type
class _StageAuthenticatorDuoState:
    def __init__(__self__, *,
                 admin_integration_key: Optional[pulumi.Input[str]] = None,
                 admin_secret_key: Optional[pulumi.Input[str]] = None,
                 api_hostname: Optional[pulumi.Input[str]] = None,
                 client_id: Optional[pulumi.Input[str]] = None,
                 client_secret: Optional[pulumi.Input[str]] = None,
                 configure_flow: Optional[pulumi.Input[str]] = None,
                 friendly_name: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 stage_authenticator_duo_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering StageAuthenticatorDuo resources.
        """
        if admin_integration_key is not None:
            pulumi.set(__self__, "admin_integration_key", admin_integration_key)
        if admin_secret_key is not None:
            pulumi.set(__self__, "admin_secret_key", admin_secret_key)
        if api_hostname is not None:
            pulumi.set(__self__, "api_hostname", api_hostname)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)
        if configure_flow is not None:
            pulumi.set(__self__, "configure_flow", configure_flow)
        if friendly_name is not None:
            pulumi.set(__self__, "friendly_name", friendly_name)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if stage_authenticator_duo_id is not None:
            pulumi.set(__self__, "stage_authenticator_duo_id", stage_authenticator_duo_id)

    @property
    @pulumi.getter(name="adminIntegrationKey")
    def admin_integration_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "admin_integration_key")

    @admin_integration_key.setter
    def admin_integration_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admin_integration_key", value)

    @property
    @pulumi.getter(name="adminSecretKey")
    def admin_secret_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "admin_secret_key")

    @admin_secret_key.setter
    def admin_secret_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admin_secret_key", value)

    @property
    @pulumi.getter(name="apiHostname")
    def api_hostname(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "api_hostname")

    @api_hostname.setter
    def api_hostname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_hostname", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="configureFlow")
    def configure_flow(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "configure_flow")

    @configure_flow.setter
    def configure_flow(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "configure_flow", value)

    @property
    @pulumi.getter(name="friendlyName")
    def friendly_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "friendly_name")

    @friendly_name.setter
    def friendly_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "friendly_name", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="stageAuthenticatorDuoId")
    def stage_authenticator_duo_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "stage_authenticator_duo_id")

    @stage_authenticator_duo_id.setter
    def stage_authenticator_duo_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "stage_authenticator_duo_id", value)


class StageAuthenticatorDuo(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 admin_integration_key: Optional[pulumi.Input[str]] = None,
                 admin_secret_key: Optional[pulumi.Input[str]] = None,
                 api_hostname: Optional[pulumi.Input[str]] = None,
                 client_id: Optional[pulumi.Input[str]] = None,
                 client_secret: Optional[pulumi.Input[str]] = None,
                 configure_flow: Optional[pulumi.Input[str]] = None,
                 friendly_name: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 stage_authenticator_duo_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a StageAuthenticatorDuo resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: StageAuthenticatorDuoArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a StageAuthenticatorDuo resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param StageAuthenticatorDuoArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(StageAuthenticatorDuoArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 admin_integration_key: Optional[pulumi.Input[str]] = None,
                 admin_secret_key: Optional[pulumi.Input[str]] = None,
                 api_hostname: Optional[pulumi.Input[str]] = None,
                 client_id: Optional[pulumi.Input[str]] = None,
                 client_secret: Optional[pulumi.Input[str]] = None,
                 configure_flow: Optional[pulumi.Input[str]] = None,
                 friendly_name: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 stage_authenticator_duo_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = StageAuthenticatorDuoArgs.__new__(StageAuthenticatorDuoArgs)

            __props__.__dict__["admin_integration_key"] = admin_integration_key
            __props__.__dict__["admin_secret_key"] = None if admin_secret_key is None else pulumi.Output.secret(admin_secret_key)
            if api_hostname is None and not opts.urn:
                raise TypeError("Missing required property 'api_hostname'")
            __props__.__dict__["api_hostname"] = api_hostname
            if client_id is None and not opts.urn:
                raise TypeError("Missing required property 'client_id'")
            __props__.__dict__["client_id"] = client_id
            if client_secret is None and not opts.urn:
                raise TypeError("Missing required property 'client_secret'")
            __props__.__dict__["client_secret"] = None if client_secret is None else pulumi.Output.secret(client_secret)
            __props__.__dict__["configure_flow"] = configure_flow
            __props__.__dict__["friendly_name"] = friendly_name
            __props__.__dict__["name"] = name
            __props__.__dict__["stage_authenticator_duo_id"] = stage_authenticator_duo_id
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["adminSecretKey", "clientSecret"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(StageAuthenticatorDuo, __self__).__init__(
            'authentik:index/stageAuthenticatorDuo:StageAuthenticatorDuo',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            admin_integration_key: Optional[pulumi.Input[str]] = None,
            admin_secret_key: Optional[pulumi.Input[str]] = None,
            api_hostname: Optional[pulumi.Input[str]] = None,
            client_id: Optional[pulumi.Input[str]] = None,
            client_secret: Optional[pulumi.Input[str]] = None,
            configure_flow: Optional[pulumi.Input[str]] = None,
            friendly_name: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            stage_authenticator_duo_id: Optional[pulumi.Input[str]] = None) -> 'StageAuthenticatorDuo':
        """
        Get an existing StageAuthenticatorDuo resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _StageAuthenticatorDuoState.__new__(_StageAuthenticatorDuoState)

        __props__.__dict__["admin_integration_key"] = admin_integration_key
        __props__.__dict__["admin_secret_key"] = admin_secret_key
        __props__.__dict__["api_hostname"] = api_hostname
        __props__.__dict__["client_id"] = client_id
        __props__.__dict__["client_secret"] = client_secret
        __props__.__dict__["configure_flow"] = configure_flow
        __props__.__dict__["friendly_name"] = friendly_name
        __props__.__dict__["name"] = name
        __props__.__dict__["stage_authenticator_duo_id"] = stage_authenticator_duo_id
        return StageAuthenticatorDuo(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="adminIntegrationKey")
    def admin_integration_key(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "admin_integration_key")

    @property
    @pulumi.getter(name="adminSecretKey")
    def admin_secret_key(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "admin_secret_key")

    @property
    @pulumi.getter(name="apiHostname")
    def api_hostname(self) -> pulumi.Output[str]:
        return pulumi.get(self, "api_hostname")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> pulumi.Output[str]:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="configureFlow")
    def configure_flow(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "configure_flow")

    @property
    @pulumi.getter(name="friendlyName")
    def friendly_name(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "friendly_name")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="stageAuthenticatorDuoId")
    def stage_authenticator_duo_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "stage_authenticator_duo_id")

