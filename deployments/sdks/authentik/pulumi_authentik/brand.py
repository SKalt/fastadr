# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['BrandArgs', 'Brand']

@pulumi.input_type
class BrandArgs:
    def __init__(__self__, *,
                 domain: pulumi.Input[str],
                 attributes: Optional[pulumi.Input[str]] = None,
                 brand_id: Optional[pulumi.Input[str]] = None,
                 branding_favicon: Optional[pulumi.Input[str]] = None,
                 branding_logo: Optional[pulumi.Input[str]] = None,
                 branding_title: Optional[pulumi.Input[str]] = None,
                 default: Optional[pulumi.Input[bool]] = None,
                 default_application: Optional[pulumi.Input[str]] = None,
                 flow_authentication: Optional[pulumi.Input[str]] = None,
                 flow_device_code: Optional[pulumi.Input[str]] = None,
                 flow_invalidation: Optional[pulumi.Input[str]] = None,
                 flow_recovery: Optional[pulumi.Input[str]] = None,
                 flow_unenrollment: Optional[pulumi.Input[str]] = None,
                 flow_user_settings: Optional[pulumi.Input[str]] = None,
                 web_certificate: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Brand resource.
        :param pulumi.Input[str] attributes: JSON format expected. Use jsonencode() to pass objects. Defaults to `{}`.
        :param pulumi.Input[str] branding_title: Defaults to `authentik`.
        :param pulumi.Input[bool] default: Defaults to `false`.
        """
        pulumi.set(__self__, "domain", domain)
        if attributes is not None:
            pulumi.set(__self__, "attributes", attributes)
        if brand_id is not None:
            pulumi.set(__self__, "brand_id", brand_id)
        if branding_favicon is not None:
            pulumi.set(__self__, "branding_favicon", branding_favicon)
        if branding_logo is not None:
            pulumi.set(__self__, "branding_logo", branding_logo)
        if branding_title is not None:
            pulumi.set(__self__, "branding_title", branding_title)
        if default is not None:
            pulumi.set(__self__, "default", default)
        if default_application is not None:
            pulumi.set(__self__, "default_application", default_application)
        if flow_authentication is not None:
            pulumi.set(__self__, "flow_authentication", flow_authentication)
        if flow_device_code is not None:
            pulumi.set(__self__, "flow_device_code", flow_device_code)
        if flow_invalidation is not None:
            pulumi.set(__self__, "flow_invalidation", flow_invalidation)
        if flow_recovery is not None:
            pulumi.set(__self__, "flow_recovery", flow_recovery)
        if flow_unenrollment is not None:
            pulumi.set(__self__, "flow_unenrollment", flow_unenrollment)
        if flow_user_settings is not None:
            pulumi.set(__self__, "flow_user_settings", flow_user_settings)
        if web_certificate is not None:
            pulumi.set(__self__, "web_certificate", web_certificate)

    @property
    @pulumi.getter
    def domain(self) -> pulumi.Input[str]:
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: pulumi.Input[str]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter
    def attributes(self) -> Optional[pulumi.Input[str]]:
        """
        JSON format expected. Use jsonencode() to pass objects. Defaults to `{}`.
        """
        return pulumi.get(self, "attributes")

    @attributes.setter
    def attributes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "attributes", value)

    @property
    @pulumi.getter(name="brandId")
    def brand_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "brand_id")

    @brand_id.setter
    def brand_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "brand_id", value)

    @property
    @pulumi.getter(name="brandingFavicon")
    def branding_favicon(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "branding_favicon")

    @branding_favicon.setter
    def branding_favicon(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "branding_favicon", value)

    @property
    @pulumi.getter(name="brandingLogo")
    def branding_logo(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "branding_logo")

    @branding_logo.setter
    def branding_logo(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "branding_logo", value)

    @property
    @pulumi.getter(name="brandingTitle")
    def branding_title(self) -> Optional[pulumi.Input[str]]:
        """
        Defaults to `authentik`.
        """
        return pulumi.get(self, "branding_title")

    @branding_title.setter
    def branding_title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "branding_title", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[bool]]:
        """
        Defaults to `false`.
        """
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter(name="defaultApplication")
    def default_application(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_application")

    @default_application.setter
    def default_application(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_application", value)

    @property
    @pulumi.getter(name="flowAuthentication")
    def flow_authentication(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "flow_authentication")

    @flow_authentication.setter
    def flow_authentication(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "flow_authentication", value)

    @property
    @pulumi.getter(name="flowDeviceCode")
    def flow_device_code(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "flow_device_code")

    @flow_device_code.setter
    def flow_device_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "flow_device_code", value)

    @property
    @pulumi.getter(name="flowInvalidation")
    def flow_invalidation(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "flow_invalidation")

    @flow_invalidation.setter
    def flow_invalidation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "flow_invalidation", value)

    @property
    @pulumi.getter(name="flowRecovery")
    def flow_recovery(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "flow_recovery")

    @flow_recovery.setter
    def flow_recovery(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "flow_recovery", value)

    @property
    @pulumi.getter(name="flowUnenrollment")
    def flow_unenrollment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "flow_unenrollment")

    @flow_unenrollment.setter
    def flow_unenrollment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "flow_unenrollment", value)

    @property
    @pulumi.getter(name="flowUserSettings")
    def flow_user_settings(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "flow_user_settings")

    @flow_user_settings.setter
    def flow_user_settings(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "flow_user_settings", value)

    @property
    @pulumi.getter(name="webCertificate")
    def web_certificate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "web_certificate")

    @web_certificate.setter
    def web_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "web_certificate", value)


@pulumi.input_type
class _BrandState:
    def __init__(__self__, *,
                 attributes: Optional[pulumi.Input[str]] = None,
                 brand_id: Optional[pulumi.Input[str]] = None,
                 branding_favicon: Optional[pulumi.Input[str]] = None,
                 branding_logo: Optional[pulumi.Input[str]] = None,
                 branding_title: Optional[pulumi.Input[str]] = None,
                 default: Optional[pulumi.Input[bool]] = None,
                 default_application: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 flow_authentication: Optional[pulumi.Input[str]] = None,
                 flow_device_code: Optional[pulumi.Input[str]] = None,
                 flow_invalidation: Optional[pulumi.Input[str]] = None,
                 flow_recovery: Optional[pulumi.Input[str]] = None,
                 flow_unenrollment: Optional[pulumi.Input[str]] = None,
                 flow_user_settings: Optional[pulumi.Input[str]] = None,
                 web_certificate: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Brand resources.
        :param pulumi.Input[str] attributes: JSON format expected. Use jsonencode() to pass objects. Defaults to `{}`.
        :param pulumi.Input[str] branding_title: Defaults to `authentik`.
        :param pulumi.Input[bool] default: Defaults to `false`.
        """
        if attributes is not None:
            pulumi.set(__self__, "attributes", attributes)
        if brand_id is not None:
            pulumi.set(__self__, "brand_id", brand_id)
        if branding_favicon is not None:
            pulumi.set(__self__, "branding_favicon", branding_favicon)
        if branding_logo is not None:
            pulumi.set(__self__, "branding_logo", branding_logo)
        if branding_title is not None:
            pulumi.set(__self__, "branding_title", branding_title)
        if default is not None:
            pulumi.set(__self__, "default", default)
        if default_application is not None:
            pulumi.set(__self__, "default_application", default_application)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if flow_authentication is not None:
            pulumi.set(__self__, "flow_authentication", flow_authentication)
        if flow_device_code is not None:
            pulumi.set(__self__, "flow_device_code", flow_device_code)
        if flow_invalidation is not None:
            pulumi.set(__self__, "flow_invalidation", flow_invalidation)
        if flow_recovery is not None:
            pulumi.set(__self__, "flow_recovery", flow_recovery)
        if flow_unenrollment is not None:
            pulumi.set(__self__, "flow_unenrollment", flow_unenrollment)
        if flow_user_settings is not None:
            pulumi.set(__self__, "flow_user_settings", flow_user_settings)
        if web_certificate is not None:
            pulumi.set(__self__, "web_certificate", web_certificate)

    @property
    @pulumi.getter
    def attributes(self) -> Optional[pulumi.Input[str]]:
        """
        JSON format expected. Use jsonencode() to pass objects. Defaults to `{}`.
        """
        return pulumi.get(self, "attributes")

    @attributes.setter
    def attributes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "attributes", value)

    @property
    @pulumi.getter(name="brandId")
    def brand_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "brand_id")

    @brand_id.setter
    def brand_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "brand_id", value)

    @property
    @pulumi.getter(name="brandingFavicon")
    def branding_favicon(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "branding_favicon")

    @branding_favicon.setter
    def branding_favicon(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "branding_favicon", value)

    @property
    @pulumi.getter(name="brandingLogo")
    def branding_logo(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "branding_logo")

    @branding_logo.setter
    def branding_logo(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "branding_logo", value)

    @property
    @pulumi.getter(name="brandingTitle")
    def branding_title(self) -> Optional[pulumi.Input[str]]:
        """
        Defaults to `authentik`.
        """
        return pulumi.get(self, "branding_title")

    @branding_title.setter
    def branding_title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "branding_title", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[bool]]:
        """
        Defaults to `false`.
        """
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter(name="defaultApplication")
    def default_application(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_application")

    @default_application.setter
    def default_application(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_application", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter(name="flowAuthentication")
    def flow_authentication(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "flow_authentication")

    @flow_authentication.setter
    def flow_authentication(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "flow_authentication", value)

    @property
    @pulumi.getter(name="flowDeviceCode")
    def flow_device_code(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "flow_device_code")

    @flow_device_code.setter
    def flow_device_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "flow_device_code", value)

    @property
    @pulumi.getter(name="flowInvalidation")
    def flow_invalidation(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "flow_invalidation")

    @flow_invalidation.setter
    def flow_invalidation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "flow_invalidation", value)

    @property
    @pulumi.getter(name="flowRecovery")
    def flow_recovery(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "flow_recovery")

    @flow_recovery.setter
    def flow_recovery(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "flow_recovery", value)

    @property
    @pulumi.getter(name="flowUnenrollment")
    def flow_unenrollment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "flow_unenrollment")

    @flow_unenrollment.setter
    def flow_unenrollment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "flow_unenrollment", value)

    @property
    @pulumi.getter(name="flowUserSettings")
    def flow_user_settings(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "flow_user_settings")

    @flow_user_settings.setter
    def flow_user_settings(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "flow_user_settings", value)

    @property
    @pulumi.getter(name="webCertificate")
    def web_certificate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "web_certificate")

    @web_certificate.setter
    def web_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "web_certificate", value)


class Brand(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 attributes: Optional[pulumi.Input[str]] = None,
                 brand_id: Optional[pulumi.Input[str]] = None,
                 branding_favicon: Optional[pulumi.Input[str]] = None,
                 branding_logo: Optional[pulumi.Input[str]] = None,
                 branding_title: Optional[pulumi.Input[str]] = None,
                 default: Optional[pulumi.Input[bool]] = None,
                 default_application: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 flow_authentication: Optional[pulumi.Input[str]] = None,
                 flow_device_code: Optional[pulumi.Input[str]] = None,
                 flow_invalidation: Optional[pulumi.Input[str]] = None,
                 flow_recovery: Optional[pulumi.Input[str]] = None,
                 flow_unenrollment: Optional[pulumi.Input[str]] = None,
                 flow_user_settings: Optional[pulumi.Input[str]] = None,
                 web_certificate: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a Brand resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] attributes: JSON format expected. Use jsonencode() to pass objects. Defaults to `{}`.
        :param pulumi.Input[str] branding_title: Defaults to `authentik`.
        :param pulumi.Input[bool] default: Defaults to `false`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: BrandArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Brand resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param BrandArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(BrandArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 attributes: Optional[pulumi.Input[str]] = None,
                 brand_id: Optional[pulumi.Input[str]] = None,
                 branding_favicon: Optional[pulumi.Input[str]] = None,
                 branding_logo: Optional[pulumi.Input[str]] = None,
                 branding_title: Optional[pulumi.Input[str]] = None,
                 default: Optional[pulumi.Input[bool]] = None,
                 default_application: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 flow_authentication: Optional[pulumi.Input[str]] = None,
                 flow_device_code: Optional[pulumi.Input[str]] = None,
                 flow_invalidation: Optional[pulumi.Input[str]] = None,
                 flow_recovery: Optional[pulumi.Input[str]] = None,
                 flow_unenrollment: Optional[pulumi.Input[str]] = None,
                 flow_user_settings: Optional[pulumi.Input[str]] = None,
                 web_certificate: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = BrandArgs.__new__(BrandArgs)

            __props__.__dict__["attributes"] = attributes
            __props__.__dict__["brand_id"] = brand_id
            __props__.__dict__["branding_favicon"] = branding_favicon
            __props__.__dict__["branding_logo"] = branding_logo
            __props__.__dict__["branding_title"] = branding_title
            __props__.__dict__["default"] = default
            __props__.__dict__["default_application"] = default_application
            if domain is None and not opts.urn:
                raise TypeError("Missing required property 'domain'")
            __props__.__dict__["domain"] = domain
            __props__.__dict__["flow_authentication"] = flow_authentication
            __props__.__dict__["flow_device_code"] = flow_device_code
            __props__.__dict__["flow_invalidation"] = flow_invalidation
            __props__.__dict__["flow_recovery"] = flow_recovery
            __props__.__dict__["flow_unenrollment"] = flow_unenrollment
            __props__.__dict__["flow_user_settings"] = flow_user_settings
            __props__.__dict__["web_certificate"] = web_certificate
        super(Brand, __self__).__init__(
            'authentik:index/brand:Brand',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            attributes: Optional[pulumi.Input[str]] = None,
            brand_id: Optional[pulumi.Input[str]] = None,
            branding_favicon: Optional[pulumi.Input[str]] = None,
            branding_logo: Optional[pulumi.Input[str]] = None,
            branding_title: Optional[pulumi.Input[str]] = None,
            default: Optional[pulumi.Input[bool]] = None,
            default_application: Optional[pulumi.Input[str]] = None,
            domain: Optional[pulumi.Input[str]] = None,
            flow_authentication: Optional[pulumi.Input[str]] = None,
            flow_device_code: Optional[pulumi.Input[str]] = None,
            flow_invalidation: Optional[pulumi.Input[str]] = None,
            flow_recovery: Optional[pulumi.Input[str]] = None,
            flow_unenrollment: Optional[pulumi.Input[str]] = None,
            flow_user_settings: Optional[pulumi.Input[str]] = None,
            web_certificate: Optional[pulumi.Input[str]] = None) -> 'Brand':
        """
        Get an existing Brand resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] attributes: JSON format expected. Use jsonencode() to pass objects. Defaults to `{}`.
        :param pulumi.Input[str] branding_title: Defaults to `authentik`.
        :param pulumi.Input[bool] default: Defaults to `false`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _BrandState.__new__(_BrandState)

        __props__.__dict__["attributes"] = attributes
        __props__.__dict__["brand_id"] = brand_id
        __props__.__dict__["branding_favicon"] = branding_favicon
        __props__.__dict__["branding_logo"] = branding_logo
        __props__.__dict__["branding_title"] = branding_title
        __props__.__dict__["default"] = default
        __props__.__dict__["default_application"] = default_application
        __props__.__dict__["domain"] = domain
        __props__.__dict__["flow_authentication"] = flow_authentication
        __props__.__dict__["flow_device_code"] = flow_device_code
        __props__.__dict__["flow_invalidation"] = flow_invalidation
        __props__.__dict__["flow_recovery"] = flow_recovery
        __props__.__dict__["flow_unenrollment"] = flow_unenrollment
        __props__.__dict__["flow_user_settings"] = flow_user_settings
        __props__.__dict__["web_certificate"] = web_certificate
        return Brand(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def attributes(self) -> pulumi.Output[Optional[str]]:
        """
        JSON format expected. Use jsonencode() to pass objects. Defaults to `{}`.
        """
        return pulumi.get(self, "attributes")

    @property
    @pulumi.getter(name="brandId")
    def brand_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "brand_id")

    @property
    @pulumi.getter(name="brandingFavicon")
    def branding_favicon(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "branding_favicon")

    @property
    @pulumi.getter(name="brandingLogo")
    def branding_logo(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "branding_logo")

    @property
    @pulumi.getter(name="brandingTitle")
    def branding_title(self) -> pulumi.Output[Optional[str]]:
        """
        Defaults to `authentik`.
        """
        return pulumi.get(self, "branding_title")

    @property
    @pulumi.getter
    def default(self) -> pulumi.Output[Optional[bool]]:
        """
        Defaults to `false`.
        """
        return pulumi.get(self, "default")

    @property
    @pulumi.getter(name="defaultApplication")
    def default_application(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "default_application")

    @property
    @pulumi.getter
    def domain(self) -> pulumi.Output[str]:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="flowAuthentication")
    def flow_authentication(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "flow_authentication")

    @property
    @pulumi.getter(name="flowDeviceCode")
    def flow_device_code(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "flow_device_code")

    @property
    @pulumi.getter(name="flowInvalidation")
    def flow_invalidation(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "flow_invalidation")

    @property
    @pulumi.getter(name="flowRecovery")
    def flow_recovery(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "flow_recovery")

    @property
    @pulumi.getter(name="flowUnenrollment")
    def flow_unenrollment(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "flow_unenrollment")

    @property
    @pulumi.getter(name="flowUserSettings")
    def flow_user_settings(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "flow_user_settings")

    @property
    @pulumi.getter(name="webCertificate")
    def web_certificate(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "web_certificate")

