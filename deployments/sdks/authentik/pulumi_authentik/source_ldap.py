# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['SourceLdapArgs', 'SourceLdap']

@pulumi.input_type
class SourceLdapArgs:
    def __init__(__self__, *,
                 base_dn: pulumi.Input[str],
                 bind_cn: pulumi.Input[str],
                 bind_password: pulumi.Input[str],
                 server_uri: pulumi.Input[str],
                 slug: pulumi.Input[str],
                 additional_group_dn: Optional[pulumi.Input[str]] = None,
                 additional_user_dn: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 group_membership_field: Optional[pulumi.Input[str]] = None,
                 group_object_filter: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 object_uniqueness_field: Optional[pulumi.Input[str]] = None,
                 password_login_update_internal_password: Optional[pulumi.Input[bool]] = None,
                 property_mappings: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 property_mappings_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 source_ldap_id: Optional[pulumi.Input[str]] = None,
                 start_tls: Optional[pulumi.Input[bool]] = None,
                 sync_groups: Optional[pulumi.Input[bool]] = None,
                 sync_parent_group: Optional[pulumi.Input[str]] = None,
                 sync_users: Optional[pulumi.Input[bool]] = None,
                 sync_users_password: Optional[pulumi.Input[bool]] = None,
                 user_object_filter: Optional[pulumi.Input[str]] = None,
                 user_path_template: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a SourceLdap resource.
        :param pulumi.Input[str] additional_group_dn: Defaults to ``.
        :param pulumi.Input[str] additional_user_dn: Defaults to ``.
        :param pulumi.Input[bool] enabled: Defaults to `true`.
        :param pulumi.Input[str] group_membership_field: Defaults to `member`.
        :param pulumi.Input[str] group_object_filter: Defaults to `(objectClass=group)`.
        :param pulumi.Input[str] object_uniqueness_field: Defaults to `objectSid`.
        :param pulumi.Input[bool] password_login_update_internal_password: Defaults to `false`.
        :param pulumi.Input[bool] start_tls: Defaults to `true`.
        :param pulumi.Input[bool] sync_groups: Defaults to `true`.
        :param pulumi.Input[bool] sync_users: Defaults to `true`.
        :param pulumi.Input[bool] sync_users_password: Defaults to `true`.
        :param pulumi.Input[str] user_object_filter: Defaults to `(objectClass=person)`.
        :param pulumi.Input[str] user_path_template: Defaults to `goauthentik.io/sources/%(slug)s`.
        :param pulumi.Input[str] uuid: Generated.
        """
        pulumi.set(__self__, "base_dn", base_dn)
        pulumi.set(__self__, "bind_cn", bind_cn)
        pulumi.set(__self__, "bind_password", bind_password)
        pulumi.set(__self__, "server_uri", server_uri)
        pulumi.set(__self__, "slug", slug)
        if additional_group_dn is not None:
            pulumi.set(__self__, "additional_group_dn", additional_group_dn)
        if additional_user_dn is not None:
            pulumi.set(__self__, "additional_user_dn", additional_user_dn)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if group_membership_field is not None:
            pulumi.set(__self__, "group_membership_field", group_membership_field)
        if group_object_filter is not None:
            pulumi.set(__self__, "group_object_filter", group_object_filter)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if object_uniqueness_field is not None:
            pulumi.set(__self__, "object_uniqueness_field", object_uniqueness_field)
        if password_login_update_internal_password is not None:
            pulumi.set(__self__, "password_login_update_internal_password", password_login_update_internal_password)
        if property_mappings is not None:
            pulumi.set(__self__, "property_mappings", property_mappings)
        if property_mappings_groups is not None:
            pulumi.set(__self__, "property_mappings_groups", property_mappings_groups)
        if source_ldap_id is not None:
            pulumi.set(__self__, "source_ldap_id", source_ldap_id)
        if start_tls is not None:
            pulumi.set(__self__, "start_tls", start_tls)
        if sync_groups is not None:
            pulumi.set(__self__, "sync_groups", sync_groups)
        if sync_parent_group is not None:
            pulumi.set(__self__, "sync_parent_group", sync_parent_group)
        if sync_users is not None:
            pulumi.set(__self__, "sync_users", sync_users)
        if sync_users_password is not None:
            pulumi.set(__self__, "sync_users_password", sync_users_password)
        if user_object_filter is not None:
            pulumi.set(__self__, "user_object_filter", user_object_filter)
        if user_path_template is not None:
            pulumi.set(__self__, "user_path_template", user_path_template)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="baseDn")
    def base_dn(self) -> pulumi.Input[str]:
        return pulumi.get(self, "base_dn")

    @base_dn.setter
    def base_dn(self, value: pulumi.Input[str]):
        pulumi.set(self, "base_dn", value)

    @property
    @pulumi.getter(name="bindCn")
    def bind_cn(self) -> pulumi.Input[str]:
        return pulumi.get(self, "bind_cn")

    @bind_cn.setter
    def bind_cn(self, value: pulumi.Input[str]):
        pulumi.set(self, "bind_cn", value)

    @property
    @pulumi.getter(name="bindPassword")
    def bind_password(self) -> pulumi.Input[str]:
        return pulumi.get(self, "bind_password")

    @bind_password.setter
    def bind_password(self, value: pulumi.Input[str]):
        pulumi.set(self, "bind_password", value)

    @property
    @pulumi.getter(name="serverUri")
    def server_uri(self) -> pulumi.Input[str]:
        return pulumi.get(self, "server_uri")

    @server_uri.setter
    def server_uri(self, value: pulumi.Input[str]):
        pulumi.set(self, "server_uri", value)

    @property
    @pulumi.getter
    def slug(self) -> pulumi.Input[str]:
        return pulumi.get(self, "slug")

    @slug.setter
    def slug(self, value: pulumi.Input[str]):
        pulumi.set(self, "slug", value)

    @property
    @pulumi.getter(name="additionalGroupDn")
    def additional_group_dn(self) -> Optional[pulumi.Input[str]]:
        """
        Defaults to ``.
        """
        return pulumi.get(self, "additional_group_dn")

    @additional_group_dn.setter
    def additional_group_dn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_group_dn", value)

    @property
    @pulumi.getter(name="additionalUserDn")
    def additional_user_dn(self) -> Optional[pulumi.Input[str]]:
        """
        Defaults to ``.
        """
        return pulumi.get(self, "additional_user_dn")

    @additional_user_dn.setter
    def additional_user_dn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_user_dn", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Defaults to `true`.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="groupMembershipField")
    def group_membership_field(self) -> Optional[pulumi.Input[str]]:
        """
        Defaults to `member`.
        """
        return pulumi.get(self, "group_membership_field")

    @group_membership_field.setter
    def group_membership_field(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_membership_field", value)

    @property
    @pulumi.getter(name="groupObjectFilter")
    def group_object_filter(self) -> Optional[pulumi.Input[str]]:
        """
        Defaults to `(objectClass=group)`.
        """
        return pulumi.get(self, "group_object_filter")

    @group_object_filter.setter
    def group_object_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_object_filter", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="objectUniquenessField")
    def object_uniqueness_field(self) -> Optional[pulumi.Input[str]]:
        """
        Defaults to `objectSid`.
        """
        return pulumi.get(self, "object_uniqueness_field")

    @object_uniqueness_field.setter
    def object_uniqueness_field(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "object_uniqueness_field", value)

    @property
    @pulumi.getter(name="passwordLoginUpdateInternalPassword")
    def password_login_update_internal_password(self) -> Optional[pulumi.Input[bool]]:
        """
        Defaults to `false`.
        """
        return pulumi.get(self, "password_login_update_internal_password")

    @password_login_update_internal_password.setter
    def password_login_update_internal_password(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "password_login_update_internal_password", value)

    @property
    @pulumi.getter(name="propertyMappings")
    def property_mappings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "property_mappings")

    @property_mappings.setter
    def property_mappings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "property_mappings", value)

    @property
    @pulumi.getter(name="propertyMappingsGroups")
    def property_mappings_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "property_mappings_groups")

    @property_mappings_groups.setter
    def property_mappings_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "property_mappings_groups", value)

    @property
    @pulumi.getter(name="sourceLdapId")
    def source_ldap_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_ldap_id")

    @source_ldap_id.setter
    def source_ldap_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_ldap_id", value)

    @property
    @pulumi.getter(name="startTls")
    def start_tls(self) -> Optional[pulumi.Input[bool]]:
        """
        Defaults to `true`.
        """
        return pulumi.get(self, "start_tls")

    @start_tls.setter
    def start_tls(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "start_tls", value)

    @property
    @pulumi.getter(name="syncGroups")
    def sync_groups(self) -> Optional[pulumi.Input[bool]]:
        """
        Defaults to `true`.
        """
        return pulumi.get(self, "sync_groups")

    @sync_groups.setter
    def sync_groups(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "sync_groups", value)

    @property
    @pulumi.getter(name="syncParentGroup")
    def sync_parent_group(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sync_parent_group")

    @sync_parent_group.setter
    def sync_parent_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sync_parent_group", value)

    @property
    @pulumi.getter(name="syncUsers")
    def sync_users(self) -> Optional[pulumi.Input[bool]]:
        """
        Defaults to `true`.
        """
        return pulumi.get(self, "sync_users")

    @sync_users.setter
    def sync_users(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "sync_users", value)

    @property
    @pulumi.getter(name="syncUsersPassword")
    def sync_users_password(self) -> Optional[pulumi.Input[bool]]:
        """
        Defaults to `true`.
        """
        return pulumi.get(self, "sync_users_password")

    @sync_users_password.setter
    def sync_users_password(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "sync_users_password", value)

    @property
    @pulumi.getter(name="userObjectFilter")
    def user_object_filter(self) -> Optional[pulumi.Input[str]]:
        """
        Defaults to `(objectClass=person)`.
        """
        return pulumi.get(self, "user_object_filter")

    @user_object_filter.setter
    def user_object_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_object_filter", value)

    @property
    @pulumi.getter(name="userPathTemplate")
    def user_path_template(self) -> Optional[pulumi.Input[str]]:
        """
        Defaults to `goauthentik.io/sources/%(slug)s`.
        """
        return pulumi.get(self, "user_path_template")

    @user_path_template.setter
    def user_path_template(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_path_template", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        """
        Generated.
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class _SourceLdapState:
    def __init__(__self__, *,
                 additional_group_dn: Optional[pulumi.Input[str]] = None,
                 additional_user_dn: Optional[pulumi.Input[str]] = None,
                 base_dn: Optional[pulumi.Input[str]] = None,
                 bind_cn: Optional[pulumi.Input[str]] = None,
                 bind_password: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 group_membership_field: Optional[pulumi.Input[str]] = None,
                 group_object_filter: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 object_uniqueness_field: Optional[pulumi.Input[str]] = None,
                 password_login_update_internal_password: Optional[pulumi.Input[bool]] = None,
                 property_mappings: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 property_mappings_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 server_uri: Optional[pulumi.Input[str]] = None,
                 slug: Optional[pulumi.Input[str]] = None,
                 source_ldap_id: Optional[pulumi.Input[str]] = None,
                 start_tls: Optional[pulumi.Input[bool]] = None,
                 sync_groups: Optional[pulumi.Input[bool]] = None,
                 sync_parent_group: Optional[pulumi.Input[str]] = None,
                 sync_users: Optional[pulumi.Input[bool]] = None,
                 sync_users_password: Optional[pulumi.Input[bool]] = None,
                 user_object_filter: Optional[pulumi.Input[str]] = None,
                 user_path_template: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering SourceLdap resources.
        :param pulumi.Input[str] additional_group_dn: Defaults to ``.
        :param pulumi.Input[str] additional_user_dn: Defaults to ``.
        :param pulumi.Input[bool] enabled: Defaults to `true`.
        :param pulumi.Input[str] group_membership_field: Defaults to `member`.
        :param pulumi.Input[str] group_object_filter: Defaults to `(objectClass=group)`.
        :param pulumi.Input[str] object_uniqueness_field: Defaults to `objectSid`.
        :param pulumi.Input[bool] password_login_update_internal_password: Defaults to `false`.
        :param pulumi.Input[bool] start_tls: Defaults to `true`.
        :param pulumi.Input[bool] sync_groups: Defaults to `true`.
        :param pulumi.Input[bool] sync_users: Defaults to `true`.
        :param pulumi.Input[bool] sync_users_password: Defaults to `true`.
        :param pulumi.Input[str] user_object_filter: Defaults to `(objectClass=person)`.
        :param pulumi.Input[str] user_path_template: Defaults to `goauthentik.io/sources/%(slug)s`.
        :param pulumi.Input[str] uuid: Generated.
        """
        if additional_group_dn is not None:
            pulumi.set(__self__, "additional_group_dn", additional_group_dn)
        if additional_user_dn is not None:
            pulumi.set(__self__, "additional_user_dn", additional_user_dn)
        if base_dn is not None:
            pulumi.set(__self__, "base_dn", base_dn)
        if bind_cn is not None:
            pulumi.set(__self__, "bind_cn", bind_cn)
        if bind_password is not None:
            pulumi.set(__self__, "bind_password", bind_password)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if group_membership_field is not None:
            pulumi.set(__self__, "group_membership_field", group_membership_field)
        if group_object_filter is not None:
            pulumi.set(__self__, "group_object_filter", group_object_filter)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if object_uniqueness_field is not None:
            pulumi.set(__self__, "object_uniqueness_field", object_uniqueness_field)
        if password_login_update_internal_password is not None:
            pulumi.set(__self__, "password_login_update_internal_password", password_login_update_internal_password)
        if property_mappings is not None:
            pulumi.set(__self__, "property_mappings", property_mappings)
        if property_mappings_groups is not None:
            pulumi.set(__self__, "property_mappings_groups", property_mappings_groups)
        if server_uri is not None:
            pulumi.set(__self__, "server_uri", server_uri)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)
        if source_ldap_id is not None:
            pulumi.set(__self__, "source_ldap_id", source_ldap_id)
        if start_tls is not None:
            pulumi.set(__self__, "start_tls", start_tls)
        if sync_groups is not None:
            pulumi.set(__self__, "sync_groups", sync_groups)
        if sync_parent_group is not None:
            pulumi.set(__self__, "sync_parent_group", sync_parent_group)
        if sync_users is not None:
            pulumi.set(__self__, "sync_users", sync_users)
        if sync_users_password is not None:
            pulumi.set(__self__, "sync_users_password", sync_users_password)
        if user_object_filter is not None:
            pulumi.set(__self__, "user_object_filter", user_object_filter)
        if user_path_template is not None:
            pulumi.set(__self__, "user_path_template", user_path_template)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="additionalGroupDn")
    def additional_group_dn(self) -> Optional[pulumi.Input[str]]:
        """
        Defaults to ``.
        """
        return pulumi.get(self, "additional_group_dn")

    @additional_group_dn.setter
    def additional_group_dn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_group_dn", value)

    @property
    @pulumi.getter(name="additionalUserDn")
    def additional_user_dn(self) -> Optional[pulumi.Input[str]]:
        """
        Defaults to ``.
        """
        return pulumi.get(self, "additional_user_dn")

    @additional_user_dn.setter
    def additional_user_dn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_user_dn", value)

    @property
    @pulumi.getter(name="baseDn")
    def base_dn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "base_dn")

    @base_dn.setter
    def base_dn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "base_dn", value)

    @property
    @pulumi.getter(name="bindCn")
    def bind_cn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bind_cn")

    @bind_cn.setter
    def bind_cn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bind_cn", value)

    @property
    @pulumi.getter(name="bindPassword")
    def bind_password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bind_password")

    @bind_password.setter
    def bind_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bind_password", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Defaults to `true`.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="groupMembershipField")
    def group_membership_field(self) -> Optional[pulumi.Input[str]]:
        """
        Defaults to `member`.
        """
        return pulumi.get(self, "group_membership_field")

    @group_membership_field.setter
    def group_membership_field(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_membership_field", value)

    @property
    @pulumi.getter(name="groupObjectFilter")
    def group_object_filter(self) -> Optional[pulumi.Input[str]]:
        """
        Defaults to `(objectClass=group)`.
        """
        return pulumi.get(self, "group_object_filter")

    @group_object_filter.setter
    def group_object_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_object_filter", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="objectUniquenessField")
    def object_uniqueness_field(self) -> Optional[pulumi.Input[str]]:
        """
        Defaults to `objectSid`.
        """
        return pulumi.get(self, "object_uniqueness_field")

    @object_uniqueness_field.setter
    def object_uniqueness_field(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "object_uniqueness_field", value)

    @property
    @pulumi.getter(name="passwordLoginUpdateInternalPassword")
    def password_login_update_internal_password(self) -> Optional[pulumi.Input[bool]]:
        """
        Defaults to `false`.
        """
        return pulumi.get(self, "password_login_update_internal_password")

    @password_login_update_internal_password.setter
    def password_login_update_internal_password(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "password_login_update_internal_password", value)

    @property
    @pulumi.getter(name="propertyMappings")
    def property_mappings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "property_mappings")

    @property_mappings.setter
    def property_mappings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "property_mappings", value)

    @property
    @pulumi.getter(name="propertyMappingsGroups")
    def property_mappings_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "property_mappings_groups")

    @property_mappings_groups.setter
    def property_mappings_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "property_mappings_groups", value)

    @property
    @pulumi.getter(name="serverUri")
    def server_uri(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "server_uri")

    @server_uri.setter
    def server_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_uri", value)

    @property
    @pulumi.getter
    def slug(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "slug")

    @slug.setter
    def slug(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slug", value)

    @property
    @pulumi.getter(name="sourceLdapId")
    def source_ldap_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_ldap_id")

    @source_ldap_id.setter
    def source_ldap_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_ldap_id", value)

    @property
    @pulumi.getter(name="startTls")
    def start_tls(self) -> Optional[pulumi.Input[bool]]:
        """
        Defaults to `true`.
        """
        return pulumi.get(self, "start_tls")

    @start_tls.setter
    def start_tls(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "start_tls", value)

    @property
    @pulumi.getter(name="syncGroups")
    def sync_groups(self) -> Optional[pulumi.Input[bool]]:
        """
        Defaults to `true`.
        """
        return pulumi.get(self, "sync_groups")

    @sync_groups.setter
    def sync_groups(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "sync_groups", value)

    @property
    @pulumi.getter(name="syncParentGroup")
    def sync_parent_group(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sync_parent_group")

    @sync_parent_group.setter
    def sync_parent_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sync_parent_group", value)

    @property
    @pulumi.getter(name="syncUsers")
    def sync_users(self) -> Optional[pulumi.Input[bool]]:
        """
        Defaults to `true`.
        """
        return pulumi.get(self, "sync_users")

    @sync_users.setter
    def sync_users(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "sync_users", value)

    @property
    @pulumi.getter(name="syncUsersPassword")
    def sync_users_password(self) -> Optional[pulumi.Input[bool]]:
        """
        Defaults to `true`.
        """
        return pulumi.get(self, "sync_users_password")

    @sync_users_password.setter
    def sync_users_password(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "sync_users_password", value)

    @property
    @pulumi.getter(name="userObjectFilter")
    def user_object_filter(self) -> Optional[pulumi.Input[str]]:
        """
        Defaults to `(objectClass=person)`.
        """
        return pulumi.get(self, "user_object_filter")

    @user_object_filter.setter
    def user_object_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_object_filter", value)

    @property
    @pulumi.getter(name="userPathTemplate")
    def user_path_template(self) -> Optional[pulumi.Input[str]]:
        """
        Defaults to `goauthentik.io/sources/%(slug)s`.
        """
        return pulumi.get(self, "user_path_template")

    @user_path_template.setter
    def user_path_template(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_path_template", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        """
        Generated.
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)


class SourceLdap(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 additional_group_dn: Optional[pulumi.Input[str]] = None,
                 additional_user_dn: Optional[pulumi.Input[str]] = None,
                 base_dn: Optional[pulumi.Input[str]] = None,
                 bind_cn: Optional[pulumi.Input[str]] = None,
                 bind_password: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 group_membership_field: Optional[pulumi.Input[str]] = None,
                 group_object_filter: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 object_uniqueness_field: Optional[pulumi.Input[str]] = None,
                 password_login_update_internal_password: Optional[pulumi.Input[bool]] = None,
                 property_mappings: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 property_mappings_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 server_uri: Optional[pulumi.Input[str]] = None,
                 slug: Optional[pulumi.Input[str]] = None,
                 source_ldap_id: Optional[pulumi.Input[str]] = None,
                 start_tls: Optional[pulumi.Input[bool]] = None,
                 sync_groups: Optional[pulumi.Input[bool]] = None,
                 sync_parent_group: Optional[pulumi.Input[str]] = None,
                 sync_users: Optional[pulumi.Input[bool]] = None,
                 sync_users_password: Optional[pulumi.Input[bool]] = None,
                 user_object_filter: Optional[pulumi.Input[str]] = None,
                 user_path_template: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a SourceLdap resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] additional_group_dn: Defaults to ``.
        :param pulumi.Input[str] additional_user_dn: Defaults to ``.
        :param pulumi.Input[bool] enabled: Defaults to `true`.
        :param pulumi.Input[str] group_membership_field: Defaults to `member`.
        :param pulumi.Input[str] group_object_filter: Defaults to `(objectClass=group)`.
        :param pulumi.Input[str] object_uniqueness_field: Defaults to `objectSid`.
        :param pulumi.Input[bool] password_login_update_internal_password: Defaults to `false`.
        :param pulumi.Input[bool] start_tls: Defaults to `true`.
        :param pulumi.Input[bool] sync_groups: Defaults to `true`.
        :param pulumi.Input[bool] sync_users: Defaults to `true`.
        :param pulumi.Input[bool] sync_users_password: Defaults to `true`.
        :param pulumi.Input[str] user_object_filter: Defaults to `(objectClass=person)`.
        :param pulumi.Input[str] user_path_template: Defaults to `goauthentik.io/sources/%(slug)s`.
        :param pulumi.Input[str] uuid: Generated.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SourceLdapArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a SourceLdap resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param SourceLdapArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SourceLdapArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 additional_group_dn: Optional[pulumi.Input[str]] = None,
                 additional_user_dn: Optional[pulumi.Input[str]] = None,
                 base_dn: Optional[pulumi.Input[str]] = None,
                 bind_cn: Optional[pulumi.Input[str]] = None,
                 bind_password: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 group_membership_field: Optional[pulumi.Input[str]] = None,
                 group_object_filter: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 object_uniqueness_field: Optional[pulumi.Input[str]] = None,
                 password_login_update_internal_password: Optional[pulumi.Input[bool]] = None,
                 property_mappings: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 property_mappings_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 server_uri: Optional[pulumi.Input[str]] = None,
                 slug: Optional[pulumi.Input[str]] = None,
                 source_ldap_id: Optional[pulumi.Input[str]] = None,
                 start_tls: Optional[pulumi.Input[bool]] = None,
                 sync_groups: Optional[pulumi.Input[bool]] = None,
                 sync_parent_group: Optional[pulumi.Input[str]] = None,
                 sync_users: Optional[pulumi.Input[bool]] = None,
                 sync_users_password: Optional[pulumi.Input[bool]] = None,
                 user_object_filter: Optional[pulumi.Input[str]] = None,
                 user_path_template: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SourceLdapArgs.__new__(SourceLdapArgs)

            __props__.__dict__["additional_group_dn"] = additional_group_dn
            __props__.__dict__["additional_user_dn"] = additional_user_dn
            if base_dn is None and not opts.urn:
                raise TypeError("Missing required property 'base_dn'")
            __props__.__dict__["base_dn"] = base_dn
            if bind_cn is None and not opts.urn:
                raise TypeError("Missing required property 'bind_cn'")
            __props__.__dict__["bind_cn"] = bind_cn
            if bind_password is None and not opts.urn:
                raise TypeError("Missing required property 'bind_password'")
            __props__.__dict__["bind_password"] = None if bind_password is None else pulumi.Output.secret(bind_password)
            __props__.__dict__["enabled"] = enabled
            __props__.__dict__["group_membership_field"] = group_membership_field
            __props__.__dict__["group_object_filter"] = group_object_filter
            __props__.__dict__["name"] = name
            __props__.__dict__["object_uniqueness_field"] = object_uniqueness_field
            __props__.__dict__["password_login_update_internal_password"] = password_login_update_internal_password
            __props__.__dict__["property_mappings"] = property_mappings
            __props__.__dict__["property_mappings_groups"] = property_mappings_groups
            if server_uri is None and not opts.urn:
                raise TypeError("Missing required property 'server_uri'")
            __props__.__dict__["server_uri"] = server_uri
            if slug is None and not opts.urn:
                raise TypeError("Missing required property 'slug'")
            __props__.__dict__["slug"] = slug
            __props__.__dict__["source_ldap_id"] = source_ldap_id
            __props__.__dict__["start_tls"] = start_tls
            __props__.__dict__["sync_groups"] = sync_groups
            __props__.__dict__["sync_parent_group"] = sync_parent_group
            __props__.__dict__["sync_users"] = sync_users
            __props__.__dict__["sync_users_password"] = sync_users_password
            __props__.__dict__["user_object_filter"] = user_object_filter
            __props__.__dict__["user_path_template"] = user_path_template
            __props__.__dict__["uuid"] = uuid
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["bindPassword"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(SourceLdap, __self__).__init__(
            'authentik:index/sourceLdap:SourceLdap',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            additional_group_dn: Optional[pulumi.Input[str]] = None,
            additional_user_dn: Optional[pulumi.Input[str]] = None,
            base_dn: Optional[pulumi.Input[str]] = None,
            bind_cn: Optional[pulumi.Input[str]] = None,
            bind_password: Optional[pulumi.Input[str]] = None,
            enabled: Optional[pulumi.Input[bool]] = None,
            group_membership_field: Optional[pulumi.Input[str]] = None,
            group_object_filter: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            object_uniqueness_field: Optional[pulumi.Input[str]] = None,
            password_login_update_internal_password: Optional[pulumi.Input[bool]] = None,
            property_mappings: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            property_mappings_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            server_uri: Optional[pulumi.Input[str]] = None,
            slug: Optional[pulumi.Input[str]] = None,
            source_ldap_id: Optional[pulumi.Input[str]] = None,
            start_tls: Optional[pulumi.Input[bool]] = None,
            sync_groups: Optional[pulumi.Input[bool]] = None,
            sync_parent_group: Optional[pulumi.Input[str]] = None,
            sync_users: Optional[pulumi.Input[bool]] = None,
            sync_users_password: Optional[pulumi.Input[bool]] = None,
            user_object_filter: Optional[pulumi.Input[str]] = None,
            user_path_template: Optional[pulumi.Input[str]] = None,
            uuid: Optional[pulumi.Input[str]] = None) -> 'SourceLdap':
        """
        Get an existing SourceLdap resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] additional_group_dn: Defaults to ``.
        :param pulumi.Input[str] additional_user_dn: Defaults to ``.
        :param pulumi.Input[bool] enabled: Defaults to `true`.
        :param pulumi.Input[str] group_membership_field: Defaults to `member`.
        :param pulumi.Input[str] group_object_filter: Defaults to `(objectClass=group)`.
        :param pulumi.Input[str] object_uniqueness_field: Defaults to `objectSid`.
        :param pulumi.Input[bool] password_login_update_internal_password: Defaults to `false`.
        :param pulumi.Input[bool] start_tls: Defaults to `true`.
        :param pulumi.Input[bool] sync_groups: Defaults to `true`.
        :param pulumi.Input[bool] sync_users: Defaults to `true`.
        :param pulumi.Input[bool] sync_users_password: Defaults to `true`.
        :param pulumi.Input[str] user_object_filter: Defaults to `(objectClass=person)`.
        :param pulumi.Input[str] user_path_template: Defaults to `goauthentik.io/sources/%(slug)s`.
        :param pulumi.Input[str] uuid: Generated.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SourceLdapState.__new__(_SourceLdapState)

        __props__.__dict__["additional_group_dn"] = additional_group_dn
        __props__.__dict__["additional_user_dn"] = additional_user_dn
        __props__.__dict__["base_dn"] = base_dn
        __props__.__dict__["bind_cn"] = bind_cn
        __props__.__dict__["bind_password"] = bind_password
        __props__.__dict__["enabled"] = enabled
        __props__.__dict__["group_membership_field"] = group_membership_field
        __props__.__dict__["group_object_filter"] = group_object_filter
        __props__.__dict__["name"] = name
        __props__.__dict__["object_uniqueness_field"] = object_uniqueness_field
        __props__.__dict__["password_login_update_internal_password"] = password_login_update_internal_password
        __props__.__dict__["property_mappings"] = property_mappings
        __props__.__dict__["property_mappings_groups"] = property_mappings_groups
        __props__.__dict__["server_uri"] = server_uri
        __props__.__dict__["slug"] = slug
        __props__.__dict__["source_ldap_id"] = source_ldap_id
        __props__.__dict__["start_tls"] = start_tls
        __props__.__dict__["sync_groups"] = sync_groups
        __props__.__dict__["sync_parent_group"] = sync_parent_group
        __props__.__dict__["sync_users"] = sync_users
        __props__.__dict__["sync_users_password"] = sync_users_password
        __props__.__dict__["user_object_filter"] = user_object_filter
        __props__.__dict__["user_path_template"] = user_path_template
        __props__.__dict__["uuid"] = uuid
        return SourceLdap(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="additionalGroupDn")
    def additional_group_dn(self) -> pulumi.Output[Optional[str]]:
        """
        Defaults to ``.
        """
        return pulumi.get(self, "additional_group_dn")

    @property
    @pulumi.getter(name="additionalUserDn")
    def additional_user_dn(self) -> pulumi.Output[Optional[str]]:
        """
        Defaults to ``.
        """
        return pulumi.get(self, "additional_user_dn")

    @property
    @pulumi.getter(name="baseDn")
    def base_dn(self) -> pulumi.Output[str]:
        return pulumi.get(self, "base_dn")

    @property
    @pulumi.getter(name="bindCn")
    def bind_cn(self) -> pulumi.Output[str]:
        return pulumi.get(self, "bind_cn")

    @property
    @pulumi.getter(name="bindPassword")
    def bind_password(self) -> pulumi.Output[str]:
        return pulumi.get(self, "bind_password")

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        Defaults to `true`.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="groupMembershipField")
    def group_membership_field(self) -> pulumi.Output[Optional[str]]:
        """
        Defaults to `member`.
        """
        return pulumi.get(self, "group_membership_field")

    @property
    @pulumi.getter(name="groupObjectFilter")
    def group_object_filter(self) -> pulumi.Output[Optional[str]]:
        """
        Defaults to `(objectClass=group)`.
        """
        return pulumi.get(self, "group_object_filter")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="objectUniquenessField")
    def object_uniqueness_field(self) -> pulumi.Output[Optional[str]]:
        """
        Defaults to `objectSid`.
        """
        return pulumi.get(self, "object_uniqueness_field")

    @property
    @pulumi.getter(name="passwordLoginUpdateInternalPassword")
    def password_login_update_internal_password(self) -> pulumi.Output[Optional[bool]]:
        """
        Defaults to `false`.
        """
        return pulumi.get(self, "password_login_update_internal_password")

    @property
    @pulumi.getter(name="propertyMappings")
    def property_mappings(self) -> pulumi.Output[Optional[Sequence[str]]]:
        return pulumi.get(self, "property_mappings")

    @property
    @pulumi.getter(name="propertyMappingsGroups")
    def property_mappings_groups(self) -> pulumi.Output[Optional[Sequence[str]]]:
        return pulumi.get(self, "property_mappings_groups")

    @property
    @pulumi.getter(name="serverUri")
    def server_uri(self) -> pulumi.Output[str]:
        return pulumi.get(self, "server_uri")

    @property
    @pulumi.getter
    def slug(self) -> pulumi.Output[str]:
        return pulumi.get(self, "slug")

    @property
    @pulumi.getter(name="sourceLdapId")
    def source_ldap_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "source_ldap_id")

    @property
    @pulumi.getter(name="startTls")
    def start_tls(self) -> pulumi.Output[Optional[bool]]:
        """
        Defaults to `true`.
        """
        return pulumi.get(self, "start_tls")

    @property
    @pulumi.getter(name="syncGroups")
    def sync_groups(self) -> pulumi.Output[Optional[bool]]:
        """
        Defaults to `true`.
        """
        return pulumi.get(self, "sync_groups")

    @property
    @pulumi.getter(name="syncParentGroup")
    def sync_parent_group(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "sync_parent_group")

    @property
    @pulumi.getter(name="syncUsers")
    def sync_users(self) -> pulumi.Output[Optional[bool]]:
        """
        Defaults to `true`.
        """
        return pulumi.get(self, "sync_users")

    @property
    @pulumi.getter(name="syncUsersPassword")
    def sync_users_password(self) -> pulumi.Output[Optional[bool]]:
        """
        Defaults to `true`.
        """
        return pulumi.get(self, "sync_users_password")

    @property
    @pulumi.getter(name="userObjectFilter")
    def user_object_filter(self) -> pulumi.Output[Optional[str]]:
        """
        Defaults to `(objectClass=person)`.
        """
        return pulumi.get(self, "user_object_filter")

    @property
    @pulumi.getter(name="userPathTemplate")
    def user_path_template(self) -> pulumi.Output[Optional[str]]:
        """
        Defaults to `goauthentik.io/sources/%(slug)s`.
        """
        return pulumi.get(self, "user_path_template")

    @property
    @pulumi.getter
    def uuid(self) -> pulumi.Output[str]:
        """
        Generated.
        """
        return pulumi.get(self, "uuid")

