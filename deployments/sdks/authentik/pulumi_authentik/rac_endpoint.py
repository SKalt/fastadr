# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['RacEndpointArgs', 'RacEndpoint']

@pulumi.input_type
class RacEndpointArgs:
    def __init__(__self__, *,
                 host: pulumi.Input[str],
                 protocol: pulumi.Input[str],
                 protocol_provider: pulumi.Input[float],
                 maximum_connections: Optional[pulumi.Input[float]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 property_mappings: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 rac_endpoint_id: Optional[pulumi.Input[str]] = None,
                 settings: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a RacEndpoint resource.
        :param pulumi.Input[str] protocol: Allowed values: - `rdp` - `vnc` - `ssh`
        :param pulumi.Input[float] maximum_connections: Defaults to `0`.
        :param pulumi.Input[str] settings: JSON format expected. Use jsonencode() to pass objects. Defaults to `{}`.
        """
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "protocol_provider", protocol_provider)
        if maximum_connections is not None:
            pulumi.set(__self__, "maximum_connections", maximum_connections)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if property_mappings is not None:
            pulumi.set(__self__, "property_mappings", property_mappings)
        if rac_endpoint_id is not None:
            pulumi.set(__self__, "rac_endpoint_id", rac_endpoint_id)
        if settings is not None:
            pulumi.set(__self__, "settings", settings)

    @property
    @pulumi.getter
    def host(self) -> pulumi.Input[str]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Input[str]:
        """
        Allowed values: - `rdp` - `vnc` - `ssh`
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: pulumi.Input[str]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="protocolProvider")
    def protocol_provider(self) -> pulumi.Input[float]:
        return pulumi.get(self, "protocol_provider")

    @protocol_provider.setter
    def protocol_provider(self, value: pulumi.Input[float]):
        pulumi.set(self, "protocol_provider", value)

    @property
    @pulumi.getter(name="maximumConnections")
    def maximum_connections(self) -> Optional[pulumi.Input[float]]:
        """
        Defaults to `0`.
        """
        return pulumi.get(self, "maximum_connections")

    @maximum_connections.setter
    def maximum_connections(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "maximum_connections", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="propertyMappings")
    def property_mappings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "property_mappings")

    @property_mappings.setter
    def property_mappings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "property_mappings", value)

    @property
    @pulumi.getter(name="racEndpointId")
    def rac_endpoint_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rac_endpoint_id")

    @rac_endpoint_id.setter
    def rac_endpoint_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rac_endpoint_id", value)

    @property
    @pulumi.getter
    def settings(self) -> Optional[pulumi.Input[str]]:
        """
        JSON format expected. Use jsonencode() to pass objects. Defaults to `{}`.
        """
        return pulumi.get(self, "settings")

    @settings.setter
    def settings(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "settings", value)


@pulumi.input_type
class _RacEndpointState:
    def __init__(__self__, *,
                 host: Optional[pulumi.Input[str]] = None,
                 maximum_connections: Optional[pulumi.Input[float]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 property_mappings: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 protocol_provider: Optional[pulumi.Input[float]] = None,
                 rac_endpoint_id: Optional[pulumi.Input[str]] = None,
                 settings: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering RacEndpoint resources.
        :param pulumi.Input[float] maximum_connections: Defaults to `0`.
        :param pulumi.Input[str] protocol: Allowed values: - `rdp` - `vnc` - `ssh`
        :param pulumi.Input[str] settings: JSON format expected. Use jsonencode() to pass objects. Defaults to `{}`.
        """
        if host is not None:
            pulumi.set(__self__, "host", host)
        if maximum_connections is not None:
            pulumi.set(__self__, "maximum_connections", maximum_connections)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if property_mappings is not None:
            pulumi.set(__self__, "property_mappings", property_mappings)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if protocol_provider is not None:
            pulumi.set(__self__, "protocol_provider", protocol_provider)
        if rac_endpoint_id is not None:
            pulumi.set(__self__, "rac_endpoint_id", rac_endpoint_id)
        if settings is not None:
            pulumi.set(__self__, "settings", settings)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="maximumConnections")
    def maximum_connections(self) -> Optional[pulumi.Input[float]]:
        """
        Defaults to `0`.
        """
        return pulumi.get(self, "maximum_connections")

    @maximum_connections.setter
    def maximum_connections(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "maximum_connections", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="propertyMappings")
    def property_mappings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "property_mappings")

    @property_mappings.setter
    def property_mappings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "property_mappings", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        """
        Allowed values: - `rdp` - `vnc` - `ssh`
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="protocolProvider")
    def protocol_provider(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "protocol_provider")

    @protocol_provider.setter
    def protocol_provider(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "protocol_provider", value)

    @property
    @pulumi.getter(name="racEndpointId")
    def rac_endpoint_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rac_endpoint_id")

    @rac_endpoint_id.setter
    def rac_endpoint_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rac_endpoint_id", value)

    @property
    @pulumi.getter
    def settings(self) -> Optional[pulumi.Input[str]]:
        """
        JSON format expected. Use jsonencode() to pass objects. Defaults to `{}`.
        """
        return pulumi.get(self, "settings")

    @settings.setter
    def settings(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "settings", value)


class RacEndpoint(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 maximum_connections: Optional[pulumi.Input[float]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 property_mappings: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 protocol_provider: Optional[pulumi.Input[float]] = None,
                 rac_endpoint_id: Optional[pulumi.Input[str]] = None,
                 settings: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a RacEndpoint resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[float] maximum_connections: Defaults to `0`.
        :param pulumi.Input[str] protocol: Allowed values: - `rdp` - `vnc` - `ssh`
        :param pulumi.Input[str] settings: JSON format expected. Use jsonencode() to pass objects. Defaults to `{}`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RacEndpointArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a RacEndpoint resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param RacEndpointArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RacEndpointArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 maximum_connections: Optional[pulumi.Input[float]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 property_mappings: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 protocol_provider: Optional[pulumi.Input[float]] = None,
                 rac_endpoint_id: Optional[pulumi.Input[str]] = None,
                 settings: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RacEndpointArgs.__new__(RacEndpointArgs)

            if host is None and not opts.urn:
                raise TypeError("Missing required property 'host'")
            __props__.__dict__["host"] = host
            __props__.__dict__["maximum_connections"] = maximum_connections
            __props__.__dict__["name"] = name
            __props__.__dict__["property_mappings"] = property_mappings
            if protocol is None and not opts.urn:
                raise TypeError("Missing required property 'protocol'")
            __props__.__dict__["protocol"] = protocol
            if protocol_provider is None and not opts.urn:
                raise TypeError("Missing required property 'protocol_provider'")
            __props__.__dict__["protocol_provider"] = protocol_provider
            __props__.__dict__["rac_endpoint_id"] = rac_endpoint_id
            __props__.__dict__["settings"] = settings
        super(RacEndpoint, __self__).__init__(
            'authentik:index/racEndpoint:RacEndpoint',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            host: Optional[pulumi.Input[str]] = None,
            maximum_connections: Optional[pulumi.Input[float]] = None,
            name: Optional[pulumi.Input[str]] = None,
            property_mappings: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            protocol: Optional[pulumi.Input[str]] = None,
            protocol_provider: Optional[pulumi.Input[float]] = None,
            rac_endpoint_id: Optional[pulumi.Input[str]] = None,
            settings: Optional[pulumi.Input[str]] = None) -> 'RacEndpoint':
        """
        Get an existing RacEndpoint resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[float] maximum_connections: Defaults to `0`.
        :param pulumi.Input[str] protocol: Allowed values: - `rdp` - `vnc` - `ssh`
        :param pulumi.Input[str] settings: JSON format expected. Use jsonencode() to pass objects. Defaults to `{}`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RacEndpointState.__new__(_RacEndpointState)

        __props__.__dict__["host"] = host
        __props__.__dict__["maximum_connections"] = maximum_connections
        __props__.__dict__["name"] = name
        __props__.__dict__["property_mappings"] = property_mappings
        __props__.__dict__["protocol"] = protocol
        __props__.__dict__["protocol_provider"] = protocol_provider
        __props__.__dict__["rac_endpoint_id"] = rac_endpoint_id
        __props__.__dict__["settings"] = settings
        return RacEndpoint(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def host(self) -> pulumi.Output[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="maximumConnections")
    def maximum_connections(self) -> pulumi.Output[Optional[float]]:
        """
        Defaults to `0`.
        """
        return pulumi.get(self, "maximum_connections")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="propertyMappings")
    def property_mappings(self) -> pulumi.Output[Optional[Sequence[str]]]:
        return pulumi.get(self, "property_mappings")

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Output[str]:
        """
        Allowed values: - `rdp` - `vnc` - `ssh`
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="protocolProvider")
    def protocol_provider(self) -> pulumi.Output[float]:
        return pulumi.get(self, "protocol_provider")

    @property
    @pulumi.getter(name="racEndpointId")
    def rac_endpoint_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "rac_endpoint_id")

    @property
    @pulumi.getter
    def settings(self) -> pulumi.Output[Optional[str]]:
        """
        JSON format expected. Use jsonencode() to pass objects. Defaults to `{}`.
        """
        return pulumi.get(self, "settings")

