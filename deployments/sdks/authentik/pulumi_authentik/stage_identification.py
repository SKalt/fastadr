# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['StageIdentificationArgs', 'StageIdentification']

@pulumi.input_type
class StageIdentificationArgs:
    def __init__(__self__, *,
                 captcha_stage: Optional[pulumi.Input[str]] = None,
                 case_insensitive_matching: Optional[pulumi.Input[bool]] = None,
                 enrollment_flow: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 password_stage: Optional[pulumi.Input[str]] = None,
                 passwordless_flow: Optional[pulumi.Input[str]] = None,
                 pretend_user_exists: Optional[pulumi.Input[bool]] = None,
                 recovery_flow: Optional[pulumi.Input[str]] = None,
                 show_matched_user: Optional[pulumi.Input[bool]] = None,
                 show_source_labels: Optional[pulumi.Input[bool]] = None,
                 sources: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 stage_identification_id: Optional[pulumi.Input[str]] = None,
                 user_fields: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a StageIdentification resource.
        :param pulumi.Input[bool] pretend_user_exists: Defaults to `true`.
        :param pulumi.Input[bool] show_matched_user: Defaults to `true`.
        :param pulumi.Input[bool] show_source_labels: Defaults to `false`.
        """
        if captcha_stage is not None:
            pulumi.set(__self__, "captcha_stage", captcha_stage)
        if case_insensitive_matching is not None:
            pulumi.set(__self__, "case_insensitive_matching", case_insensitive_matching)
        if enrollment_flow is not None:
            pulumi.set(__self__, "enrollment_flow", enrollment_flow)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if password_stage is not None:
            pulumi.set(__self__, "password_stage", password_stage)
        if passwordless_flow is not None:
            pulumi.set(__self__, "passwordless_flow", passwordless_flow)
        if pretend_user_exists is not None:
            pulumi.set(__self__, "pretend_user_exists", pretend_user_exists)
        if recovery_flow is not None:
            pulumi.set(__self__, "recovery_flow", recovery_flow)
        if show_matched_user is not None:
            pulumi.set(__self__, "show_matched_user", show_matched_user)
        if show_source_labels is not None:
            pulumi.set(__self__, "show_source_labels", show_source_labels)
        if sources is not None:
            pulumi.set(__self__, "sources", sources)
        if stage_identification_id is not None:
            pulumi.set(__self__, "stage_identification_id", stage_identification_id)
        if user_fields is not None:
            pulumi.set(__self__, "user_fields", user_fields)

    @property
    @pulumi.getter(name="captchaStage")
    def captcha_stage(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "captcha_stage")

    @captcha_stage.setter
    def captcha_stage(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "captcha_stage", value)

    @property
    @pulumi.getter(name="caseInsensitiveMatching")
    def case_insensitive_matching(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "case_insensitive_matching")

    @case_insensitive_matching.setter
    def case_insensitive_matching(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "case_insensitive_matching", value)

    @property
    @pulumi.getter(name="enrollmentFlow")
    def enrollment_flow(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "enrollment_flow")

    @enrollment_flow.setter
    def enrollment_flow(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enrollment_flow", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="passwordStage")
    def password_stage(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password_stage")

    @password_stage.setter
    def password_stage(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password_stage", value)

    @property
    @pulumi.getter(name="passwordlessFlow")
    def passwordless_flow(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "passwordless_flow")

    @passwordless_flow.setter
    def passwordless_flow(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "passwordless_flow", value)

    @property
    @pulumi.getter(name="pretendUserExists")
    def pretend_user_exists(self) -> Optional[pulumi.Input[bool]]:
        """
        Defaults to `true`.
        """
        return pulumi.get(self, "pretend_user_exists")

    @pretend_user_exists.setter
    def pretend_user_exists(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "pretend_user_exists", value)

    @property
    @pulumi.getter(name="recoveryFlow")
    def recovery_flow(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "recovery_flow")

    @recovery_flow.setter
    def recovery_flow(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "recovery_flow", value)

    @property
    @pulumi.getter(name="showMatchedUser")
    def show_matched_user(self) -> Optional[pulumi.Input[bool]]:
        """
        Defaults to `true`.
        """
        return pulumi.get(self, "show_matched_user")

    @show_matched_user.setter
    def show_matched_user(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "show_matched_user", value)

    @property
    @pulumi.getter(name="showSourceLabels")
    def show_source_labels(self) -> Optional[pulumi.Input[bool]]:
        """
        Defaults to `false`.
        """
        return pulumi.get(self, "show_source_labels")

    @show_source_labels.setter
    def show_source_labels(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "show_source_labels", value)

    @property
    @pulumi.getter
    def sources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "sources")

    @sources.setter
    def sources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "sources", value)

    @property
    @pulumi.getter(name="stageIdentificationId")
    def stage_identification_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "stage_identification_id")

    @stage_identification_id.setter
    def stage_identification_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "stage_identification_id", value)

    @property
    @pulumi.getter(name="userFields")
    def user_fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "user_fields")

    @user_fields.setter
    def user_fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "user_fields", value)


@pulumi.input_type
class _StageIdentificationState:
    def __init__(__self__, *,
                 captcha_stage: Optional[pulumi.Input[str]] = None,
                 case_insensitive_matching: Optional[pulumi.Input[bool]] = None,
                 enrollment_flow: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 password_stage: Optional[pulumi.Input[str]] = None,
                 passwordless_flow: Optional[pulumi.Input[str]] = None,
                 pretend_user_exists: Optional[pulumi.Input[bool]] = None,
                 recovery_flow: Optional[pulumi.Input[str]] = None,
                 show_matched_user: Optional[pulumi.Input[bool]] = None,
                 show_source_labels: Optional[pulumi.Input[bool]] = None,
                 sources: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 stage_identification_id: Optional[pulumi.Input[str]] = None,
                 user_fields: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Input properties used for looking up and filtering StageIdentification resources.
        :param pulumi.Input[bool] pretend_user_exists: Defaults to `true`.
        :param pulumi.Input[bool] show_matched_user: Defaults to `true`.
        :param pulumi.Input[bool] show_source_labels: Defaults to `false`.
        """
        if captcha_stage is not None:
            pulumi.set(__self__, "captcha_stage", captcha_stage)
        if case_insensitive_matching is not None:
            pulumi.set(__self__, "case_insensitive_matching", case_insensitive_matching)
        if enrollment_flow is not None:
            pulumi.set(__self__, "enrollment_flow", enrollment_flow)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if password_stage is not None:
            pulumi.set(__self__, "password_stage", password_stage)
        if passwordless_flow is not None:
            pulumi.set(__self__, "passwordless_flow", passwordless_flow)
        if pretend_user_exists is not None:
            pulumi.set(__self__, "pretend_user_exists", pretend_user_exists)
        if recovery_flow is not None:
            pulumi.set(__self__, "recovery_flow", recovery_flow)
        if show_matched_user is not None:
            pulumi.set(__self__, "show_matched_user", show_matched_user)
        if show_source_labels is not None:
            pulumi.set(__self__, "show_source_labels", show_source_labels)
        if sources is not None:
            pulumi.set(__self__, "sources", sources)
        if stage_identification_id is not None:
            pulumi.set(__self__, "stage_identification_id", stage_identification_id)
        if user_fields is not None:
            pulumi.set(__self__, "user_fields", user_fields)

    @property
    @pulumi.getter(name="captchaStage")
    def captcha_stage(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "captcha_stage")

    @captcha_stage.setter
    def captcha_stage(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "captcha_stage", value)

    @property
    @pulumi.getter(name="caseInsensitiveMatching")
    def case_insensitive_matching(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "case_insensitive_matching")

    @case_insensitive_matching.setter
    def case_insensitive_matching(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "case_insensitive_matching", value)

    @property
    @pulumi.getter(name="enrollmentFlow")
    def enrollment_flow(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "enrollment_flow")

    @enrollment_flow.setter
    def enrollment_flow(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enrollment_flow", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="passwordStage")
    def password_stage(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password_stage")

    @password_stage.setter
    def password_stage(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password_stage", value)

    @property
    @pulumi.getter(name="passwordlessFlow")
    def passwordless_flow(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "passwordless_flow")

    @passwordless_flow.setter
    def passwordless_flow(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "passwordless_flow", value)

    @property
    @pulumi.getter(name="pretendUserExists")
    def pretend_user_exists(self) -> Optional[pulumi.Input[bool]]:
        """
        Defaults to `true`.
        """
        return pulumi.get(self, "pretend_user_exists")

    @pretend_user_exists.setter
    def pretend_user_exists(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "pretend_user_exists", value)

    @property
    @pulumi.getter(name="recoveryFlow")
    def recovery_flow(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "recovery_flow")

    @recovery_flow.setter
    def recovery_flow(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "recovery_flow", value)

    @property
    @pulumi.getter(name="showMatchedUser")
    def show_matched_user(self) -> Optional[pulumi.Input[bool]]:
        """
        Defaults to `true`.
        """
        return pulumi.get(self, "show_matched_user")

    @show_matched_user.setter
    def show_matched_user(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "show_matched_user", value)

    @property
    @pulumi.getter(name="showSourceLabels")
    def show_source_labels(self) -> Optional[pulumi.Input[bool]]:
        """
        Defaults to `false`.
        """
        return pulumi.get(self, "show_source_labels")

    @show_source_labels.setter
    def show_source_labels(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "show_source_labels", value)

    @property
    @pulumi.getter
    def sources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "sources")

    @sources.setter
    def sources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "sources", value)

    @property
    @pulumi.getter(name="stageIdentificationId")
    def stage_identification_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "stage_identification_id")

    @stage_identification_id.setter
    def stage_identification_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "stage_identification_id", value)

    @property
    @pulumi.getter(name="userFields")
    def user_fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "user_fields")

    @user_fields.setter
    def user_fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "user_fields", value)


class StageIdentification(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 captcha_stage: Optional[pulumi.Input[str]] = None,
                 case_insensitive_matching: Optional[pulumi.Input[bool]] = None,
                 enrollment_flow: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 password_stage: Optional[pulumi.Input[str]] = None,
                 passwordless_flow: Optional[pulumi.Input[str]] = None,
                 pretend_user_exists: Optional[pulumi.Input[bool]] = None,
                 recovery_flow: Optional[pulumi.Input[str]] = None,
                 show_matched_user: Optional[pulumi.Input[bool]] = None,
                 show_source_labels: Optional[pulumi.Input[bool]] = None,
                 sources: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 stage_identification_id: Optional[pulumi.Input[str]] = None,
                 user_fields: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        Create a StageIdentification resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] pretend_user_exists: Defaults to `true`.
        :param pulumi.Input[bool] show_matched_user: Defaults to `true`.
        :param pulumi.Input[bool] show_source_labels: Defaults to `false`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[StageIdentificationArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a StageIdentification resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param StageIdentificationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(StageIdentificationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 captcha_stage: Optional[pulumi.Input[str]] = None,
                 case_insensitive_matching: Optional[pulumi.Input[bool]] = None,
                 enrollment_flow: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 password_stage: Optional[pulumi.Input[str]] = None,
                 passwordless_flow: Optional[pulumi.Input[str]] = None,
                 pretend_user_exists: Optional[pulumi.Input[bool]] = None,
                 recovery_flow: Optional[pulumi.Input[str]] = None,
                 show_matched_user: Optional[pulumi.Input[bool]] = None,
                 show_source_labels: Optional[pulumi.Input[bool]] = None,
                 sources: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 stage_identification_id: Optional[pulumi.Input[str]] = None,
                 user_fields: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = StageIdentificationArgs.__new__(StageIdentificationArgs)

            __props__.__dict__["captcha_stage"] = captcha_stage
            __props__.__dict__["case_insensitive_matching"] = case_insensitive_matching
            __props__.__dict__["enrollment_flow"] = enrollment_flow
            __props__.__dict__["name"] = name
            __props__.__dict__["password_stage"] = password_stage
            __props__.__dict__["passwordless_flow"] = passwordless_flow
            __props__.__dict__["pretend_user_exists"] = pretend_user_exists
            __props__.__dict__["recovery_flow"] = recovery_flow
            __props__.__dict__["show_matched_user"] = show_matched_user
            __props__.__dict__["show_source_labels"] = show_source_labels
            __props__.__dict__["sources"] = sources
            __props__.__dict__["stage_identification_id"] = stage_identification_id
            __props__.__dict__["user_fields"] = user_fields
        super(StageIdentification, __self__).__init__(
            'authentik:index/stageIdentification:StageIdentification',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            captcha_stage: Optional[pulumi.Input[str]] = None,
            case_insensitive_matching: Optional[pulumi.Input[bool]] = None,
            enrollment_flow: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            password_stage: Optional[pulumi.Input[str]] = None,
            passwordless_flow: Optional[pulumi.Input[str]] = None,
            pretend_user_exists: Optional[pulumi.Input[bool]] = None,
            recovery_flow: Optional[pulumi.Input[str]] = None,
            show_matched_user: Optional[pulumi.Input[bool]] = None,
            show_source_labels: Optional[pulumi.Input[bool]] = None,
            sources: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            stage_identification_id: Optional[pulumi.Input[str]] = None,
            user_fields: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None) -> 'StageIdentification':
        """
        Get an existing StageIdentification resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] pretend_user_exists: Defaults to `true`.
        :param pulumi.Input[bool] show_matched_user: Defaults to `true`.
        :param pulumi.Input[bool] show_source_labels: Defaults to `false`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _StageIdentificationState.__new__(_StageIdentificationState)

        __props__.__dict__["captcha_stage"] = captcha_stage
        __props__.__dict__["case_insensitive_matching"] = case_insensitive_matching
        __props__.__dict__["enrollment_flow"] = enrollment_flow
        __props__.__dict__["name"] = name
        __props__.__dict__["password_stage"] = password_stage
        __props__.__dict__["passwordless_flow"] = passwordless_flow
        __props__.__dict__["pretend_user_exists"] = pretend_user_exists
        __props__.__dict__["recovery_flow"] = recovery_flow
        __props__.__dict__["show_matched_user"] = show_matched_user
        __props__.__dict__["show_source_labels"] = show_source_labels
        __props__.__dict__["sources"] = sources
        __props__.__dict__["stage_identification_id"] = stage_identification_id
        __props__.__dict__["user_fields"] = user_fields
        return StageIdentification(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="captchaStage")
    def captcha_stage(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "captcha_stage")

    @property
    @pulumi.getter(name="caseInsensitiveMatching")
    def case_insensitive_matching(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "case_insensitive_matching")

    @property
    @pulumi.getter(name="enrollmentFlow")
    def enrollment_flow(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "enrollment_flow")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="passwordStage")
    def password_stage(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "password_stage")

    @property
    @pulumi.getter(name="passwordlessFlow")
    def passwordless_flow(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "passwordless_flow")

    @property
    @pulumi.getter(name="pretendUserExists")
    def pretend_user_exists(self) -> pulumi.Output[Optional[bool]]:
        """
        Defaults to `true`.
        """
        return pulumi.get(self, "pretend_user_exists")

    @property
    @pulumi.getter(name="recoveryFlow")
    def recovery_flow(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "recovery_flow")

    @property
    @pulumi.getter(name="showMatchedUser")
    def show_matched_user(self) -> pulumi.Output[Optional[bool]]:
        """
        Defaults to `true`.
        """
        return pulumi.get(self, "show_matched_user")

    @property
    @pulumi.getter(name="showSourceLabels")
    def show_source_labels(self) -> pulumi.Output[Optional[bool]]:
        """
        Defaults to `false`.
        """
        return pulumi.get(self, "show_source_labels")

    @property
    @pulumi.getter
    def sources(self) -> pulumi.Output[Optional[Sequence[str]]]:
        return pulumi.get(self, "sources")

    @property
    @pulumi.getter(name="stageIdentificationId")
    def stage_identification_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "stage_identification_id")

    @property
    @pulumi.getter(name="userFields")
    def user_fields(self) -> pulumi.Output[Optional[Sequence[str]]]:
        return pulumi.get(self, "user_fields")

