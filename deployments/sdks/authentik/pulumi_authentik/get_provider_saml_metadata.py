# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetProviderSamlMetadataResult',
    'AwaitableGetProviderSamlMetadataResult',
    'get_provider_saml_metadata',
    'get_provider_saml_metadata_output',
]

@pulumi.output_type
class GetProviderSamlMetadataResult:
    """
    A collection of values returned by getProviderSamlMetadata.
    """
    def __init__(__self__, id=None, metadata=None, name=None, provider_id=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if metadata and not isinstance(metadata, str):
            raise TypeError("Expected argument 'metadata' to be a str")
        pulumi.set(__self__, "metadata", metadata)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if provider_id and not isinstance(provider_id, float):
            raise TypeError("Expected argument 'provider_id' to be a float")
        pulumi.set(__self__, "provider_id", provider_id)

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def metadata(self) -> str:
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="providerId")
    def provider_id(self) -> Optional[float]:
        return pulumi.get(self, "provider_id")


class AwaitableGetProviderSamlMetadataResult(GetProviderSamlMetadataResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetProviderSamlMetadataResult(
            id=self.id,
            metadata=self.metadata,
            name=self.name,
            provider_id=self.provider_id)


def get_provider_saml_metadata(id: Optional[str] = None,
                               name: Optional[str] = None,
                               provider_id: Optional[float] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetProviderSamlMetadataResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    __args__['providerId'] = provider_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('authentik:index/getProviderSamlMetadata:getProviderSamlMetadata', __args__, opts=opts, typ=GetProviderSamlMetadataResult, package_ref=_utilities.get_package()).value

    return AwaitableGetProviderSamlMetadataResult(
        id=pulumi.get(__ret__, 'id'),
        metadata=pulumi.get(__ret__, 'metadata'),
        name=pulumi.get(__ret__, 'name'),
        provider_id=pulumi.get(__ret__, 'provider_id'))
def get_provider_saml_metadata_output(id: Optional[pulumi.Input[Optional[str]]] = None,
                                      name: Optional[pulumi.Input[Optional[str]]] = None,
                                      provider_id: Optional[pulumi.Input[Optional[float]]] = None,
                                      opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetProviderSamlMetadataResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    __args__['providerId'] = provider_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('authentik:index/getProviderSamlMetadata:getProviderSamlMetadata', __args__, opts=opts, typ=GetProviderSamlMetadataResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetProviderSamlMetadataResult(
        id=pulumi.get(__response__, 'id'),
        metadata=pulumi.get(__response__, 'metadata'),
        name=pulumi.get(__response__, 'name'),
        provider_id=pulumi.get(__response__, 'provider_id')))
