# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['CertificateKeyPairArgs', 'CertificateKeyPair']

@pulumi.input_type
class CertificateKeyPairArgs:
    def __init__(__self__, *,
                 certificate_data: pulumi.Input[str],
                 certificate_key_pair_id: Optional[pulumi.Input[str]] = None,
                 key_data: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a CertificateKeyPair resource.
        """
        pulumi.set(__self__, "certificate_data", certificate_data)
        if certificate_key_pair_id is not None:
            pulumi.set(__self__, "certificate_key_pair_id", certificate_key_pair_id)
        if key_data is not None:
            pulumi.set(__self__, "key_data", key_data)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="certificateData")
    def certificate_data(self) -> pulumi.Input[str]:
        return pulumi.get(self, "certificate_data")

    @certificate_data.setter
    def certificate_data(self, value: pulumi.Input[str]):
        pulumi.set(self, "certificate_data", value)

    @property
    @pulumi.getter(name="certificateKeyPairId")
    def certificate_key_pair_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "certificate_key_pair_id")

    @certificate_key_pair_id.setter
    def certificate_key_pair_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_key_pair_id", value)

    @property
    @pulumi.getter(name="keyData")
    def key_data(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key_data")

    @key_data.setter
    def key_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_data", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _CertificateKeyPairState:
    def __init__(__self__, *,
                 certificate_data: Optional[pulumi.Input[str]] = None,
                 certificate_key_pair_id: Optional[pulumi.Input[str]] = None,
                 key_data: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering CertificateKeyPair resources.
        """
        if certificate_data is not None:
            pulumi.set(__self__, "certificate_data", certificate_data)
        if certificate_key_pair_id is not None:
            pulumi.set(__self__, "certificate_key_pair_id", certificate_key_pair_id)
        if key_data is not None:
            pulumi.set(__self__, "key_data", key_data)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="certificateData")
    def certificate_data(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "certificate_data")

    @certificate_data.setter
    def certificate_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_data", value)

    @property
    @pulumi.getter(name="certificateKeyPairId")
    def certificate_key_pair_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "certificate_key_pair_id")

    @certificate_key_pair_id.setter
    def certificate_key_pair_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_key_pair_id", value)

    @property
    @pulumi.getter(name="keyData")
    def key_data(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key_data")

    @key_data.setter
    def key_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_data", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


class CertificateKeyPair(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 certificate_data: Optional[pulumi.Input[str]] = None,
                 certificate_key_pair_id: Optional[pulumi.Input[str]] = None,
                 key_data: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a CertificateKeyPair resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CertificateKeyPairArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a CertificateKeyPair resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param CertificateKeyPairArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CertificateKeyPairArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 certificate_data: Optional[pulumi.Input[str]] = None,
                 certificate_key_pair_id: Optional[pulumi.Input[str]] = None,
                 key_data: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CertificateKeyPairArgs.__new__(CertificateKeyPairArgs)

            if certificate_data is None and not opts.urn:
                raise TypeError("Missing required property 'certificate_data'")
            __props__.__dict__["certificate_data"] = certificate_data
            __props__.__dict__["certificate_key_pair_id"] = certificate_key_pair_id
            __props__.__dict__["key_data"] = None if key_data is None else pulumi.Output.secret(key_data)
            __props__.__dict__["name"] = name
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["keyData"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(CertificateKeyPair, __self__).__init__(
            'authentik:index/certificateKeyPair:CertificateKeyPair',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            certificate_data: Optional[pulumi.Input[str]] = None,
            certificate_key_pair_id: Optional[pulumi.Input[str]] = None,
            key_data: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None) -> 'CertificateKeyPair':
        """
        Get an existing CertificateKeyPair resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CertificateKeyPairState.__new__(_CertificateKeyPairState)

        __props__.__dict__["certificate_data"] = certificate_data
        __props__.__dict__["certificate_key_pair_id"] = certificate_key_pair_id
        __props__.__dict__["key_data"] = key_data
        __props__.__dict__["name"] = name
        return CertificateKeyPair(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="certificateData")
    def certificate_data(self) -> pulumi.Output[str]:
        return pulumi.get(self, "certificate_data")

    @property
    @pulumi.getter(name="certificateKeyPairId")
    def certificate_key_pair_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "certificate_key_pair_id")

    @property
    @pulumi.getter(name="keyData")
    def key_data(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "key_data")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

