# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['StagePasswordArgs', 'StagePassword']

@pulumi.input_type
class StagePasswordArgs:
    def __init__(__self__, *,
                 backends: pulumi.Input[Sequence[pulumi.Input[str]]],
                 allow_show_password: Optional[pulumi.Input[bool]] = None,
                 configure_flow: Optional[pulumi.Input[str]] = None,
                 failed_attempts_before_cancel: Optional[pulumi.Input[float]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 stage_password_id: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a StagePassword resource.
        :param pulumi.Input[bool] allow_show_password: Defaults to `false`.
        :param pulumi.Input[float] failed_attempts_before_cancel: Defaults to `5`.
        """
        pulumi.set(__self__, "backends", backends)
        if allow_show_password is not None:
            pulumi.set(__self__, "allow_show_password", allow_show_password)
        if configure_flow is not None:
            pulumi.set(__self__, "configure_flow", configure_flow)
        if failed_attempts_before_cancel is not None:
            pulumi.set(__self__, "failed_attempts_before_cancel", failed_attempts_before_cancel)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if stage_password_id is not None:
            pulumi.set(__self__, "stage_password_id", stage_password_id)

    @property
    @pulumi.getter
    def backends(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "backends")

    @backends.setter
    def backends(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "backends", value)

    @property
    @pulumi.getter(name="allowShowPassword")
    def allow_show_password(self) -> Optional[pulumi.Input[bool]]:
        """
        Defaults to `false`.
        """
        return pulumi.get(self, "allow_show_password")

    @allow_show_password.setter
    def allow_show_password(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_show_password", value)

    @property
    @pulumi.getter(name="configureFlow")
    def configure_flow(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "configure_flow")

    @configure_flow.setter
    def configure_flow(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "configure_flow", value)

    @property
    @pulumi.getter(name="failedAttemptsBeforeCancel")
    def failed_attempts_before_cancel(self) -> Optional[pulumi.Input[float]]:
        """
        Defaults to `5`.
        """
        return pulumi.get(self, "failed_attempts_before_cancel")

    @failed_attempts_before_cancel.setter
    def failed_attempts_before_cancel(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "failed_attempts_before_cancel", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="stagePasswordId")
    def stage_password_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "stage_password_id")

    @stage_password_id.setter
    def stage_password_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "stage_password_id", value)


@pulumi.input_type
class _StagePasswordState:
    def __init__(__self__, *,
                 allow_show_password: Optional[pulumi.Input[bool]] = None,
                 backends: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 configure_flow: Optional[pulumi.Input[str]] = None,
                 failed_attempts_before_cancel: Optional[pulumi.Input[float]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 stage_password_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering StagePassword resources.
        :param pulumi.Input[bool] allow_show_password: Defaults to `false`.
        :param pulumi.Input[float] failed_attempts_before_cancel: Defaults to `5`.
        """
        if allow_show_password is not None:
            pulumi.set(__self__, "allow_show_password", allow_show_password)
        if backends is not None:
            pulumi.set(__self__, "backends", backends)
        if configure_flow is not None:
            pulumi.set(__self__, "configure_flow", configure_flow)
        if failed_attempts_before_cancel is not None:
            pulumi.set(__self__, "failed_attempts_before_cancel", failed_attempts_before_cancel)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if stage_password_id is not None:
            pulumi.set(__self__, "stage_password_id", stage_password_id)

    @property
    @pulumi.getter(name="allowShowPassword")
    def allow_show_password(self) -> Optional[pulumi.Input[bool]]:
        """
        Defaults to `false`.
        """
        return pulumi.get(self, "allow_show_password")

    @allow_show_password.setter
    def allow_show_password(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_show_password", value)

    @property
    @pulumi.getter
    def backends(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "backends")

    @backends.setter
    def backends(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "backends", value)

    @property
    @pulumi.getter(name="configureFlow")
    def configure_flow(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "configure_flow")

    @configure_flow.setter
    def configure_flow(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "configure_flow", value)

    @property
    @pulumi.getter(name="failedAttemptsBeforeCancel")
    def failed_attempts_before_cancel(self) -> Optional[pulumi.Input[float]]:
        """
        Defaults to `5`.
        """
        return pulumi.get(self, "failed_attempts_before_cancel")

    @failed_attempts_before_cancel.setter
    def failed_attempts_before_cancel(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "failed_attempts_before_cancel", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="stagePasswordId")
    def stage_password_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "stage_password_id")

    @stage_password_id.setter
    def stage_password_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "stage_password_id", value)


class StagePassword(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allow_show_password: Optional[pulumi.Input[bool]] = None,
                 backends: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 configure_flow: Optional[pulumi.Input[str]] = None,
                 failed_attempts_before_cancel: Optional[pulumi.Input[float]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 stage_password_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a StagePassword resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] allow_show_password: Defaults to `false`.
        :param pulumi.Input[float] failed_attempts_before_cancel: Defaults to `5`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: StagePasswordArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a StagePassword resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param StagePasswordArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(StagePasswordArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allow_show_password: Optional[pulumi.Input[bool]] = None,
                 backends: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 configure_flow: Optional[pulumi.Input[str]] = None,
                 failed_attempts_before_cancel: Optional[pulumi.Input[float]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 stage_password_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = StagePasswordArgs.__new__(StagePasswordArgs)

            __props__.__dict__["allow_show_password"] = allow_show_password
            if backends is None and not opts.urn:
                raise TypeError("Missing required property 'backends'")
            __props__.__dict__["backends"] = backends
            __props__.__dict__["configure_flow"] = configure_flow
            __props__.__dict__["failed_attempts_before_cancel"] = failed_attempts_before_cancel
            __props__.__dict__["name"] = name
            __props__.__dict__["stage_password_id"] = stage_password_id
        super(StagePassword, __self__).__init__(
            'authentik:index/stagePassword:StagePassword',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            allow_show_password: Optional[pulumi.Input[bool]] = None,
            backends: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            configure_flow: Optional[pulumi.Input[str]] = None,
            failed_attempts_before_cancel: Optional[pulumi.Input[float]] = None,
            name: Optional[pulumi.Input[str]] = None,
            stage_password_id: Optional[pulumi.Input[str]] = None) -> 'StagePassword':
        """
        Get an existing StagePassword resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] allow_show_password: Defaults to `false`.
        :param pulumi.Input[float] failed_attempts_before_cancel: Defaults to `5`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _StagePasswordState.__new__(_StagePasswordState)

        __props__.__dict__["allow_show_password"] = allow_show_password
        __props__.__dict__["backends"] = backends
        __props__.__dict__["configure_flow"] = configure_flow
        __props__.__dict__["failed_attempts_before_cancel"] = failed_attempts_before_cancel
        __props__.__dict__["name"] = name
        __props__.__dict__["stage_password_id"] = stage_password_id
        return StagePassword(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="allowShowPassword")
    def allow_show_password(self) -> pulumi.Output[Optional[bool]]:
        """
        Defaults to `false`.
        """
        return pulumi.get(self, "allow_show_password")

    @property
    @pulumi.getter
    def backends(self) -> pulumi.Output[Sequence[str]]:
        return pulumi.get(self, "backends")

    @property
    @pulumi.getter(name="configureFlow")
    def configure_flow(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "configure_flow")

    @property
    @pulumi.getter(name="failedAttemptsBeforeCancel")
    def failed_attempts_before_cancel(self) -> pulumi.Output[Optional[float]]:
        """
        Defaults to `5`.
        """
        return pulumi.get(self, "failed_attempts_before_cancel")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="stagePasswordId")
    def stage_password_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "stage_password_id")

