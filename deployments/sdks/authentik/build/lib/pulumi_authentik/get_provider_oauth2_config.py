# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetProviderOauth2ConfigResult',
    'AwaitableGetProviderOauth2ConfigResult',
    'get_provider_oauth2_config',
    'get_provider_oauth2_config_output',
]

@pulumi.output_type
class GetProviderOauth2ConfigResult:
    """
    A collection of values returned by getProviderOauth2Config.
    """
    def __init__(__self__, authorize_url=None, id=None, issuer_url=None, jwks_url=None, logout_url=None, name=None, provider_id=None, provider_info_url=None, token_url=None, user_info_url=None):
        if authorize_url and not isinstance(authorize_url, str):
            raise TypeError("Expected argument 'authorize_url' to be a str")
        pulumi.set(__self__, "authorize_url", authorize_url)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if issuer_url and not isinstance(issuer_url, str):
            raise TypeError("Expected argument 'issuer_url' to be a str")
        pulumi.set(__self__, "issuer_url", issuer_url)
        if jwks_url and not isinstance(jwks_url, str):
            raise TypeError("Expected argument 'jwks_url' to be a str")
        pulumi.set(__self__, "jwks_url", jwks_url)
        if logout_url and not isinstance(logout_url, str):
            raise TypeError("Expected argument 'logout_url' to be a str")
        pulumi.set(__self__, "logout_url", logout_url)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if provider_id and not isinstance(provider_id, float):
            raise TypeError("Expected argument 'provider_id' to be a float")
        pulumi.set(__self__, "provider_id", provider_id)
        if provider_info_url and not isinstance(provider_info_url, str):
            raise TypeError("Expected argument 'provider_info_url' to be a str")
        pulumi.set(__self__, "provider_info_url", provider_info_url)
        if token_url and not isinstance(token_url, str):
            raise TypeError("Expected argument 'token_url' to be a str")
        pulumi.set(__self__, "token_url", token_url)
        if user_info_url and not isinstance(user_info_url, str):
            raise TypeError("Expected argument 'user_info_url' to be a str")
        pulumi.set(__self__, "user_info_url", user_info_url)

    @property
    @pulumi.getter(name="authorizeUrl")
    def authorize_url(self) -> str:
        return pulumi.get(self, "authorize_url")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="issuerUrl")
    def issuer_url(self) -> str:
        return pulumi.get(self, "issuer_url")

    @property
    @pulumi.getter(name="jwksUrl")
    def jwks_url(self) -> str:
        return pulumi.get(self, "jwks_url")

    @property
    @pulumi.getter(name="logoutUrl")
    def logout_url(self) -> str:
        return pulumi.get(self, "logout_url")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="providerId")
    def provider_id(self) -> Optional[float]:
        return pulumi.get(self, "provider_id")

    @property
    @pulumi.getter(name="providerInfoUrl")
    def provider_info_url(self) -> str:
        return pulumi.get(self, "provider_info_url")

    @property
    @pulumi.getter(name="tokenUrl")
    def token_url(self) -> str:
        return pulumi.get(self, "token_url")

    @property
    @pulumi.getter(name="userInfoUrl")
    def user_info_url(self) -> str:
        return pulumi.get(self, "user_info_url")


class AwaitableGetProviderOauth2ConfigResult(GetProviderOauth2ConfigResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetProviderOauth2ConfigResult(
            authorize_url=self.authorize_url,
            id=self.id,
            issuer_url=self.issuer_url,
            jwks_url=self.jwks_url,
            logout_url=self.logout_url,
            name=self.name,
            provider_id=self.provider_id,
            provider_info_url=self.provider_info_url,
            token_url=self.token_url,
            user_info_url=self.user_info_url)


def get_provider_oauth2_config(id: Optional[str] = None,
                               name: Optional[str] = None,
                               provider_id: Optional[float] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetProviderOauth2ConfigResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    __args__['providerId'] = provider_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('authentik:index/getProviderOauth2Config:getProviderOauth2Config', __args__, opts=opts, typ=GetProviderOauth2ConfigResult, package_ref=_utilities.get_package()).value

    return AwaitableGetProviderOauth2ConfigResult(
        authorize_url=pulumi.get(__ret__, 'authorize_url'),
        id=pulumi.get(__ret__, 'id'),
        issuer_url=pulumi.get(__ret__, 'issuer_url'),
        jwks_url=pulumi.get(__ret__, 'jwks_url'),
        logout_url=pulumi.get(__ret__, 'logout_url'),
        name=pulumi.get(__ret__, 'name'),
        provider_id=pulumi.get(__ret__, 'provider_id'),
        provider_info_url=pulumi.get(__ret__, 'provider_info_url'),
        token_url=pulumi.get(__ret__, 'token_url'),
        user_info_url=pulumi.get(__ret__, 'user_info_url'))
def get_provider_oauth2_config_output(id: Optional[pulumi.Input[Optional[str]]] = None,
                                      name: Optional[pulumi.Input[Optional[str]]] = None,
                                      provider_id: Optional[pulumi.Input[Optional[float]]] = None,
                                      opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetProviderOauth2ConfigResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    __args__['providerId'] = provider_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('authentik:index/getProviderOauth2Config:getProviderOauth2Config', __args__, opts=opts, typ=GetProviderOauth2ConfigResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetProviderOauth2ConfigResult(
        authorize_url=pulumi.get(__response__, 'authorize_url'),
        id=pulumi.get(__response__, 'id'),
        issuer_url=pulumi.get(__response__, 'issuer_url'),
        jwks_url=pulumi.get(__response__, 'jwks_url'),
        logout_url=pulumi.get(__response__, 'logout_url'),
        name=pulumi.get(__response__, 'name'),
        provider_id=pulumi.get(__response__, 'provider_id'),
        provider_info_url=pulumi.get(__response__, 'provider_info_url'),
        token_url=pulumi.get(__response__, 'token_url'),
        user_info_url=pulumi.get(__response__, 'user_info_url')))
