# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetFlowResult',
    'AwaitableGetFlowResult',
    'get_flow',
    'get_flow_output',
]

@pulumi.output_type
class GetFlowResult:
    """
    A collection of values returned by getFlow.
    """
    def __init__(__self__, authentication=None, designation=None, id=None, name=None, slug=None, title=None):
        if authentication and not isinstance(authentication, str):
            raise TypeError("Expected argument 'authentication' to be a str")
        pulumi.set(__self__, "authentication", authentication)
        if designation and not isinstance(designation, str):
            raise TypeError("Expected argument 'designation' to be a str")
        pulumi.set(__self__, "designation", designation)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if slug and not isinstance(slug, str):
            raise TypeError("Expected argument 'slug' to be a str")
        pulumi.set(__self__, "slug", slug)
        if title and not isinstance(title, str):
            raise TypeError("Expected argument 'title' to be a str")
        pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def authentication(self) -> str:
        return pulumi.get(self, "authentication")

    @property
    @pulumi.getter
    def designation(self) -> str:
        return pulumi.get(self, "designation")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def slug(self) -> str:
        return pulumi.get(self, "slug")

    @property
    @pulumi.getter
    def title(self) -> str:
        return pulumi.get(self, "title")


class AwaitableGetFlowResult(GetFlowResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetFlowResult(
            authentication=self.authentication,
            designation=self.designation,
            id=self.id,
            name=self.name,
            slug=self.slug,
            title=self.title)


def get_flow(authentication: Optional[str] = None,
             designation: Optional[str] = None,
             id: Optional[str] = None,
             slug: Optional[str] = None,
             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetFlowResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['authentication'] = authentication
    __args__['designation'] = designation
    __args__['id'] = id
    __args__['slug'] = slug
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('authentik:index/getFlow:getFlow', __args__, opts=opts, typ=GetFlowResult, package_ref=_utilities.get_package()).value

    return AwaitableGetFlowResult(
        authentication=pulumi.get(__ret__, 'authentication'),
        designation=pulumi.get(__ret__, 'designation'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        slug=pulumi.get(__ret__, 'slug'),
        title=pulumi.get(__ret__, 'title'))
def get_flow_output(authentication: Optional[pulumi.Input[Optional[str]]] = None,
                    designation: Optional[pulumi.Input[Optional[str]]] = None,
                    id: Optional[pulumi.Input[Optional[str]]] = None,
                    slug: Optional[pulumi.Input[Optional[str]]] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetFlowResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['authentication'] = authentication
    __args__['designation'] = designation
    __args__['id'] = id
    __args__['slug'] = slug
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('authentik:index/getFlow:getFlow', __args__, opts=opts, typ=GetFlowResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetFlowResult(
        authentication=pulumi.get(__response__, 'authentication'),
        designation=pulumi.get(__response__, 'designation'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        slug=pulumi.get(__response__, 'slug'),
        title=pulumi.get(__response__, 'title')))
