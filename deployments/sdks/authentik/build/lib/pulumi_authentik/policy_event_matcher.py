# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['PolicyEventMatcherArgs', 'PolicyEventMatcher']

@pulumi.input_type
class PolicyEventMatcherArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 app: Optional[pulumi.Input[str]] = None,
                 client_ip: Optional[pulumi.Input[str]] = None,
                 execution_logging: Optional[pulumi.Input[bool]] = None,
                 model: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 policy_event_matcher_id: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a PolicyEventMatcher resource.
        :param pulumi.Input[str] app: Allowed values: - `authentik.tenants` - `authentik.admin` - `authentik.api` - `authentik.crypto` - `authentik.flows` -
               `authentik.outposts` - `authentik.policies.dummy` - `authentik.policies.event_matcher` - `authentik.policies.expiry` -
               `authentik.policies.expression` - `authentik.policies.geoip` - `authentik.policies.password` -
               `authentik.policies.reputation` - `authentik.policies` - `authentik.providers.ldap` - `authentik.providers.oauth2` -
               `authentik.providers.proxy` - `authentik.providers.radius` - `authentik.providers.saml` - `authentik.providers.scim` -
               `authentik.rbac` - `authentik.recovery` - `authentik.sources.kerberos` - `authentik.sources.ldap` -
               `authentik.sources.oauth` - `authentik.sources.plex` - `authentik.sources.saml` - `authentik.sources.scim` -
               `authentik.stages.authenticator` - `authentik.stages.authenticator_duo` - `authentik.stages.authenticator_sms` -
               `authentik.stages.authenticator_static` - `authentik.stages.authenticator_totp` -
               `authentik.stages.authenticator_validate` - `authentik.stages.authenticator_webauthn` - `authentik.stages.captcha` -
               `authentik.stages.consent` - `authentik.stages.deny` - `authentik.stages.dummy` - `authentik.stages.email` -
               `authentik.stages.identification` - `authentik.stages.invitation` - `authentik.stages.password` -
               `authentik.stages.prompt` - `authentik.stages.user_delete` - `authentik.stages.user_login` -
               `authentik.stages.user_logout` - `authentik.stages.user_write` - `authentik.brands` - `authentik.blueprints` -
               `authentik.core` - `authentik.enterprise` - `authentik.enterprise.audit` -
               `authentik.enterprise.providers.google_workspace` - `authentik.enterprise.providers.microsoft_entra` -
               `authentik.enterprise.providers.rac` - `authentik.enterprise.stages.authenticator_endpoint_gdtc` -
               `authentik.enterprise.stages.source` - `authentik.events`
        :param pulumi.Input[bool] execution_logging: Defaults to `false`.
        :param pulumi.Input[str] model: Allowed values: - `authentik_tenants.domain` - `authentik_crypto.certificatekeypair` - `authentik_flows.flow` -
               `authentik_flows.flowstagebinding` - `authentik_outposts.dockerserviceconnection` -
               `authentik_outposts.kubernetesserviceconnection` - `authentik_outposts.outpost` - `authentik_policies_dummy.dummypolicy`
               - `authentik_policies_event_matcher.eventmatcherpolicy` - `authentik_policies_expiry.passwordexpirypolicy` -
               `authentik_policies_expression.expressionpolicy` - `authentik_policies_geoip.geoippolicy` -
               `authentik_policies_password.passwordpolicy` - `authentik_policies_reputation.reputationpolicy` -
               `authentik_policies.policybinding` - `authentik_providers_ldap.ldapprovider` - `authentik_providers_oauth2.scopemapping`
               - `authentik_providers_oauth2.oauth2provider` - `authentik_providers_proxy.proxyprovider` -
               `authentik_providers_radius.radiusprovider` - `authentik_providers_radius.radiusproviderpropertymapping` -
               `authentik_providers_saml.samlprovider` - `authentik_providers_saml.samlpropertymapping` -
               `authentik_providers_scim.scimprovider` - `authentik_providers_scim.scimmapping` - `authentik_rbac.role` -
               `authentik_sources_kerberos.kerberossource` - `authentik_sources_kerberos.kerberossourcepropertymapping` -
               `authentik_sources_kerberos.userkerberossourceconnection` - `authentik_sources_kerberos.groupkerberossourceconnection` -
               `authentik_sources_ldap.ldapsource` - `authentik_sources_ldap.ldapsourcepropertymapping` -
               `authentik_sources_oauth.oauthsource` - `authentik_sources_oauth.oauthsourcepropertymapping` -
               `authentik_sources_oauth.useroauthsourceconnection` - `authentik_sources_oauth.groupoauthsourceconnection` -
               `authentik_sources_plex.plexsource` - `authentik_sources_plex.plexsourcepropertymapping` -
               `authentik_sources_plex.userplexsourceconnection` - `authentik_sources_plex.groupplexsourceconnection` -
               `authentik_sources_saml.samlsource` - `authentik_sources_saml.samlsourcepropertymapping` -
               `authentik_sources_saml.usersamlsourceconnection` - `authentik_sources_saml.groupsamlsourceconnection` -
               `authentik_sources_scim.scimsource` - `authentik_sources_scim.scimsourcepropertymapping` -
               `authentik_stages_authenticator_duo.authenticatorduostage` - `authentik_stages_authenticator_duo.duodevice` -
               `authentik_stages_authenticator_sms.authenticatorsmsstage` - `authentik_stages_authenticator_sms.smsdevice` -
               `authentik_stages_authenticator_static.authenticatorstaticstage` - `authentik_stages_authenticator_static.staticdevice`
               - `authentik_stages_authenticator_totp.authenticatortotpstage` - `authentik_stages_authenticator_totp.totpdevice` -
               `authentik_stages_authenticator_validate.authenticatorvalidatestage` -
               `authentik_stages_authenticator_webauthn.authenticatorwebauthnstage` -
               `authentik_stages_authenticator_webauthn.webauthndevice` - `authentik_stages_captcha.captchastage` -
               `authentik_stages_consent.consentstage` - `authentik_stages_consent.userconsent` - `authentik_stages_deny.denystage` -
               `authentik_stages_dummy.dummystage` - `authentik_stages_email.emailstage` -
               `authentik_stages_identification.identificationstage` - `authentik_stages_invitation.invitationstage` -
               `authentik_stages_invitation.invitation` - `authentik_stages_password.passwordstage` - `authentik_stages_prompt.prompt`
               - `authentik_stages_prompt.promptstage` - `authentik_stages_user_delete.userdeletestage` -
               `authentik_stages_user_login.userloginstage` - `authentik_stages_user_logout.userlogoutstage` -
               `authentik_stages_user_write.userwritestage` - `authentik_brands.brand` - `authentik_blueprints.blueprintinstance` -
               `authentik_core.group` - `authentik_core.user` - `authentik_core.application` - `authentik_core.token` -
               `authentik_enterprise.license` - `authentik_providers_google_workspace.googleworkspaceprovider` -
               `authentik_providers_google_workspace.googleworkspaceprovidermapping` -
               `authentik_providers_microsoft_entra.microsoftentraprovider` -
               `authentik_providers_microsoft_entra.microsoftentraprovidermapping` - `authentik_providers_rac.racprovider` -
               `authentik_providers_rac.endpoint` - `authentik_providers_rac.racpropertymapping` -
               `authentik_stages_authenticator_endpoint_gdtc.authenticatorendpointgdtcstage` - `authentik_stages_source.sourcestage` -
               `authentik_events.event` - `authentik_events.notificationtransport` - `authentik_events.notification` -
               `authentik_events.notificationrule` - `authentik_events.notificationwebhookmapping`
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if app is not None:
            pulumi.set(__self__, "app", app)
        if client_ip is not None:
            pulumi.set(__self__, "client_ip", client_ip)
        if execution_logging is not None:
            pulumi.set(__self__, "execution_logging", execution_logging)
        if model is not None:
            pulumi.set(__self__, "model", model)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if policy_event_matcher_id is not None:
            pulumi.set(__self__, "policy_event_matcher_id", policy_event_matcher_id)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def app(self) -> Optional[pulumi.Input[str]]:
        """
        Allowed values: - `authentik.tenants` - `authentik.admin` - `authentik.api` - `authentik.crypto` - `authentik.flows` -
        `authentik.outposts` - `authentik.policies.dummy` - `authentik.policies.event_matcher` - `authentik.policies.expiry` -
        `authentik.policies.expression` - `authentik.policies.geoip` - `authentik.policies.password` -
        `authentik.policies.reputation` - `authentik.policies` - `authentik.providers.ldap` - `authentik.providers.oauth2` -
        `authentik.providers.proxy` - `authentik.providers.radius` - `authentik.providers.saml` - `authentik.providers.scim` -
        `authentik.rbac` - `authentik.recovery` - `authentik.sources.kerberos` - `authentik.sources.ldap` -
        `authentik.sources.oauth` - `authentik.sources.plex` - `authentik.sources.saml` - `authentik.sources.scim` -
        `authentik.stages.authenticator` - `authentik.stages.authenticator_duo` - `authentik.stages.authenticator_sms` -
        `authentik.stages.authenticator_static` - `authentik.stages.authenticator_totp` -
        `authentik.stages.authenticator_validate` - `authentik.stages.authenticator_webauthn` - `authentik.stages.captcha` -
        `authentik.stages.consent` - `authentik.stages.deny` - `authentik.stages.dummy` - `authentik.stages.email` -
        `authentik.stages.identification` - `authentik.stages.invitation` - `authentik.stages.password` -
        `authentik.stages.prompt` - `authentik.stages.user_delete` - `authentik.stages.user_login` -
        `authentik.stages.user_logout` - `authentik.stages.user_write` - `authentik.brands` - `authentik.blueprints` -
        `authentik.core` - `authentik.enterprise` - `authentik.enterprise.audit` -
        `authentik.enterprise.providers.google_workspace` - `authentik.enterprise.providers.microsoft_entra` -
        `authentik.enterprise.providers.rac` - `authentik.enterprise.stages.authenticator_endpoint_gdtc` -
        `authentik.enterprise.stages.source` - `authentik.events`
        """
        return pulumi.get(self, "app")

    @app.setter
    def app(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "app", value)

    @property
    @pulumi.getter(name="clientIp")
    def client_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_ip")

    @client_ip.setter
    def client_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_ip", value)

    @property
    @pulumi.getter(name="executionLogging")
    def execution_logging(self) -> Optional[pulumi.Input[bool]]:
        """
        Defaults to `false`.
        """
        return pulumi.get(self, "execution_logging")

    @execution_logging.setter
    def execution_logging(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "execution_logging", value)

    @property
    @pulumi.getter
    def model(self) -> Optional[pulumi.Input[str]]:
        """
        Allowed values: - `authentik_tenants.domain` - `authentik_crypto.certificatekeypair` - `authentik_flows.flow` -
        `authentik_flows.flowstagebinding` - `authentik_outposts.dockerserviceconnection` -
        `authentik_outposts.kubernetesserviceconnection` - `authentik_outposts.outpost` - `authentik_policies_dummy.dummypolicy`
        - `authentik_policies_event_matcher.eventmatcherpolicy` - `authentik_policies_expiry.passwordexpirypolicy` -
        `authentik_policies_expression.expressionpolicy` - `authentik_policies_geoip.geoippolicy` -
        `authentik_policies_password.passwordpolicy` - `authentik_policies_reputation.reputationpolicy` -
        `authentik_policies.policybinding` - `authentik_providers_ldap.ldapprovider` - `authentik_providers_oauth2.scopemapping`
        - `authentik_providers_oauth2.oauth2provider` - `authentik_providers_proxy.proxyprovider` -
        `authentik_providers_radius.radiusprovider` - `authentik_providers_radius.radiusproviderpropertymapping` -
        `authentik_providers_saml.samlprovider` - `authentik_providers_saml.samlpropertymapping` -
        `authentik_providers_scim.scimprovider` - `authentik_providers_scim.scimmapping` - `authentik_rbac.role` -
        `authentik_sources_kerberos.kerberossource` - `authentik_sources_kerberos.kerberossourcepropertymapping` -
        `authentik_sources_kerberos.userkerberossourceconnection` - `authentik_sources_kerberos.groupkerberossourceconnection` -
        `authentik_sources_ldap.ldapsource` - `authentik_sources_ldap.ldapsourcepropertymapping` -
        `authentik_sources_oauth.oauthsource` - `authentik_sources_oauth.oauthsourcepropertymapping` -
        `authentik_sources_oauth.useroauthsourceconnection` - `authentik_sources_oauth.groupoauthsourceconnection` -
        `authentik_sources_plex.plexsource` - `authentik_sources_plex.plexsourcepropertymapping` -
        `authentik_sources_plex.userplexsourceconnection` - `authentik_sources_plex.groupplexsourceconnection` -
        `authentik_sources_saml.samlsource` - `authentik_sources_saml.samlsourcepropertymapping` -
        `authentik_sources_saml.usersamlsourceconnection` - `authentik_sources_saml.groupsamlsourceconnection` -
        `authentik_sources_scim.scimsource` - `authentik_sources_scim.scimsourcepropertymapping` -
        `authentik_stages_authenticator_duo.authenticatorduostage` - `authentik_stages_authenticator_duo.duodevice` -
        `authentik_stages_authenticator_sms.authenticatorsmsstage` - `authentik_stages_authenticator_sms.smsdevice` -
        `authentik_stages_authenticator_static.authenticatorstaticstage` - `authentik_stages_authenticator_static.staticdevice`
        - `authentik_stages_authenticator_totp.authenticatortotpstage` - `authentik_stages_authenticator_totp.totpdevice` -
        `authentik_stages_authenticator_validate.authenticatorvalidatestage` -
        `authentik_stages_authenticator_webauthn.authenticatorwebauthnstage` -
        `authentik_stages_authenticator_webauthn.webauthndevice` - `authentik_stages_captcha.captchastage` -
        `authentik_stages_consent.consentstage` - `authentik_stages_consent.userconsent` - `authentik_stages_deny.denystage` -
        `authentik_stages_dummy.dummystage` - `authentik_stages_email.emailstage` -
        `authentik_stages_identification.identificationstage` - `authentik_stages_invitation.invitationstage` -
        `authentik_stages_invitation.invitation` - `authentik_stages_password.passwordstage` - `authentik_stages_prompt.prompt`
        - `authentik_stages_prompt.promptstage` - `authentik_stages_user_delete.userdeletestage` -
        `authentik_stages_user_login.userloginstage` - `authentik_stages_user_logout.userlogoutstage` -
        `authentik_stages_user_write.userwritestage` - `authentik_brands.brand` - `authentik_blueprints.blueprintinstance` -
        `authentik_core.group` - `authentik_core.user` - `authentik_core.application` - `authentik_core.token` -
        `authentik_enterprise.license` - `authentik_providers_google_workspace.googleworkspaceprovider` -
        `authentik_providers_google_workspace.googleworkspaceprovidermapping` -
        `authentik_providers_microsoft_entra.microsoftentraprovider` -
        `authentik_providers_microsoft_entra.microsoftentraprovidermapping` - `authentik_providers_rac.racprovider` -
        `authentik_providers_rac.endpoint` - `authentik_providers_rac.racpropertymapping` -
        `authentik_stages_authenticator_endpoint_gdtc.authenticatorendpointgdtcstage` - `authentik_stages_source.sourcestage` -
        `authentik_events.event` - `authentik_events.notificationtransport` - `authentik_events.notification` -
        `authentik_events.notificationrule` - `authentik_events.notificationwebhookmapping`
        """
        return pulumi.get(self, "model")

    @model.setter
    def model(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "model", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="policyEventMatcherId")
    def policy_event_matcher_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "policy_event_matcher_id")

    @policy_event_matcher_id.setter
    def policy_event_matcher_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_event_matcher_id", value)


@pulumi.input_type
class _PolicyEventMatcherState:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 app: Optional[pulumi.Input[str]] = None,
                 client_ip: Optional[pulumi.Input[str]] = None,
                 execution_logging: Optional[pulumi.Input[bool]] = None,
                 model: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 policy_event_matcher_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering PolicyEventMatcher resources.
        :param pulumi.Input[str] app: Allowed values: - `authentik.tenants` - `authentik.admin` - `authentik.api` - `authentik.crypto` - `authentik.flows` -
               `authentik.outposts` - `authentik.policies.dummy` - `authentik.policies.event_matcher` - `authentik.policies.expiry` -
               `authentik.policies.expression` - `authentik.policies.geoip` - `authentik.policies.password` -
               `authentik.policies.reputation` - `authentik.policies` - `authentik.providers.ldap` - `authentik.providers.oauth2` -
               `authentik.providers.proxy` - `authentik.providers.radius` - `authentik.providers.saml` - `authentik.providers.scim` -
               `authentik.rbac` - `authentik.recovery` - `authentik.sources.kerberos` - `authentik.sources.ldap` -
               `authentik.sources.oauth` - `authentik.sources.plex` - `authentik.sources.saml` - `authentik.sources.scim` -
               `authentik.stages.authenticator` - `authentik.stages.authenticator_duo` - `authentik.stages.authenticator_sms` -
               `authentik.stages.authenticator_static` - `authentik.stages.authenticator_totp` -
               `authentik.stages.authenticator_validate` - `authentik.stages.authenticator_webauthn` - `authentik.stages.captcha` -
               `authentik.stages.consent` - `authentik.stages.deny` - `authentik.stages.dummy` - `authentik.stages.email` -
               `authentik.stages.identification` - `authentik.stages.invitation` - `authentik.stages.password` -
               `authentik.stages.prompt` - `authentik.stages.user_delete` - `authentik.stages.user_login` -
               `authentik.stages.user_logout` - `authentik.stages.user_write` - `authentik.brands` - `authentik.blueprints` -
               `authentik.core` - `authentik.enterprise` - `authentik.enterprise.audit` -
               `authentik.enterprise.providers.google_workspace` - `authentik.enterprise.providers.microsoft_entra` -
               `authentik.enterprise.providers.rac` - `authentik.enterprise.stages.authenticator_endpoint_gdtc` -
               `authentik.enterprise.stages.source` - `authentik.events`
        :param pulumi.Input[bool] execution_logging: Defaults to `false`.
        :param pulumi.Input[str] model: Allowed values: - `authentik_tenants.domain` - `authentik_crypto.certificatekeypair` - `authentik_flows.flow` -
               `authentik_flows.flowstagebinding` - `authentik_outposts.dockerserviceconnection` -
               `authentik_outposts.kubernetesserviceconnection` - `authentik_outposts.outpost` - `authentik_policies_dummy.dummypolicy`
               - `authentik_policies_event_matcher.eventmatcherpolicy` - `authentik_policies_expiry.passwordexpirypolicy` -
               `authentik_policies_expression.expressionpolicy` - `authentik_policies_geoip.geoippolicy` -
               `authentik_policies_password.passwordpolicy` - `authentik_policies_reputation.reputationpolicy` -
               `authentik_policies.policybinding` - `authentik_providers_ldap.ldapprovider` - `authentik_providers_oauth2.scopemapping`
               - `authentik_providers_oauth2.oauth2provider` - `authentik_providers_proxy.proxyprovider` -
               `authentik_providers_radius.radiusprovider` - `authentik_providers_radius.radiusproviderpropertymapping` -
               `authentik_providers_saml.samlprovider` - `authentik_providers_saml.samlpropertymapping` -
               `authentik_providers_scim.scimprovider` - `authentik_providers_scim.scimmapping` - `authentik_rbac.role` -
               `authentik_sources_kerberos.kerberossource` - `authentik_sources_kerberos.kerberossourcepropertymapping` -
               `authentik_sources_kerberos.userkerberossourceconnection` - `authentik_sources_kerberos.groupkerberossourceconnection` -
               `authentik_sources_ldap.ldapsource` - `authentik_sources_ldap.ldapsourcepropertymapping` -
               `authentik_sources_oauth.oauthsource` - `authentik_sources_oauth.oauthsourcepropertymapping` -
               `authentik_sources_oauth.useroauthsourceconnection` - `authentik_sources_oauth.groupoauthsourceconnection` -
               `authentik_sources_plex.plexsource` - `authentik_sources_plex.plexsourcepropertymapping` -
               `authentik_sources_plex.userplexsourceconnection` - `authentik_sources_plex.groupplexsourceconnection` -
               `authentik_sources_saml.samlsource` - `authentik_sources_saml.samlsourcepropertymapping` -
               `authentik_sources_saml.usersamlsourceconnection` - `authentik_sources_saml.groupsamlsourceconnection` -
               `authentik_sources_scim.scimsource` - `authentik_sources_scim.scimsourcepropertymapping` -
               `authentik_stages_authenticator_duo.authenticatorduostage` - `authentik_stages_authenticator_duo.duodevice` -
               `authentik_stages_authenticator_sms.authenticatorsmsstage` - `authentik_stages_authenticator_sms.smsdevice` -
               `authentik_stages_authenticator_static.authenticatorstaticstage` - `authentik_stages_authenticator_static.staticdevice`
               - `authentik_stages_authenticator_totp.authenticatortotpstage` - `authentik_stages_authenticator_totp.totpdevice` -
               `authentik_stages_authenticator_validate.authenticatorvalidatestage` -
               `authentik_stages_authenticator_webauthn.authenticatorwebauthnstage` -
               `authentik_stages_authenticator_webauthn.webauthndevice` - `authentik_stages_captcha.captchastage` -
               `authentik_stages_consent.consentstage` - `authentik_stages_consent.userconsent` - `authentik_stages_deny.denystage` -
               `authentik_stages_dummy.dummystage` - `authentik_stages_email.emailstage` -
               `authentik_stages_identification.identificationstage` - `authentik_stages_invitation.invitationstage` -
               `authentik_stages_invitation.invitation` - `authentik_stages_password.passwordstage` - `authentik_stages_prompt.prompt`
               - `authentik_stages_prompt.promptstage` - `authentik_stages_user_delete.userdeletestage` -
               `authentik_stages_user_login.userloginstage` - `authentik_stages_user_logout.userlogoutstage` -
               `authentik_stages_user_write.userwritestage` - `authentik_brands.brand` - `authentik_blueprints.blueprintinstance` -
               `authentik_core.group` - `authentik_core.user` - `authentik_core.application` - `authentik_core.token` -
               `authentik_enterprise.license` - `authentik_providers_google_workspace.googleworkspaceprovider` -
               `authentik_providers_google_workspace.googleworkspaceprovidermapping` -
               `authentik_providers_microsoft_entra.microsoftentraprovider` -
               `authentik_providers_microsoft_entra.microsoftentraprovidermapping` - `authentik_providers_rac.racprovider` -
               `authentik_providers_rac.endpoint` - `authentik_providers_rac.racpropertymapping` -
               `authentik_stages_authenticator_endpoint_gdtc.authenticatorendpointgdtcstage` - `authentik_stages_source.sourcestage` -
               `authentik_events.event` - `authentik_events.notificationtransport` - `authentik_events.notification` -
               `authentik_events.notificationrule` - `authentik_events.notificationwebhookmapping`
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if app is not None:
            pulumi.set(__self__, "app", app)
        if client_ip is not None:
            pulumi.set(__self__, "client_ip", client_ip)
        if execution_logging is not None:
            pulumi.set(__self__, "execution_logging", execution_logging)
        if model is not None:
            pulumi.set(__self__, "model", model)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if policy_event_matcher_id is not None:
            pulumi.set(__self__, "policy_event_matcher_id", policy_event_matcher_id)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def app(self) -> Optional[pulumi.Input[str]]:
        """
        Allowed values: - `authentik.tenants` - `authentik.admin` - `authentik.api` - `authentik.crypto` - `authentik.flows` -
        `authentik.outposts` - `authentik.policies.dummy` - `authentik.policies.event_matcher` - `authentik.policies.expiry` -
        `authentik.policies.expression` - `authentik.policies.geoip` - `authentik.policies.password` -
        `authentik.policies.reputation` - `authentik.policies` - `authentik.providers.ldap` - `authentik.providers.oauth2` -
        `authentik.providers.proxy` - `authentik.providers.radius` - `authentik.providers.saml` - `authentik.providers.scim` -
        `authentik.rbac` - `authentik.recovery` - `authentik.sources.kerberos` - `authentik.sources.ldap` -
        `authentik.sources.oauth` - `authentik.sources.plex` - `authentik.sources.saml` - `authentik.sources.scim` -
        `authentik.stages.authenticator` - `authentik.stages.authenticator_duo` - `authentik.stages.authenticator_sms` -
        `authentik.stages.authenticator_static` - `authentik.stages.authenticator_totp` -
        `authentik.stages.authenticator_validate` - `authentik.stages.authenticator_webauthn` - `authentik.stages.captcha` -
        `authentik.stages.consent` - `authentik.stages.deny` - `authentik.stages.dummy` - `authentik.stages.email` -
        `authentik.stages.identification` - `authentik.stages.invitation` - `authentik.stages.password` -
        `authentik.stages.prompt` - `authentik.stages.user_delete` - `authentik.stages.user_login` -
        `authentik.stages.user_logout` - `authentik.stages.user_write` - `authentik.brands` - `authentik.blueprints` -
        `authentik.core` - `authentik.enterprise` - `authentik.enterprise.audit` -
        `authentik.enterprise.providers.google_workspace` - `authentik.enterprise.providers.microsoft_entra` -
        `authentik.enterprise.providers.rac` - `authentik.enterprise.stages.authenticator_endpoint_gdtc` -
        `authentik.enterprise.stages.source` - `authentik.events`
        """
        return pulumi.get(self, "app")

    @app.setter
    def app(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "app", value)

    @property
    @pulumi.getter(name="clientIp")
    def client_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_ip")

    @client_ip.setter
    def client_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_ip", value)

    @property
    @pulumi.getter(name="executionLogging")
    def execution_logging(self) -> Optional[pulumi.Input[bool]]:
        """
        Defaults to `false`.
        """
        return pulumi.get(self, "execution_logging")

    @execution_logging.setter
    def execution_logging(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "execution_logging", value)

    @property
    @pulumi.getter
    def model(self) -> Optional[pulumi.Input[str]]:
        """
        Allowed values: - `authentik_tenants.domain` - `authentik_crypto.certificatekeypair` - `authentik_flows.flow` -
        `authentik_flows.flowstagebinding` - `authentik_outposts.dockerserviceconnection` -
        `authentik_outposts.kubernetesserviceconnection` - `authentik_outposts.outpost` - `authentik_policies_dummy.dummypolicy`
        - `authentik_policies_event_matcher.eventmatcherpolicy` - `authentik_policies_expiry.passwordexpirypolicy` -
        `authentik_policies_expression.expressionpolicy` - `authentik_policies_geoip.geoippolicy` -
        `authentik_policies_password.passwordpolicy` - `authentik_policies_reputation.reputationpolicy` -
        `authentik_policies.policybinding` - `authentik_providers_ldap.ldapprovider` - `authentik_providers_oauth2.scopemapping`
        - `authentik_providers_oauth2.oauth2provider` - `authentik_providers_proxy.proxyprovider` -
        `authentik_providers_radius.radiusprovider` - `authentik_providers_radius.radiusproviderpropertymapping` -
        `authentik_providers_saml.samlprovider` - `authentik_providers_saml.samlpropertymapping` -
        `authentik_providers_scim.scimprovider` - `authentik_providers_scim.scimmapping` - `authentik_rbac.role` -
        `authentik_sources_kerberos.kerberossource` - `authentik_sources_kerberos.kerberossourcepropertymapping` -
        `authentik_sources_kerberos.userkerberossourceconnection` - `authentik_sources_kerberos.groupkerberossourceconnection` -
        `authentik_sources_ldap.ldapsource` - `authentik_sources_ldap.ldapsourcepropertymapping` -
        `authentik_sources_oauth.oauthsource` - `authentik_sources_oauth.oauthsourcepropertymapping` -
        `authentik_sources_oauth.useroauthsourceconnection` - `authentik_sources_oauth.groupoauthsourceconnection` -
        `authentik_sources_plex.plexsource` - `authentik_sources_plex.plexsourcepropertymapping` -
        `authentik_sources_plex.userplexsourceconnection` - `authentik_sources_plex.groupplexsourceconnection` -
        `authentik_sources_saml.samlsource` - `authentik_sources_saml.samlsourcepropertymapping` -
        `authentik_sources_saml.usersamlsourceconnection` - `authentik_sources_saml.groupsamlsourceconnection` -
        `authentik_sources_scim.scimsource` - `authentik_sources_scim.scimsourcepropertymapping` -
        `authentik_stages_authenticator_duo.authenticatorduostage` - `authentik_stages_authenticator_duo.duodevice` -
        `authentik_stages_authenticator_sms.authenticatorsmsstage` - `authentik_stages_authenticator_sms.smsdevice` -
        `authentik_stages_authenticator_static.authenticatorstaticstage` - `authentik_stages_authenticator_static.staticdevice`
        - `authentik_stages_authenticator_totp.authenticatortotpstage` - `authentik_stages_authenticator_totp.totpdevice` -
        `authentik_stages_authenticator_validate.authenticatorvalidatestage` -
        `authentik_stages_authenticator_webauthn.authenticatorwebauthnstage` -
        `authentik_stages_authenticator_webauthn.webauthndevice` - `authentik_stages_captcha.captchastage` -
        `authentik_stages_consent.consentstage` - `authentik_stages_consent.userconsent` - `authentik_stages_deny.denystage` -
        `authentik_stages_dummy.dummystage` - `authentik_stages_email.emailstage` -
        `authentik_stages_identification.identificationstage` - `authentik_stages_invitation.invitationstage` -
        `authentik_stages_invitation.invitation` - `authentik_stages_password.passwordstage` - `authentik_stages_prompt.prompt`
        - `authentik_stages_prompt.promptstage` - `authentik_stages_user_delete.userdeletestage` -
        `authentik_stages_user_login.userloginstage` - `authentik_stages_user_logout.userlogoutstage` -
        `authentik_stages_user_write.userwritestage` - `authentik_brands.brand` - `authentik_blueprints.blueprintinstance` -
        `authentik_core.group` - `authentik_core.user` - `authentik_core.application` - `authentik_core.token` -
        `authentik_enterprise.license` - `authentik_providers_google_workspace.googleworkspaceprovider` -
        `authentik_providers_google_workspace.googleworkspaceprovidermapping` -
        `authentik_providers_microsoft_entra.microsoftentraprovider` -
        `authentik_providers_microsoft_entra.microsoftentraprovidermapping` - `authentik_providers_rac.racprovider` -
        `authentik_providers_rac.endpoint` - `authentik_providers_rac.racpropertymapping` -
        `authentik_stages_authenticator_endpoint_gdtc.authenticatorendpointgdtcstage` - `authentik_stages_source.sourcestage` -
        `authentik_events.event` - `authentik_events.notificationtransport` - `authentik_events.notification` -
        `authentik_events.notificationrule` - `authentik_events.notificationwebhookmapping`
        """
        return pulumi.get(self, "model")

    @model.setter
    def model(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "model", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="policyEventMatcherId")
    def policy_event_matcher_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "policy_event_matcher_id")

    @policy_event_matcher_id.setter
    def policy_event_matcher_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_event_matcher_id", value)


class PolicyEventMatcher(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action: Optional[pulumi.Input[str]] = None,
                 app: Optional[pulumi.Input[str]] = None,
                 client_ip: Optional[pulumi.Input[str]] = None,
                 execution_logging: Optional[pulumi.Input[bool]] = None,
                 model: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 policy_event_matcher_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a PolicyEventMatcher resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] app: Allowed values: - `authentik.tenants` - `authentik.admin` - `authentik.api` - `authentik.crypto` - `authentik.flows` -
               `authentik.outposts` - `authentik.policies.dummy` - `authentik.policies.event_matcher` - `authentik.policies.expiry` -
               `authentik.policies.expression` - `authentik.policies.geoip` - `authentik.policies.password` -
               `authentik.policies.reputation` - `authentik.policies` - `authentik.providers.ldap` - `authentik.providers.oauth2` -
               `authentik.providers.proxy` - `authentik.providers.radius` - `authentik.providers.saml` - `authentik.providers.scim` -
               `authentik.rbac` - `authentik.recovery` - `authentik.sources.kerberos` - `authentik.sources.ldap` -
               `authentik.sources.oauth` - `authentik.sources.plex` - `authentik.sources.saml` - `authentik.sources.scim` -
               `authentik.stages.authenticator` - `authentik.stages.authenticator_duo` - `authentik.stages.authenticator_sms` -
               `authentik.stages.authenticator_static` - `authentik.stages.authenticator_totp` -
               `authentik.stages.authenticator_validate` - `authentik.stages.authenticator_webauthn` - `authentik.stages.captcha` -
               `authentik.stages.consent` - `authentik.stages.deny` - `authentik.stages.dummy` - `authentik.stages.email` -
               `authentik.stages.identification` - `authentik.stages.invitation` - `authentik.stages.password` -
               `authentik.stages.prompt` - `authentik.stages.user_delete` - `authentik.stages.user_login` -
               `authentik.stages.user_logout` - `authentik.stages.user_write` - `authentik.brands` - `authentik.blueprints` -
               `authentik.core` - `authentik.enterprise` - `authentik.enterprise.audit` -
               `authentik.enterprise.providers.google_workspace` - `authentik.enterprise.providers.microsoft_entra` -
               `authentik.enterprise.providers.rac` - `authentik.enterprise.stages.authenticator_endpoint_gdtc` -
               `authentik.enterprise.stages.source` - `authentik.events`
        :param pulumi.Input[bool] execution_logging: Defaults to `false`.
        :param pulumi.Input[str] model: Allowed values: - `authentik_tenants.domain` - `authentik_crypto.certificatekeypair` - `authentik_flows.flow` -
               `authentik_flows.flowstagebinding` - `authentik_outposts.dockerserviceconnection` -
               `authentik_outposts.kubernetesserviceconnection` - `authentik_outposts.outpost` - `authentik_policies_dummy.dummypolicy`
               - `authentik_policies_event_matcher.eventmatcherpolicy` - `authentik_policies_expiry.passwordexpirypolicy` -
               `authentik_policies_expression.expressionpolicy` - `authentik_policies_geoip.geoippolicy` -
               `authentik_policies_password.passwordpolicy` - `authentik_policies_reputation.reputationpolicy` -
               `authentik_policies.policybinding` - `authentik_providers_ldap.ldapprovider` - `authentik_providers_oauth2.scopemapping`
               - `authentik_providers_oauth2.oauth2provider` - `authentik_providers_proxy.proxyprovider` -
               `authentik_providers_radius.radiusprovider` - `authentik_providers_radius.radiusproviderpropertymapping` -
               `authentik_providers_saml.samlprovider` - `authentik_providers_saml.samlpropertymapping` -
               `authentik_providers_scim.scimprovider` - `authentik_providers_scim.scimmapping` - `authentik_rbac.role` -
               `authentik_sources_kerberos.kerberossource` - `authentik_sources_kerberos.kerberossourcepropertymapping` -
               `authentik_sources_kerberos.userkerberossourceconnection` - `authentik_sources_kerberos.groupkerberossourceconnection` -
               `authentik_sources_ldap.ldapsource` - `authentik_sources_ldap.ldapsourcepropertymapping` -
               `authentik_sources_oauth.oauthsource` - `authentik_sources_oauth.oauthsourcepropertymapping` -
               `authentik_sources_oauth.useroauthsourceconnection` - `authentik_sources_oauth.groupoauthsourceconnection` -
               `authentik_sources_plex.plexsource` - `authentik_sources_plex.plexsourcepropertymapping` -
               `authentik_sources_plex.userplexsourceconnection` - `authentik_sources_plex.groupplexsourceconnection` -
               `authentik_sources_saml.samlsource` - `authentik_sources_saml.samlsourcepropertymapping` -
               `authentik_sources_saml.usersamlsourceconnection` - `authentik_sources_saml.groupsamlsourceconnection` -
               `authentik_sources_scim.scimsource` - `authentik_sources_scim.scimsourcepropertymapping` -
               `authentik_stages_authenticator_duo.authenticatorduostage` - `authentik_stages_authenticator_duo.duodevice` -
               `authentik_stages_authenticator_sms.authenticatorsmsstage` - `authentik_stages_authenticator_sms.smsdevice` -
               `authentik_stages_authenticator_static.authenticatorstaticstage` - `authentik_stages_authenticator_static.staticdevice`
               - `authentik_stages_authenticator_totp.authenticatortotpstage` - `authentik_stages_authenticator_totp.totpdevice` -
               `authentik_stages_authenticator_validate.authenticatorvalidatestage` -
               `authentik_stages_authenticator_webauthn.authenticatorwebauthnstage` -
               `authentik_stages_authenticator_webauthn.webauthndevice` - `authentik_stages_captcha.captchastage` -
               `authentik_stages_consent.consentstage` - `authentik_stages_consent.userconsent` - `authentik_stages_deny.denystage` -
               `authentik_stages_dummy.dummystage` - `authentik_stages_email.emailstage` -
               `authentik_stages_identification.identificationstage` - `authentik_stages_invitation.invitationstage` -
               `authentik_stages_invitation.invitation` - `authentik_stages_password.passwordstage` - `authentik_stages_prompt.prompt`
               - `authentik_stages_prompt.promptstage` - `authentik_stages_user_delete.userdeletestage` -
               `authentik_stages_user_login.userloginstage` - `authentik_stages_user_logout.userlogoutstage` -
               `authentik_stages_user_write.userwritestage` - `authentik_brands.brand` - `authentik_blueprints.blueprintinstance` -
               `authentik_core.group` - `authentik_core.user` - `authentik_core.application` - `authentik_core.token` -
               `authentik_enterprise.license` - `authentik_providers_google_workspace.googleworkspaceprovider` -
               `authentik_providers_google_workspace.googleworkspaceprovidermapping` -
               `authentik_providers_microsoft_entra.microsoftentraprovider` -
               `authentik_providers_microsoft_entra.microsoftentraprovidermapping` - `authentik_providers_rac.racprovider` -
               `authentik_providers_rac.endpoint` - `authentik_providers_rac.racpropertymapping` -
               `authentik_stages_authenticator_endpoint_gdtc.authenticatorendpointgdtcstage` - `authentik_stages_source.sourcestage` -
               `authentik_events.event` - `authentik_events.notificationtransport` - `authentik_events.notification` -
               `authentik_events.notificationrule` - `authentik_events.notificationwebhookmapping`
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[PolicyEventMatcherArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a PolicyEventMatcher resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param PolicyEventMatcherArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PolicyEventMatcherArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action: Optional[pulumi.Input[str]] = None,
                 app: Optional[pulumi.Input[str]] = None,
                 client_ip: Optional[pulumi.Input[str]] = None,
                 execution_logging: Optional[pulumi.Input[bool]] = None,
                 model: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 policy_event_matcher_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PolicyEventMatcherArgs.__new__(PolicyEventMatcherArgs)

            __props__.__dict__["action"] = action
            __props__.__dict__["app"] = app
            __props__.__dict__["client_ip"] = client_ip
            __props__.__dict__["execution_logging"] = execution_logging
            __props__.__dict__["model"] = model
            __props__.__dict__["name"] = name
            __props__.__dict__["policy_event_matcher_id"] = policy_event_matcher_id
        super(PolicyEventMatcher, __self__).__init__(
            'authentik:index/policyEventMatcher:PolicyEventMatcher',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            action: Optional[pulumi.Input[str]] = None,
            app: Optional[pulumi.Input[str]] = None,
            client_ip: Optional[pulumi.Input[str]] = None,
            execution_logging: Optional[pulumi.Input[bool]] = None,
            model: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            policy_event_matcher_id: Optional[pulumi.Input[str]] = None) -> 'PolicyEventMatcher':
        """
        Get an existing PolicyEventMatcher resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] app: Allowed values: - `authentik.tenants` - `authentik.admin` - `authentik.api` - `authentik.crypto` - `authentik.flows` -
               `authentik.outposts` - `authentik.policies.dummy` - `authentik.policies.event_matcher` - `authentik.policies.expiry` -
               `authentik.policies.expression` - `authentik.policies.geoip` - `authentik.policies.password` -
               `authentik.policies.reputation` - `authentik.policies` - `authentik.providers.ldap` - `authentik.providers.oauth2` -
               `authentik.providers.proxy` - `authentik.providers.radius` - `authentik.providers.saml` - `authentik.providers.scim` -
               `authentik.rbac` - `authentik.recovery` - `authentik.sources.kerberos` - `authentik.sources.ldap` -
               `authentik.sources.oauth` - `authentik.sources.plex` - `authentik.sources.saml` - `authentik.sources.scim` -
               `authentik.stages.authenticator` - `authentik.stages.authenticator_duo` - `authentik.stages.authenticator_sms` -
               `authentik.stages.authenticator_static` - `authentik.stages.authenticator_totp` -
               `authentik.stages.authenticator_validate` - `authentik.stages.authenticator_webauthn` - `authentik.stages.captcha` -
               `authentik.stages.consent` - `authentik.stages.deny` - `authentik.stages.dummy` - `authentik.stages.email` -
               `authentik.stages.identification` - `authentik.stages.invitation` - `authentik.stages.password` -
               `authentik.stages.prompt` - `authentik.stages.user_delete` - `authentik.stages.user_login` -
               `authentik.stages.user_logout` - `authentik.stages.user_write` - `authentik.brands` - `authentik.blueprints` -
               `authentik.core` - `authentik.enterprise` - `authentik.enterprise.audit` -
               `authentik.enterprise.providers.google_workspace` - `authentik.enterprise.providers.microsoft_entra` -
               `authentik.enterprise.providers.rac` - `authentik.enterprise.stages.authenticator_endpoint_gdtc` -
               `authentik.enterprise.stages.source` - `authentik.events`
        :param pulumi.Input[bool] execution_logging: Defaults to `false`.
        :param pulumi.Input[str] model: Allowed values: - `authentik_tenants.domain` - `authentik_crypto.certificatekeypair` - `authentik_flows.flow` -
               `authentik_flows.flowstagebinding` - `authentik_outposts.dockerserviceconnection` -
               `authentik_outposts.kubernetesserviceconnection` - `authentik_outposts.outpost` - `authentik_policies_dummy.dummypolicy`
               - `authentik_policies_event_matcher.eventmatcherpolicy` - `authentik_policies_expiry.passwordexpirypolicy` -
               `authentik_policies_expression.expressionpolicy` - `authentik_policies_geoip.geoippolicy` -
               `authentik_policies_password.passwordpolicy` - `authentik_policies_reputation.reputationpolicy` -
               `authentik_policies.policybinding` - `authentik_providers_ldap.ldapprovider` - `authentik_providers_oauth2.scopemapping`
               - `authentik_providers_oauth2.oauth2provider` - `authentik_providers_proxy.proxyprovider` -
               `authentik_providers_radius.radiusprovider` - `authentik_providers_radius.radiusproviderpropertymapping` -
               `authentik_providers_saml.samlprovider` - `authentik_providers_saml.samlpropertymapping` -
               `authentik_providers_scim.scimprovider` - `authentik_providers_scim.scimmapping` - `authentik_rbac.role` -
               `authentik_sources_kerberos.kerberossource` - `authentik_sources_kerberos.kerberossourcepropertymapping` -
               `authentik_sources_kerberos.userkerberossourceconnection` - `authentik_sources_kerberos.groupkerberossourceconnection` -
               `authentik_sources_ldap.ldapsource` - `authentik_sources_ldap.ldapsourcepropertymapping` -
               `authentik_sources_oauth.oauthsource` - `authentik_sources_oauth.oauthsourcepropertymapping` -
               `authentik_sources_oauth.useroauthsourceconnection` - `authentik_sources_oauth.groupoauthsourceconnection` -
               `authentik_sources_plex.plexsource` - `authentik_sources_plex.plexsourcepropertymapping` -
               `authentik_sources_plex.userplexsourceconnection` - `authentik_sources_plex.groupplexsourceconnection` -
               `authentik_sources_saml.samlsource` - `authentik_sources_saml.samlsourcepropertymapping` -
               `authentik_sources_saml.usersamlsourceconnection` - `authentik_sources_saml.groupsamlsourceconnection` -
               `authentik_sources_scim.scimsource` - `authentik_sources_scim.scimsourcepropertymapping` -
               `authentik_stages_authenticator_duo.authenticatorduostage` - `authentik_stages_authenticator_duo.duodevice` -
               `authentik_stages_authenticator_sms.authenticatorsmsstage` - `authentik_stages_authenticator_sms.smsdevice` -
               `authentik_stages_authenticator_static.authenticatorstaticstage` - `authentik_stages_authenticator_static.staticdevice`
               - `authentik_stages_authenticator_totp.authenticatortotpstage` - `authentik_stages_authenticator_totp.totpdevice` -
               `authentik_stages_authenticator_validate.authenticatorvalidatestage` -
               `authentik_stages_authenticator_webauthn.authenticatorwebauthnstage` -
               `authentik_stages_authenticator_webauthn.webauthndevice` - `authentik_stages_captcha.captchastage` -
               `authentik_stages_consent.consentstage` - `authentik_stages_consent.userconsent` - `authentik_stages_deny.denystage` -
               `authentik_stages_dummy.dummystage` - `authentik_stages_email.emailstage` -
               `authentik_stages_identification.identificationstage` - `authentik_stages_invitation.invitationstage` -
               `authentik_stages_invitation.invitation` - `authentik_stages_password.passwordstage` - `authentik_stages_prompt.prompt`
               - `authentik_stages_prompt.promptstage` - `authentik_stages_user_delete.userdeletestage` -
               `authentik_stages_user_login.userloginstage` - `authentik_stages_user_logout.userlogoutstage` -
               `authentik_stages_user_write.userwritestage` - `authentik_brands.brand` - `authentik_blueprints.blueprintinstance` -
               `authentik_core.group` - `authentik_core.user` - `authentik_core.application` - `authentik_core.token` -
               `authentik_enterprise.license` - `authentik_providers_google_workspace.googleworkspaceprovider` -
               `authentik_providers_google_workspace.googleworkspaceprovidermapping` -
               `authentik_providers_microsoft_entra.microsoftentraprovider` -
               `authentik_providers_microsoft_entra.microsoftentraprovidermapping` - `authentik_providers_rac.racprovider` -
               `authentik_providers_rac.endpoint` - `authentik_providers_rac.racpropertymapping` -
               `authentik_stages_authenticator_endpoint_gdtc.authenticatorendpointgdtcstage` - `authentik_stages_source.sourcestage` -
               `authentik_events.event` - `authentik_events.notificationtransport` - `authentik_events.notification` -
               `authentik_events.notificationrule` - `authentik_events.notificationwebhookmapping`
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PolicyEventMatcherState.__new__(_PolicyEventMatcherState)

        __props__.__dict__["action"] = action
        __props__.__dict__["app"] = app
        __props__.__dict__["client_ip"] = client_ip
        __props__.__dict__["execution_logging"] = execution_logging
        __props__.__dict__["model"] = model
        __props__.__dict__["name"] = name
        __props__.__dict__["policy_event_matcher_id"] = policy_event_matcher_id
        return PolicyEventMatcher(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def action(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def app(self) -> pulumi.Output[Optional[str]]:
        """
        Allowed values: - `authentik.tenants` - `authentik.admin` - `authentik.api` - `authentik.crypto` - `authentik.flows` -
        `authentik.outposts` - `authentik.policies.dummy` - `authentik.policies.event_matcher` - `authentik.policies.expiry` -
        `authentik.policies.expression` - `authentik.policies.geoip` - `authentik.policies.password` -
        `authentik.policies.reputation` - `authentik.policies` - `authentik.providers.ldap` - `authentik.providers.oauth2` -
        `authentik.providers.proxy` - `authentik.providers.radius` - `authentik.providers.saml` - `authentik.providers.scim` -
        `authentik.rbac` - `authentik.recovery` - `authentik.sources.kerberos` - `authentik.sources.ldap` -
        `authentik.sources.oauth` - `authentik.sources.plex` - `authentik.sources.saml` - `authentik.sources.scim` -
        `authentik.stages.authenticator` - `authentik.stages.authenticator_duo` - `authentik.stages.authenticator_sms` -
        `authentik.stages.authenticator_static` - `authentik.stages.authenticator_totp` -
        `authentik.stages.authenticator_validate` - `authentik.stages.authenticator_webauthn` - `authentik.stages.captcha` -
        `authentik.stages.consent` - `authentik.stages.deny` - `authentik.stages.dummy` - `authentik.stages.email` -
        `authentik.stages.identification` - `authentik.stages.invitation` - `authentik.stages.password` -
        `authentik.stages.prompt` - `authentik.stages.user_delete` - `authentik.stages.user_login` -
        `authentik.stages.user_logout` - `authentik.stages.user_write` - `authentik.brands` - `authentik.blueprints` -
        `authentik.core` - `authentik.enterprise` - `authentik.enterprise.audit` -
        `authentik.enterprise.providers.google_workspace` - `authentik.enterprise.providers.microsoft_entra` -
        `authentik.enterprise.providers.rac` - `authentik.enterprise.stages.authenticator_endpoint_gdtc` -
        `authentik.enterprise.stages.source` - `authentik.events`
        """
        return pulumi.get(self, "app")

    @property
    @pulumi.getter(name="clientIp")
    def client_ip(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "client_ip")

    @property
    @pulumi.getter(name="executionLogging")
    def execution_logging(self) -> pulumi.Output[Optional[bool]]:
        """
        Defaults to `false`.
        """
        return pulumi.get(self, "execution_logging")

    @property
    @pulumi.getter
    def model(self) -> pulumi.Output[Optional[str]]:
        """
        Allowed values: - `authentik_tenants.domain` - `authentik_crypto.certificatekeypair` - `authentik_flows.flow` -
        `authentik_flows.flowstagebinding` - `authentik_outposts.dockerserviceconnection` -
        `authentik_outposts.kubernetesserviceconnection` - `authentik_outposts.outpost` - `authentik_policies_dummy.dummypolicy`
        - `authentik_policies_event_matcher.eventmatcherpolicy` - `authentik_policies_expiry.passwordexpirypolicy` -
        `authentik_policies_expression.expressionpolicy` - `authentik_policies_geoip.geoippolicy` -
        `authentik_policies_password.passwordpolicy` - `authentik_policies_reputation.reputationpolicy` -
        `authentik_policies.policybinding` - `authentik_providers_ldap.ldapprovider` - `authentik_providers_oauth2.scopemapping`
        - `authentik_providers_oauth2.oauth2provider` - `authentik_providers_proxy.proxyprovider` -
        `authentik_providers_radius.radiusprovider` - `authentik_providers_radius.radiusproviderpropertymapping` -
        `authentik_providers_saml.samlprovider` - `authentik_providers_saml.samlpropertymapping` -
        `authentik_providers_scim.scimprovider` - `authentik_providers_scim.scimmapping` - `authentik_rbac.role` -
        `authentik_sources_kerberos.kerberossource` - `authentik_sources_kerberos.kerberossourcepropertymapping` -
        `authentik_sources_kerberos.userkerberossourceconnection` - `authentik_sources_kerberos.groupkerberossourceconnection` -
        `authentik_sources_ldap.ldapsource` - `authentik_sources_ldap.ldapsourcepropertymapping` -
        `authentik_sources_oauth.oauthsource` - `authentik_sources_oauth.oauthsourcepropertymapping` -
        `authentik_sources_oauth.useroauthsourceconnection` - `authentik_sources_oauth.groupoauthsourceconnection` -
        `authentik_sources_plex.plexsource` - `authentik_sources_plex.plexsourcepropertymapping` -
        `authentik_sources_plex.userplexsourceconnection` - `authentik_sources_plex.groupplexsourceconnection` -
        `authentik_sources_saml.samlsource` - `authentik_sources_saml.samlsourcepropertymapping` -
        `authentik_sources_saml.usersamlsourceconnection` - `authentik_sources_saml.groupsamlsourceconnection` -
        `authentik_sources_scim.scimsource` - `authentik_sources_scim.scimsourcepropertymapping` -
        `authentik_stages_authenticator_duo.authenticatorduostage` - `authentik_stages_authenticator_duo.duodevice` -
        `authentik_stages_authenticator_sms.authenticatorsmsstage` - `authentik_stages_authenticator_sms.smsdevice` -
        `authentik_stages_authenticator_static.authenticatorstaticstage` - `authentik_stages_authenticator_static.staticdevice`
        - `authentik_stages_authenticator_totp.authenticatortotpstage` - `authentik_stages_authenticator_totp.totpdevice` -
        `authentik_stages_authenticator_validate.authenticatorvalidatestage` -
        `authentik_stages_authenticator_webauthn.authenticatorwebauthnstage` -
        `authentik_stages_authenticator_webauthn.webauthndevice` - `authentik_stages_captcha.captchastage` -
        `authentik_stages_consent.consentstage` - `authentik_stages_consent.userconsent` - `authentik_stages_deny.denystage` -
        `authentik_stages_dummy.dummystage` - `authentik_stages_email.emailstage` -
        `authentik_stages_identification.identificationstage` - `authentik_stages_invitation.invitationstage` -
        `authentik_stages_invitation.invitation` - `authentik_stages_password.passwordstage` - `authentik_stages_prompt.prompt`
        - `authentik_stages_prompt.promptstage` - `authentik_stages_user_delete.userdeletestage` -
        `authentik_stages_user_login.userloginstage` - `authentik_stages_user_logout.userlogoutstage` -
        `authentik_stages_user_write.userwritestage` - `authentik_brands.brand` - `authentik_blueprints.blueprintinstance` -
        `authentik_core.group` - `authentik_core.user` - `authentik_core.application` - `authentik_core.token` -
        `authentik_enterprise.license` - `authentik_providers_google_workspace.googleworkspaceprovider` -
        `authentik_providers_google_workspace.googleworkspaceprovidermapping` -
        `authentik_providers_microsoft_entra.microsoftentraprovider` -
        `authentik_providers_microsoft_entra.microsoftentraprovidermapping` - `authentik_providers_rac.racprovider` -
        `authentik_providers_rac.endpoint` - `authentik_providers_rac.racpropertymapping` -
        `authentik_stages_authenticator_endpoint_gdtc.authenticatorendpointgdtcstage` - `authentik_stages_source.sourcestage` -
        `authentik_events.event` - `authentik_events.notificationtransport` - `authentik_events.notification` -
        `authentik_events.notificationrule` - `authentik_events.notificationwebhookmapping`
        """
        return pulumi.get(self, "model")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="policyEventMatcherId")
    def policy_event_matcher_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "policy_event_matcher_id")

