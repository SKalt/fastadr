# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['FlowStageBindingArgs', 'FlowStageBinding']

@pulumi.input_type
class FlowStageBindingArgs:
    def __init__(__self__, *,
                 order: pulumi.Input[float],
                 stage: pulumi.Input[str],
                 target: pulumi.Input[str],
                 evaluate_on_plan: Optional[pulumi.Input[bool]] = None,
                 flow_stage_binding_id: Optional[pulumi.Input[str]] = None,
                 invalid_response_action: Optional[pulumi.Input[str]] = None,
                 policy_engine_mode: Optional[pulumi.Input[str]] = None,
                 re_evaluate_policies: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a FlowStageBinding resource.
        :param pulumi.Input[bool] evaluate_on_plan: Defaults to `true`.
        :param pulumi.Input[str] invalid_response_action: Allowed values: - `retry` - `restart` - `restart_with_context` Defaults to `retry`.
        :param pulumi.Input[str] policy_engine_mode: Allowed values: - `all` - `any` Defaults to `any`.
        :param pulumi.Input[bool] re_evaluate_policies: Defaults to `false`.
        """
        pulumi.set(__self__, "order", order)
        pulumi.set(__self__, "stage", stage)
        pulumi.set(__self__, "target", target)
        if evaluate_on_plan is not None:
            pulumi.set(__self__, "evaluate_on_plan", evaluate_on_plan)
        if flow_stage_binding_id is not None:
            pulumi.set(__self__, "flow_stage_binding_id", flow_stage_binding_id)
        if invalid_response_action is not None:
            pulumi.set(__self__, "invalid_response_action", invalid_response_action)
        if policy_engine_mode is not None:
            pulumi.set(__self__, "policy_engine_mode", policy_engine_mode)
        if re_evaluate_policies is not None:
            pulumi.set(__self__, "re_evaluate_policies", re_evaluate_policies)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[float]:
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[float]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def stage(self) -> pulumi.Input[str]:
        return pulumi.get(self, "stage")

    @stage.setter
    def stage(self, value: pulumi.Input[str]):
        pulumi.set(self, "stage", value)

    @property
    @pulumi.getter
    def target(self) -> pulumi.Input[str]:
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: pulumi.Input[str]):
        pulumi.set(self, "target", value)

    @property
    @pulumi.getter(name="evaluateOnPlan")
    def evaluate_on_plan(self) -> Optional[pulumi.Input[bool]]:
        """
        Defaults to `true`.
        """
        return pulumi.get(self, "evaluate_on_plan")

    @evaluate_on_plan.setter
    def evaluate_on_plan(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "evaluate_on_plan", value)

    @property
    @pulumi.getter(name="flowStageBindingId")
    def flow_stage_binding_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "flow_stage_binding_id")

    @flow_stage_binding_id.setter
    def flow_stage_binding_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "flow_stage_binding_id", value)

    @property
    @pulumi.getter(name="invalidResponseAction")
    def invalid_response_action(self) -> Optional[pulumi.Input[str]]:
        """
        Allowed values: - `retry` - `restart` - `restart_with_context` Defaults to `retry`.
        """
        return pulumi.get(self, "invalid_response_action")

    @invalid_response_action.setter
    def invalid_response_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "invalid_response_action", value)

    @property
    @pulumi.getter(name="policyEngineMode")
    def policy_engine_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Allowed values: - `all` - `any` Defaults to `any`.
        """
        return pulumi.get(self, "policy_engine_mode")

    @policy_engine_mode.setter
    def policy_engine_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_engine_mode", value)

    @property
    @pulumi.getter(name="reEvaluatePolicies")
    def re_evaluate_policies(self) -> Optional[pulumi.Input[bool]]:
        """
        Defaults to `false`.
        """
        return pulumi.get(self, "re_evaluate_policies")

    @re_evaluate_policies.setter
    def re_evaluate_policies(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "re_evaluate_policies", value)


@pulumi.input_type
class _FlowStageBindingState:
    def __init__(__self__, *,
                 evaluate_on_plan: Optional[pulumi.Input[bool]] = None,
                 flow_stage_binding_id: Optional[pulumi.Input[str]] = None,
                 invalid_response_action: Optional[pulumi.Input[str]] = None,
                 order: Optional[pulumi.Input[float]] = None,
                 policy_engine_mode: Optional[pulumi.Input[str]] = None,
                 re_evaluate_policies: Optional[pulumi.Input[bool]] = None,
                 stage: Optional[pulumi.Input[str]] = None,
                 target: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering FlowStageBinding resources.
        :param pulumi.Input[bool] evaluate_on_plan: Defaults to `true`.
        :param pulumi.Input[str] invalid_response_action: Allowed values: - `retry` - `restart` - `restart_with_context` Defaults to `retry`.
        :param pulumi.Input[str] policy_engine_mode: Allowed values: - `all` - `any` Defaults to `any`.
        :param pulumi.Input[bool] re_evaluate_policies: Defaults to `false`.
        """
        if evaluate_on_plan is not None:
            pulumi.set(__self__, "evaluate_on_plan", evaluate_on_plan)
        if flow_stage_binding_id is not None:
            pulumi.set(__self__, "flow_stage_binding_id", flow_stage_binding_id)
        if invalid_response_action is not None:
            pulumi.set(__self__, "invalid_response_action", invalid_response_action)
        if order is not None:
            pulumi.set(__self__, "order", order)
        if policy_engine_mode is not None:
            pulumi.set(__self__, "policy_engine_mode", policy_engine_mode)
        if re_evaluate_policies is not None:
            pulumi.set(__self__, "re_evaluate_policies", re_evaluate_policies)
        if stage is not None:
            pulumi.set(__self__, "stage", stage)
        if target is not None:
            pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter(name="evaluateOnPlan")
    def evaluate_on_plan(self) -> Optional[pulumi.Input[bool]]:
        """
        Defaults to `true`.
        """
        return pulumi.get(self, "evaluate_on_plan")

    @evaluate_on_plan.setter
    def evaluate_on_plan(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "evaluate_on_plan", value)

    @property
    @pulumi.getter(name="flowStageBindingId")
    def flow_stage_binding_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "flow_stage_binding_id")

    @flow_stage_binding_id.setter
    def flow_stage_binding_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "flow_stage_binding_id", value)

    @property
    @pulumi.getter(name="invalidResponseAction")
    def invalid_response_action(self) -> Optional[pulumi.Input[str]]:
        """
        Allowed values: - `retry` - `restart` - `restart_with_context` Defaults to `retry`.
        """
        return pulumi.get(self, "invalid_response_action")

    @invalid_response_action.setter
    def invalid_response_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "invalid_response_action", value)

    @property
    @pulumi.getter
    def order(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter(name="policyEngineMode")
    def policy_engine_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Allowed values: - `all` - `any` Defaults to `any`.
        """
        return pulumi.get(self, "policy_engine_mode")

    @policy_engine_mode.setter
    def policy_engine_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_engine_mode", value)

    @property
    @pulumi.getter(name="reEvaluatePolicies")
    def re_evaluate_policies(self) -> Optional[pulumi.Input[bool]]:
        """
        Defaults to `false`.
        """
        return pulumi.get(self, "re_evaluate_policies")

    @re_evaluate_policies.setter
    def re_evaluate_policies(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "re_evaluate_policies", value)

    @property
    @pulumi.getter
    def stage(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "stage")

    @stage.setter
    def stage(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "stage", value)

    @property
    @pulumi.getter
    def target(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target", value)


class FlowStageBinding(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 evaluate_on_plan: Optional[pulumi.Input[bool]] = None,
                 flow_stage_binding_id: Optional[pulumi.Input[str]] = None,
                 invalid_response_action: Optional[pulumi.Input[str]] = None,
                 order: Optional[pulumi.Input[float]] = None,
                 policy_engine_mode: Optional[pulumi.Input[str]] = None,
                 re_evaluate_policies: Optional[pulumi.Input[bool]] = None,
                 stage: Optional[pulumi.Input[str]] = None,
                 target: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a FlowStageBinding resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] evaluate_on_plan: Defaults to `true`.
        :param pulumi.Input[str] invalid_response_action: Allowed values: - `retry` - `restart` - `restart_with_context` Defaults to `retry`.
        :param pulumi.Input[str] policy_engine_mode: Allowed values: - `all` - `any` Defaults to `any`.
        :param pulumi.Input[bool] re_evaluate_policies: Defaults to `false`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: FlowStageBindingArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a FlowStageBinding resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param FlowStageBindingArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(FlowStageBindingArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 evaluate_on_plan: Optional[pulumi.Input[bool]] = None,
                 flow_stage_binding_id: Optional[pulumi.Input[str]] = None,
                 invalid_response_action: Optional[pulumi.Input[str]] = None,
                 order: Optional[pulumi.Input[float]] = None,
                 policy_engine_mode: Optional[pulumi.Input[str]] = None,
                 re_evaluate_policies: Optional[pulumi.Input[bool]] = None,
                 stage: Optional[pulumi.Input[str]] = None,
                 target: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = FlowStageBindingArgs.__new__(FlowStageBindingArgs)

            __props__.__dict__["evaluate_on_plan"] = evaluate_on_plan
            __props__.__dict__["flow_stage_binding_id"] = flow_stage_binding_id
            __props__.__dict__["invalid_response_action"] = invalid_response_action
            if order is None and not opts.urn:
                raise TypeError("Missing required property 'order'")
            __props__.__dict__["order"] = order
            __props__.__dict__["policy_engine_mode"] = policy_engine_mode
            __props__.__dict__["re_evaluate_policies"] = re_evaluate_policies
            if stage is None and not opts.urn:
                raise TypeError("Missing required property 'stage'")
            __props__.__dict__["stage"] = stage
            if target is None and not opts.urn:
                raise TypeError("Missing required property 'target'")
            __props__.__dict__["target"] = target
        super(FlowStageBinding, __self__).__init__(
            'authentik:index/flowStageBinding:FlowStageBinding',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            evaluate_on_plan: Optional[pulumi.Input[bool]] = None,
            flow_stage_binding_id: Optional[pulumi.Input[str]] = None,
            invalid_response_action: Optional[pulumi.Input[str]] = None,
            order: Optional[pulumi.Input[float]] = None,
            policy_engine_mode: Optional[pulumi.Input[str]] = None,
            re_evaluate_policies: Optional[pulumi.Input[bool]] = None,
            stage: Optional[pulumi.Input[str]] = None,
            target: Optional[pulumi.Input[str]] = None) -> 'FlowStageBinding':
        """
        Get an existing FlowStageBinding resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] evaluate_on_plan: Defaults to `true`.
        :param pulumi.Input[str] invalid_response_action: Allowed values: - `retry` - `restart` - `restart_with_context` Defaults to `retry`.
        :param pulumi.Input[str] policy_engine_mode: Allowed values: - `all` - `any` Defaults to `any`.
        :param pulumi.Input[bool] re_evaluate_policies: Defaults to `false`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _FlowStageBindingState.__new__(_FlowStageBindingState)

        __props__.__dict__["evaluate_on_plan"] = evaluate_on_plan
        __props__.__dict__["flow_stage_binding_id"] = flow_stage_binding_id
        __props__.__dict__["invalid_response_action"] = invalid_response_action
        __props__.__dict__["order"] = order
        __props__.__dict__["policy_engine_mode"] = policy_engine_mode
        __props__.__dict__["re_evaluate_policies"] = re_evaluate_policies
        __props__.__dict__["stage"] = stage
        __props__.__dict__["target"] = target
        return FlowStageBinding(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="evaluateOnPlan")
    def evaluate_on_plan(self) -> pulumi.Output[Optional[bool]]:
        """
        Defaults to `true`.
        """
        return pulumi.get(self, "evaluate_on_plan")

    @property
    @pulumi.getter(name="flowStageBindingId")
    def flow_stage_binding_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "flow_stage_binding_id")

    @property
    @pulumi.getter(name="invalidResponseAction")
    def invalid_response_action(self) -> pulumi.Output[Optional[str]]:
        """
        Allowed values: - `retry` - `restart` - `restart_with_context` Defaults to `retry`.
        """
        return pulumi.get(self, "invalid_response_action")

    @property
    @pulumi.getter
    def order(self) -> pulumi.Output[float]:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter(name="policyEngineMode")
    def policy_engine_mode(self) -> pulumi.Output[Optional[str]]:
        """
        Allowed values: - `all` - `any` Defaults to `any`.
        """
        return pulumi.get(self, "policy_engine_mode")

    @property
    @pulumi.getter(name="reEvaluatePolicies")
    def re_evaluate_policies(self) -> pulumi.Output[Optional[bool]]:
        """
        Defaults to `false`.
        """
        return pulumi.get(self, "re_evaluate_policies")

    @property
    @pulumi.getter
    def stage(self) -> pulumi.Output[str]:
        return pulumi.get(self, "stage")

    @property
    @pulumi.getter
    def target(self) -> pulumi.Output[str]:
        return pulumi.get(self, "target")

