# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetUsersResult',
    'AwaitableGetUsersResult',
    'get_users',
    'get_users_output',
]

@pulumi.output_type
class GetUsersResult:
    """
    A collection of values returned by getUsers.
    """
    def __init__(__self__, attributes=None, email=None, groups_by_names=None, groups_by_pks=None, id=None, is_active=None, is_superuser=None, name=None, ordering=None, path=None, path_startswith=None, search=None, username=None, users=None, uuid=None):
        if attributes and not isinstance(attributes, str):
            raise TypeError("Expected argument 'attributes' to be a str")
        pulumi.set(__self__, "attributes", attributes)
        if email and not isinstance(email, str):
            raise TypeError("Expected argument 'email' to be a str")
        pulumi.set(__self__, "email", email)
        if groups_by_names and not isinstance(groups_by_names, list):
            raise TypeError("Expected argument 'groups_by_names' to be a list")
        pulumi.set(__self__, "groups_by_names", groups_by_names)
        if groups_by_pks and not isinstance(groups_by_pks, list):
            raise TypeError("Expected argument 'groups_by_pks' to be a list")
        pulumi.set(__self__, "groups_by_pks", groups_by_pks)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if is_active and not isinstance(is_active, bool):
            raise TypeError("Expected argument 'is_active' to be a bool")
        pulumi.set(__self__, "is_active", is_active)
        if is_superuser and not isinstance(is_superuser, bool):
            raise TypeError("Expected argument 'is_superuser' to be a bool")
        pulumi.set(__self__, "is_superuser", is_superuser)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if ordering and not isinstance(ordering, str):
            raise TypeError("Expected argument 'ordering' to be a str")
        pulumi.set(__self__, "ordering", ordering)
        if path and not isinstance(path, str):
            raise TypeError("Expected argument 'path' to be a str")
        pulumi.set(__self__, "path", path)
        if path_startswith and not isinstance(path_startswith, str):
            raise TypeError("Expected argument 'path_startswith' to be a str")
        pulumi.set(__self__, "path_startswith", path_startswith)
        if search and not isinstance(search, str):
            raise TypeError("Expected argument 'search' to be a str")
        pulumi.set(__self__, "search", search)
        if username and not isinstance(username, str):
            raise TypeError("Expected argument 'username' to be a str")
        pulumi.set(__self__, "username", username)
        if users and not isinstance(users, list):
            raise TypeError("Expected argument 'users' to be a list")
        pulumi.set(__self__, "users", users)
        if uuid and not isinstance(uuid, str):
            raise TypeError("Expected argument 'uuid' to be a str")
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def attributes(self) -> Optional[str]:
        return pulumi.get(self, "attributes")

    @property
    @pulumi.getter
    def email(self) -> Optional[str]:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="groupsByNames")
    def groups_by_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "groups_by_names")

    @property
    @pulumi.getter(name="groupsByPks")
    def groups_by_pks(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "groups_by_pks")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isActive")
    def is_active(self) -> Optional[bool]:
        return pulumi.get(self, "is_active")

    @property
    @pulumi.getter(name="isSuperuser")
    def is_superuser(self) -> Optional[bool]:
        return pulumi.get(self, "is_superuser")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ordering(self) -> Optional[str]:
        return pulumi.get(self, "ordering")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="pathStartswith")
    def path_startswith(self) -> Optional[str]:
        return pulumi.get(self, "path_startswith")

    @property
    @pulumi.getter
    def search(self) -> Optional[str]:
        return pulumi.get(self, "search")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        return pulumi.get(self, "username")

    @property
    @pulumi.getter
    def users(self) -> Sequence['outputs.GetUsersUserResult']:
        return pulumi.get(self, "users")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


class AwaitableGetUsersResult(GetUsersResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetUsersResult(
            attributes=self.attributes,
            email=self.email,
            groups_by_names=self.groups_by_names,
            groups_by_pks=self.groups_by_pks,
            id=self.id,
            is_active=self.is_active,
            is_superuser=self.is_superuser,
            name=self.name,
            ordering=self.ordering,
            path=self.path,
            path_startswith=self.path_startswith,
            search=self.search,
            username=self.username,
            users=self.users,
            uuid=self.uuid)


def get_users(attributes: Optional[str] = None,
              email: Optional[str] = None,
              groups_by_names: Optional[Sequence[str]] = None,
              groups_by_pks: Optional[Sequence[str]] = None,
              id: Optional[str] = None,
              is_active: Optional[bool] = None,
              is_superuser: Optional[bool] = None,
              name: Optional[str] = None,
              ordering: Optional[str] = None,
              path: Optional[str] = None,
              path_startswith: Optional[str] = None,
              search: Optional[str] = None,
              username: Optional[str] = None,
              uuid: Optional[str] = None,
              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetUsersResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['attributes'] = attributes
    __args__['email'] = email
    __args__['groupsByNames'] = groups_by_names
    __args__['groupsByPks'] = groups_by_pks
    __args__['id'] = id
    __args__['isActive'] = is_active
    __args__['isSuperuser'] = is_superuser
    __args__['name'] = name
    __args__['ordering'] = ordering
    __args__['path'] = path
    __args__['pathStartswith'] = path_startswith
    __args__['search'] = search
    __args__['username'] = username
    __args__['uuid'] = uuid
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('authentik:index/getUsers:getUsers', __args__, opts=opts, typ=GetUsersResult, package_ref=_utilities.get_package()).value

    return AwaitableGetUsersResult(
        attributes=pulumi.get(__ret__, 'attributes'),
        email=pulumi.get(__ret__, 'email'),
        groups_by_names=pulumi.get(__ret__, 'groups_by_names'),
        groups_by_pks=pulumi.get(__ret__, 'groups_by_pks'),
        id=pulumi.get(__ret__, 'id'),
        is_active=pulumi.get(__ret__, 'is_active'),
        is_superuser=pulumi.get(__ret__, 'is_superuser'),
        name=pulumi.get(__ret__, 'name'),
        ordering=pulumi.get(__ret__, 'ordering'),
        path=pulumi.get(__ret__, 'path'),
        path_startswith=pulumi.get(__ret__, 'path_startswith'),
        search=pulumi.get(__ret__, 'search'),
        username=pulumi.get(__ret__, 'username'),
        users=pulumi.get(__ret__, 'users'),
        uuid=pulumi.get(__ret__, 'uuid'))
def get_users_output(attributes: Optional[pulumi.Input[Optional[str]]] = None,
                     email: Optional[pulumi.Input[Optional[str]]] = None,
                     groups_by_names: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                     groups_by_pks: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                     id: Optional[pulumi.Input[Optional[str]]] = None,
                     is_active: Optional[pulumi.Input[Optional[bool]]] = None,
                     is_superuser: Optional[pulumi.Input[Optional[bool]]] = None,
                     name: Optional[pulumi.Input[Optional[str]]] = None,
                     ordering: Optional[pulumi.Input[Optional[str]]] = None,
                     path: Optional[pulumi.Input[Optional[str]]] = None,
                     path_startswith: Optional[pulumi.Input[Optional[str]]] = None,
                     search: Optional[pulumi.Input[Optional[str]]] = None,
                     username: Optional[pulumi.Input[Optional[str]]] = None,
                     uuid: Optional[pulumi.Input[Optional[str]]] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetUsersResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['attributes'] = attributes
    __args__['email'] = email
    __args__['groupsByNames'] = groups_by_names
    __args__['groupsByPks'] = groups_by_pks
    __args__['id'] = id
    __args__['isActive'] = is_active
    __args__['isSuperuser'] = is_superuser
    __args__['name'] = name
    __args__['ordering'] = ordering
    __args__['path'] = path
    __args__['pathStartswith'] = path_startswith
    __args__['search'] = search
    __args__['username'] = username
    __args__['uuid'] = uuid
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('authentik:index/getUsers:getUsers', __args__, opts=opts, typ=GetUsersResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetUsersResult(
        attributes=pulumi.get(__response__, 'attributes'),
        email=pulumi.get(__response__, 'email'),
        groups_by_names=pulumi.get(__response__, 'groups_by_names'),
        groups_by_pks=pulumi.get(__response__, 'groups_by_pks'),
        id=pulumi.get(__response__, 'id'),
        is_active=pulumi.get(__response__, 'is_active'),
        is_superuser=pulumi.get(__response__, 'is_superuser'),
        name=pulumi.get(__response__, 'name'),
        ordering=pulumi.get(__response__, 'ordering'),
        path=pulumi.get(__response__, 'path'),
        path_startswith=pulumi.get(__response__, 'path_startswith'),
        search=pulumi.get(__response__, 'search'),
        username=pulumi.get(__response__, 'username'),
        users=pulumi.get(__response__, 'users'),
        uuid=pulumi.get(__response__, 'uuid')))
