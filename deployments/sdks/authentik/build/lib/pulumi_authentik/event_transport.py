# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['EventTransportArgs', 'EventTransport']

@pulumi.input_type
class EventTransportArgs:
    def __init__(__self__, *,
                 mode: pulumi.Input[str],
                 event_transport_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 send_once: Optional[pulumi.Input[bool]] = None,
                 webhook_mapping: Optional[pulumi.Input[str]] = None,
                 webhook_url: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a EventTransport resource.
        :param pulumi.Input[str] mode: Allowed values: - `local` - `webhook` - `webhook_slack` - `email`
        :param pulumi.Input[bool] send_once: Defaults to `true`.
        """
        pulumi.set(__self__, "mode", mode)
        if event_transport_id is not None:
            pulumi.set(__self__, "event_transport_id", event_transport_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if send_once is not None:
            pulumi.set(__self__, "send_once", send_once)
        if webhook_mapping is not None:
            pulumi.set(__self__, "webhook_mapping", webhook_mapping)
        if webhook_url is not None:
            pulumi.set(__self__, "webhook_url", webhook_url)

    @property
    @pulumi.getter
    def mode(self) -> pulumi.Input[str]:
        """
        Allowed values: - `local` - `webhook` - `webhook_slack` - `email`
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter(name="eventTransportId")
    def event_transport_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "event_transport_id")

    @event_transport_id.setter
    def event_transport_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "event_transport_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="sendOnce")
    def send_once(self) -> Optional[pulumi.Input[bool]]:
        """
        Defaults to `true`.
        """
        return pulumi.get(self, "send_once")

    @send_once.setter
    def send_once(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "send_once", value)

    @property
    @pulumi.getter(name="webhookMapping")
    def webhook_mapping(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "webhook_mapping")

    @webhook_mapping.setter
    def webhook_mapping(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "webhook_mapping", value)

    @property
    @pulumi.getter(name="webhookUrl")
    def webhook_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "webhook_url")

    @webhook_url.setter
    def webhook_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "webhook_url", value)


@pulumi.input_type
class _EventTransportState:
    def __init__(__self__, *,
                 event_transport_id: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 send_once: Optional[pulumi.Input[bool]] = None,
                 webhook_mapping: Optional[pulumi.Input[str]] = None,
                 webhook_url: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering EventTransport resources.
        :param pulumi.Input[str] mode: Allowed values: - `local` - `webhook` - `webhook_slack` - `email`
        :param pulumi.Input[bool] send_once: Defaults to `true`.
        """
        if event_transport_id is not None:
            pulumi.set(__self__, "event_transport_id", event_transport_id)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if send_once is not None:
            pulumi.set(__self__, "send_once", send_once)
        if webhook_mapping is not None:
            pulumi.set(__self__, "webhook_mapping", webhook_mapping)
        if webhook_url is not None:
            pulumi.set(__self__, "webhook_url", webhook_url)

    @property
    @pulumi.getter(name="eventTransportId")
    def event_transport_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "event_transport_id")

    @event_transport_id.setter
    def event_transport_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "event_transport_id", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        Allowed values: - `local` - `webhook` - `webhook_slack` - `email`
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="sendOnce")
    def send_once(self) -> Optional[pulumi.Input[bool]]:
        """
        Defaults to `true`.
        """
        return pulumi.get(self, "send_once")

    @send_once.setter
    def send_once(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "send_once", value)

    @property
    @pulumi.getter(name="webhookMapping")
    def webhook_mapping(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "webhook_mapping")

    @webhook_mapping.setter
    def webhook_mapping(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "webhook_mapping", value)

    @property
    @pulumi.getter(name="webhookUrl")
    def webhook_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "webhook_url")

    @webhook_url.setter
    def webhook_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "webhook_url", value)


class EventTransport(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 event_transport_id: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 send_once: Optional[pulumi.Input[bool]] = None,
                 webhook_mapping: Optional[pulumi.Input[str]] = None,
                 webhook_url: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a EventTransport resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] mode: Allowed values: - `local` - `webhook` - `webhook_slack` - `email`
        :param pulumi.Input[bool] send_once: Defaults to `true`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: EventTransportArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a EventTransport resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param EventTransportArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(EventTransportArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 event_transport_id: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 send_once: Optional[pulumi.Input[bool]] = None,
                 webhook_mapping: Optional[pulumi.Input[str]] = None,
                 webhook_url: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = EventTransportArgs.__new__(EventTransportArgs)

            __props__.__dict__["event_transport_id"] = event_transport_id
            if mode is None and not opts.urn:
                raise TypeError("Missing required property 'mode'")
            __props__.__dict__["mode"] = mode
            __props__.__dict__["name"] = name
            __props__.__dict__["send_once"] = send_once
            __props__.__dict__["webhook_mapping"] = webhook_mapping
            __props__.__dict__["webhook_url"] = webhook_url
        super(EventTransport, __self__).__init__(
            'authentik:index/eventTransport:EventTransport',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            event_transport_id: Optional[pulumi.Input[str]] = None,
            mode: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            send_once: Optional[pulumi.Input[bool]] = None,
            webhook_mapping: Optional[pulumi.Input[str]] = None,
            webhook_url: Optional[pulumi.Input[str]] = None) -> 'EventTransport':
        """
        Get an existing EventTransport resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] mode: Allowed values: - `local` - `webhook` - `webhook_slack` - `email`
        :param pulumi.Input[bool] send_once: Defaults to `true`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _EventTransportState.__new__(_EventTransportState)

        __props__.__dict__["event_transport_id"] = event_transport_id
        __props__.__dict__["mode"] = mode
        __props__.__dict__["name"] = name
        __props__.__dict__["send_once"] = send_once
        __props__.__dict__["webhook_mapping"] = webhook_mapping
        __props__.__dict__["webhook_url"] = webhook_url
        return EventTransport(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="eventTransportId")
    def event_transport_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "event_transport_id")

    @property
    @pulumi.getter
    def mode(self) -> pulumi.Output[str]:
        """
        Allowed values: - `local` - `webhook` - `webhook_slack` - `email`
        """
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="sendOnce")
    def send_once(self) -> pulumi.Output[Optional[bool]]:
        """
        Defaults to `true`.
        """
        return pulumi.get(self, "send_once")

    @property
    @pulumi.getter(name="webhookMapping")
    def webhook_mapping(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "webhook_mapping")

    @property
    @pulumi.getter(name="webhookUrl")
    def webhook_url(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "webhook_url")

