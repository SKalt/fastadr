# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetUserResult',
    'AwaitableGetUserResult',
    'get_user',
    'get_user_output',
]

@pulumi.output_type
class GetUserResult:
    """
    A collection of values returned by getUser.
    """
    def __init__(__self__, attributes=None, avatar=None, email=None, groups=None, id=None, is_active=None, is_superuser=None, last_login=None, name=None, path=None, pk=None, type=None, uid=None, username=None, uuid=None):
        if attributes and not isinstance(attributes, str):
            raise TypeError("Expected argument 'attributes' to be a str")
        pulumi.set(__self__, "attributes", attributes)
        if avatar and not isinstance(avatar, str):
            raise TypeError("Expected argument 'avatar' to be a str")
        pulumi.set(__self__, "avatar", avatar)
        if email and not isinstance(email, str):
            raise TypeError("Expected argument 'email' to be a str")
        pulumi.set(__self__, "email", email)
        if groups and not isinstance(groups, list):
            raise TypeError("Expected argument 'groups' to be a list")
        pulumi.set(__self__, "groups", groups)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if is_active and not isinstance(is_active, bool):
            raise TypeError("Expected argument 'is_active' to be a bool")
        pulumi.set(__self__, "is_active", is_active)
        if is_superuser and not isinstance(is_superuser, bool):
            raise TypeError("Expected argument 'is_superuser' to be a bool")
        pulumi.set(__self__, "is_superuser", is_superuser)
        if last_login and not isinstance(last_login, str):
            raise TypeError("Expected argument 'last_login' to be a str")
        pulumi.set(__self__, "last_login", last_login)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if path and not isinstance(path, str):
            raise TypeError("Expected argument 'path' to be a str")
        pulumi.set(__self__, "path", path)
        if pk and not isinstance(pk, float):
            raise TypeError("Expected argument 'pk' to be a float")
        pulumi.set(__self__, "pk", pk)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if uid and not isinstance(uid, str):
            raise TypeError("Expected argument 'uid' to be a str")
        pulumi.set(__self__, "uid", uid)
        if username and not isinstance(username, str):
            raise TypeError("Expected argument 'username' to be a str")
        pulumi.set(__self__, "username", username)
        if uuid and not isinstance(uuid, str):
            raise TypeError("Expected argument 'uuid' to be a str")
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def attributes(self) -> str:
        return pulumi.get(self, "attributes")

    @property
    @pulumi.getter
    def avatar(self) -> str:
        return pulumi.get(self, "avatar")

    @property
    @pulumi.getter
    def email(self) -> str:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter
    def groups(self) -> Sequence[str]:
        return pulumi.get(self, "groups")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isActive")
    def is_active(self) -> bool:
        return pulumi.get(self, "is_active")

    @property
    @pulumi.getter(name="isSuperuser")
    def is_superuser(self) -> bool:
        return pulumi.get(self, "is_superuser")

    @property
    @pulumi.getter(name="lastLogin")
    def last_login(self) -> str:
        return pulumi.get(self, "last_login")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def pk(self) -> float:
        return pulumi.get(self, "pk")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uid(self) -> str:
        return pulumi.get(self, "uid")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        return pulumi.get(self, "uuid")


class AwaitableGetUserResult(GetUserResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetUserResult(
            attributes=self.attributes,
            avatar=self.avatar,
            email=self.email,
            groups=self.groups,
            id=self.id,
            is_active=self.is_active,
            is_superuser=self.is_superuser,
            last_login=self.last_login,
            name=self.name,
            path=self.path,
            pk=self.pk,
            type=self.type,
            uid=self.uid,
            username=self.username,
            uuid=self.uuid)


def get_user(id: Optional[str] = None,
             pk: Optional[float] = None,
             username: Optional[str] = None,
             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetUserResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['pk'] = pk
    __args__['username'] = username
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('authentik:index/getUser:getUser', __args__, opts=opts, typ=GetUserResult, package_ref=_utilities.get_package()).value

    return AwaitableGetUserResult(
        attributes=pulumi.get(__ret__, 'attributes'),
        avatar=pulumi.get(__ret__, 'avatar'),
        email=pulumi.get(__ret__, 'email'),
        groups=pulumi.get(__ret__, 'groups'),
        id=pulumi.get(__ret__, 'id'),
        is_active=pulumi.get(__ret__, 'is_active'),
        is_superuser=pulumi.get(__ret__, 'is_superuser'),
        last_login=pulumi.get(__ret__, 'last_login'),
        name=pulumi.get(__ret__, 'name'),
        path=pulumi.get(__ret__, 'path'),
        pk=pulumi.get(__ret__, 'pk'),
        type=pulumi.get(__ret__, 'type'),
        uid=pulumi.get(__ret__, 'uid'),
        username=pulumi.get(__ret__, 'username'),
        uuid=pulumi.get(__ret__, 'uuid'))
def get_user_output(id: Optional[pulumi.Input[Optional[str]]] = None,
                    pk: Optional[pulumi.Input[Optional[float]]] = None,
                    username: Optional[pulumi.Input[Optional[str]]] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetUserResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['pk'] = pk
    __args__['username'] = username
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('authentik:index/getUser:getUser', __args__, opts=opts, typ=GetUserResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetUserResult(
        attributes=pulumi.get(__response__, 'attributes'),
        avatar=pulumi.get(__response__, 'avatar'),
        email=pulumi.get(__response__, 'email'),
        groups=pulumi.get(__response__, 'groups'),
        id=pulumi.get(__response__, 'id'),
        is_active=pulumi.get(__response__, 'is_active'),
        is_superuser=pulumi.get(__response__, 'is_superuser'),
        last_login=pulumi.get(__response__, 'last_login'),
        name=pulumi.get(__response__, 'name'),
        path=pulumi.get(__response__, 'path'),
        pk=pulumi.get(__response__, 'pk'),
        type=pulumi.get(__response__, 'type'),
        uid=pulumi.get(__response__, 'uid'),
        username=pulumi.get(__response__, 'username'),
        uuid=pulumi.get(__response__, 'uuid')))
